<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="1320"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.15%)</title><rect x="0.0000%" y="789" width="0.1515%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="0.0000%" y="773" width="0.1515%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="757" width="0.0758%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3258%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="741" width="0.0758%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3258%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="725" width="0.0758%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3258%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="709" width="0.0758%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3258%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="693" width="0.0758%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3258%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="677" width="0.0758%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3258%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.0758%" y="661" width="0.0758%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3258%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.23%)</title><rect x="0.0000%" y="805" width="0.2273%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.1515%" y="789" width="0.0758%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.4015%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.1515%" y="773" width="0.0758%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.4015%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.1515%" y="757" width="0.0758%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.4015%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.53%)</title><rect x="0.0000%" y="821" width="0.5303%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.30%)</title><rect x="0.2273%" y="805" width="0.3030%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="4"/><text x="0.4773%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="0.3030%" y="789" width="0.2273%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="3"/><text x="0.5530%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="0.3030%" y="773" width="0.2273%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="3"/><text x="0.5530%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="0.3788%" y="757" width="0.1515%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="2"/><text x="0.6288%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.61%)</title><rect x="0.0000%" y="837" width="0.6061%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="8"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.5303%" y="821" width="0.0758%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="0.7803%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.5303%" y="805" width="0.0758%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="0.7803%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.5303%" y="789" width="0.0758%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="0.7803%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.5303%" y="773" width="0.0758%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.7803%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.5303%" y="757" width="0.0758%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="0.7803%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.6061%" y="837" width="0.0758%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="0.8561%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.6061%" y="821" width="0.0758%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="0.8561%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.08%)</title><rect x="0.7576%" y="565" width="0.0758%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="1.0076%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.7576%" y="549" width="0.0758%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="1.0076%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="0.7576%" y="533" width="0.0758%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="1.0076%" y="543.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="0.7576%" y="517" width="0.0758%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="1.0076%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="0.7576%" y="501" width="0.0758%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="1.0076%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="0.7576%" y="485" width="0.0758%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="1.0076%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="469" width="0.0758%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="1"/><text x="1.0076%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="453" width="0.0758%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="1.0076%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="437" width="0.0758%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="1.0076%" y="447.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="421" width="0.0758%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="1.0076%" y="431.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="405" width="0.0758%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="1.0076%" y="415.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="389" width="0.0758%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="1.0076%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7576%" y="373" width="0.0758%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="1.0076%" y="383.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1 samples, 0.08%)</title><rect x="0.7576%" y="357" width="0.0758%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="1.0076%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (1 samples, 0.08%)</title><rect x="0.7576%" y="341" width="0.0758%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="1.0076%" y="351.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (1 samples, 0.08%)</title><rect x="0.7576%" y="325" width="0.0758%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="1.0076%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.08%)</title><rect x="0.7576%" y="309" width="0.0758%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="1.0076%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.08%)</title><rect x="0.7576%" y="293" width="0.0758%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="1.0076%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.08%)</title><rect x="0.7576%" y="277" width="0.0758%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="1.0076%" y="287.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.08%)</title><rect x="0.7576%" y="261" width="0.0758%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="1.0076%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.7576%" y="245" width="0.0758%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="1.0076%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.08%)</title><rect x="0.7576%" y="229" width="0.0758%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="1.0076%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.08%)</title><rect x="0.7576%" y="213" width="0.0758%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="1.0076%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.08%)</title><rect x="0.7576%" y="197" width="0.0758%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="1"/><text x="1.0076%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="0.7576%" y="181" width="0.0758%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="1.0076%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="165" width="0.0758%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="1.0076%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="149" width="0.0758%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="1.0076%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="133" width="0.0758%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="1.0076%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="117" width="0.0758%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="1.0076%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="101" width="0.0758%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="1"/><text x="1.0076%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="85" width="0.0758%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="1"/><text x="1.0076%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="69" width="0.0758%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="1"/><text x="1.0076%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="53" width="0.0758%" height="15" fill="rgb(209,12,38)" fg:x="10" fg:w="1"/><text x="1.0076%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.7576%" y="37" width="0.0758%" height="15" fill="rgb(227,1,9)" fg:x="10" fg:w="1"/><text x="1.0076%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;(std::collections::hash::set::HashSet&lt;(day06::Pos,day06::Direction)&gt;,bool)&gt; (1 samples, 0.08%)</title><rect x="0.8333%" y="565" width="0.0758%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="1.0833%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;(day06::Pos,day06::Direction)&gt;&gt; (1 samples, 0.08%)</title><rect x="0.8333%" y="549" width="0.0758%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="1.0833%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;(day06::Pos,day06::Direction),std::hash::random::RandomState&gt;&gt; (1 samples, 0.08%)</title><rect x="0.8333%" y="533" width="0.0758%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="1"/><text x="1.0833%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;(day06::Pos,day06::Direction),(),std::hash::random::RandomState&gt;&gt; (1 samples, 0.08%)</title><rect x="0.8333%" y="517" width="0.0758%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="1"/><text x="1.0833%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;((day06::Pos,day06::Direction),())&gt;&gt; (1 samples, 0.08%)</title><rect x="0.8333%" y="501" width="0.0758%" height="15" fill="rgb(234,67,33)" fg:x="11" fg:w="1"/><text x="1.0833%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.8333%" y="485" width="0.0758%" height="15" fill="rgb(247,98,35)" fg:x="11" fg:w="1"/><text x="1.0833%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.08%)</title><rect x="0.8333%" y="469" width="0.0758%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="1"/><text x="1.0833%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.08%)</title><rect x="0.8333%" y="453" width="0.0758%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="1.0833%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.08%)</title><rect x="0.8333%" y="437" width="0.0758%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="1.0833%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.08%)</title><rect x="0.8333%" y="421" width="0.0758%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="1.0833%" y="431.50"></text></g><g><title>cfree (1 samples, 0.08%)</title><rect x="0.8333%" y="405" width="0.0758%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="1.0833%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.08%)</title><rect x="0.8333%" y="389" width="0.0758%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="1.0833%" y="399.50"></text></g><g><title>__default_morecore (1 samples, 0.08%)</title><rect x="0.8333%" y="373" width="0.0758%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="1"/><text x="1.0833%" y="383.50"></text></g><g><title>__sbrk (1 samples, 0.08%)</title><rect x="0.8333%" y="357" width="0.0758%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1"/><text x="1.0833%" y="367.50"></text></g><g><title>brk (1 samples, 0.08%)</title><rect x="0.8333%" y="341" width="0.0758%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="1"/><text x="1.0833%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="0.8333%" y="325" width="0.0758%" height="15" fill="rgb(207,117,47)" fg:x="11" fg:w="1"/><text x="1.0833%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;day06::Puzzle&gt; (1 samples, 0.08%)</title><rect x="0.9091%" y="565" width="0.0758%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="1"/><text x="1.1591%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;day06::Element,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;day06::Element,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="0.9091%" y="549" width="0.0758%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="1"/><text x="1.1591%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;day06::Element,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (1 samples, 0.08%)</title><rect x="0.9091%" y="533" width="0.0758%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="1"/><text x="1.1591%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;day06::Element&gt;&gt; (1 samples, 0.08%)</title><rect x="0.9091%" y="517" width="0.0758%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="1"/><text x="1.1591%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;day06::Element&gt;&gt; (1 samples, 0.08%)</title><rect x="0.9091%" y="501" width="0.0758%" height="15" fill="rgb(211,96,35)" fg:x="12" fg:w="1"/><text x="1.1591%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.9091%" y="485" width="0.0758%" height="15" fill="rgb(253,215,40)" fg:x="12" fg:w="1"/><text x="1.1591%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.08%)</title><rect x="0.9091%" y="469" width="0.0758%" height="15" fill="rgb(211,81,21)" fg:x="12" fg:w="1"/><text x="1.1591%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.08%)</title><rect x="0.9091%" y="453" width="0.0758%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="1"/><text x="1.1591%" y="463.50"></text></g><g><title>cfree (1 samples, 0.08%)</title><rect x="0.9091%" y="437" width="0.0758%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="1"/><text x="1.1591%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.08%)</title><rect x="2.6515%" y="549" width="0.0758%" height="15" fill="rgb(237,122,38)" fg:x="35" fg:w="1"/><text x="2.9015%" y="559.50"></text></g><g><title>day06::Direction::rotate_right (1 samples, 0.08%)</title><rect x="2.7273%" y="549" width="0.0758%" height="15" fill="rgb(244,218,35)" fg:x="36" fg:w="1"/><text x="2.9773%" y="559.50"></text></g><g><title>&lt;(usize,usize) as nalgebra::base::indexing::MatrixIndex&lt;T,R,C,S&gt;&gt;::contained_by (2 samples, 0.15%)</title><rect x="2.8030%" y="517" width="0.1515%" height="15" fill="rgb(240,68,47)" fg:x="37" fg:w="2"/><text x="3.0530%" y="527.50"></text></g><g><title>&lt;usize as nalgebra::base::indexing::DimRange&lt;D&gt;&gt;::contained_by (2 samples, 0.15%)</title><rect x="2.8030%" y="501" width="0.1515%" height="15" fill="rgb(210,16,53)" fg:x="37" fg:w="2"/><text x="3.0530%" y="511.50"></text></g><g><title>nalgebra::base::indexing::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::get (3 samples, 0.23%)</title><rect x="2.8030%" y="549" width="0.2273%" height="15" fill="rgb(235,124,12)" fg:x="37" fg:w="3"/><text x="3.0530%" y="559.50"></text></g><g><title>nalgebra::base::indexing::MatrixIndex::get (3 samples, 0.23%)</title><rect x="2.8030%" y="533" width="0.2273%" height="15" fill="rgb(224,169,11)" fg:x="37" fg:w="3"/><text x="3.0530%" y="543.50"></text></g><g><title>&lt;(usize,usize) as nalgebra::base::indexing::MatrixIndex&lt;T,R,C,S&gt;&gt;::get_unchecked (1 samples, 0.08%)</title><rect x="2.9545%" y="517" width="0.0758%" height="15" fill="rgb(250,166,2)" fg:x="39" fg:w="1"/><text x="3.2045%" y="527.50"></text></g><g><title>nalgebra::base::storage::RawStorage::get_unchecked (1 samples, 0.08%)</title><rect x="2.9545%" y="501" width="0.0758%" height="15" fill="rgb(242,216,29)" fg:x="39" fg:w="1"/><text x="3.2045%" y="511.50"></text></g><g><title>nalgebra::base::storage::RawStorage::linear_index (1 samples, 0.08%)</title><rect x="2.9545%" y="485" width="0.0758%" height="15" fill="rgb(230,116,27)" fg:x="39" fg:w="1"/><text x="3.2045%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.53%)</title><rect x="6.2879%" y="389" width="0.5303%" height="15" fill="rgb(228,99,48)" fg:x="83" fg:w="7"/><text x="6.5379%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 1.59%)</title><rect x="5.6818%" y="405" width="1.5909%" height="15" fill="rgb(253,11,6)" fg:x="75" fg:w="21"/><text x="5.9318%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.45%)</title><rect x="6.8182%" y="389" width="0.4545%" height="15" fill="rgb(247,143,39)" fg:x="90" fg:w="6"/><text x="7.0682%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (47 samples, 3.56%)</title><rect x="7.6515%" y="389" width="3.5606%" height="15" fill="rgb(236,97,10)" fg:x="101" fg:w="47"/><text x="7.9015%" y="399.50">core..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (95 samples, 7.20%)</title><rect x="4.3939%" y="453" width="7.1970%" height="15" fill="rgb(233,208,19)" fg:x="58" fg:w="95"/><text x="4.6439%" y="463.50">&lt;std::hash..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (95 samples, 7.20%)</title><rect x="4.3939%" y="437" width="7.1970%" height="15" fill="rgb(216,164,2)" fg:x="58" fg:w="95"/><text x="4.6439%" y="447.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (95 samples, 7.20%)</title><rect x="4.3939%" y="421" width="7.1970%" height="15" fill="rgb(220,129,5)" fg:x="58" fg:w="95"/><text x="4.6439%" y="431.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (57 samples, 4.32%)</title><rect x="7.2727%" y="405" width="4.3182%" height="15" fill="rgb(242,17,10)" fg:x="96" fg:w="57"/><text x="7.5227%" y="415.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.38%)</title><rect x="11.2121%" y="389" width="0.3788%" height="15" fill="rgb(242,107,0)" fg:x="148" fg:w="5"/><text x="11.4621%" y="399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.68%)</title><rect x="11.5909%" y="453" width="0.6818%" height="15" fill="rgb(251,28,31)" fg:x="153" fg:w="9"/><text x="11.8409%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.38%)</title><rect x="11.8939%" y="437" width="0.3788%" height="15" fill="rgb(233,223,10)" fg:x="157" fg:w="5"/><text x="12.1439%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 0.38%)</title><rect x="11.8939%" y="421" width="0.3788%" height="15" fill="rgb(215,21,27)" fg:x="157" fg:w="5"/><text x="12.1439%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5 samples, 0.38%)</title><rect x="11.8939%" y="405" width="0.3788%" height="15" fill="rgb(232,23,21)" fg:x="157" fg:w="5"/><text x="12.1439%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.53%)</title><rect x="14.0909%" y="293" width="0.5303%" height="15" fill="rgb(244,5,23)" fg:x="186" fg:w="7"/><text x="14.3409%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.91%)</title><rect x="13.7879%" y="309" width="0.9091%" height="15" fill="rgb(226,81,46)" fg:x="182" fg:w="12"/><text x="14.0379%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.08%)</title><rect x="14.6212%" y="293" width="0.0758%" height="15" fill="rgb(247,70,30)" fg:x="193" fg:w="1"/><text x="14.8712%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 2.50%)</title><rect x="12.3485%" y="357" width="2.5000%" height="15" fill="rgb(212,68,19)" fg:x="163" fg:w="33"/><text x="12.5985%" y="367.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 2.50%)</title><rect x="12.3485%" y="341" width="2.5000%" height="15" fill="rgb(240,187,13)" fg:x="163" fg:w="33"/><text x="12.5985%" y="351.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 2.50%)</title><rect x="12.3485%" y="325" width="2.5000%" height="15" fill="rgb(223,113,26)" fg:x="163" fg:w="33"/><text x="12.5985%" y="335.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.15%)</title><rect x="14.6970%" y="309" width="0.1515%" height="15" fill="rgb(206,192,2)" fg:x="194" fg:w="2"/><text x="14.9470%" y="319.50"></text></g><g><title>&lt;day06::Direction as core::hash::Hash&gt;::hash (34 samples, 2.58%)</title><rect x="12.3485%" y="421" width="2.5758%" height="15" fill="rgb(241,108,4)" fg:x="163" fg:w="34"/><text x="12.5985%" y="431.50">&lt;d..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (34 samples, 2.58%)</title><rect x="12.3485%" y="405" width="2.5758%" height="15" fill="rgb(247,173,49)" fg:x="163" fg:w="34"/><text x="12.5985%" y="415.50">co..</text></g><g><title>core::hash::Hasher::write_isize (34 samples, 2.58%)</title><rect x="12.3485%" y="389" width="2.5758%" height="15" fill="rgb(224,114,35)" fg:x="163" fg:w="34"/><text x="12.5985%" y="399.50">co..</text></g><g><title>_ZN4core4hash6Hasher11write_usize17h760e313c9e1d0dd1E.llvm.4642207729619142155 (34 samples, 2.58%)</title><rect x="12.3485%" y="373" width="2.5758%" height="15" fill="rgb(245,159,27)" fg:x="163" fg:w="34"/><text x="12.5985%" y="383.50">_Z..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.08%)</title><rect x="14.8485%" y="357" width="0.0758%" height="15" fill="rgb(245,172,44)" fg:x="196" fg:w="1"/><text x="15.0985%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 0.98%)</title><rect x="18.7879%" y="309" width="0.9848%" height="15" fill="rgb(236,23,11)" fg:x="248" fg:w="13"/><text x="19.0379%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 2.12%)</title><rect x="18.6364%" y="325" width="2.1212%" height="15" fill="rgb(205,117,38)" fg:x="246" fg:w="28"/><text x="18.8864%" y="335.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.98%)</title><rect x="19.7727%" y="309" width="0.9848%" height="15" fill="rgb(237,72,25)" fg:x="261" fg:w="13"/><text x="20.0227%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (83 samples, 6.29%)</title><rect x="15.0758%" y="373" width="6.2879%" height="15" fill="rgb(244,70,9)" fg:x="199" fg:w="83"/><text x="15.3258%" y="383.50">&lt;std::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (83 samples, 6.29%)</title><rect x="15.0758%" y="357" width="6.2879%" height="15" fill="rgb(217,125,39)" fg:x="199" fg:w="83"/><text x="15.3258%" y="367.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (83 samples, 6.29%)</title><rect x="15.0758%" y="341" width="6.2879%" height="15" fill="rgb(235,36,10)" fg:x="199" fg:w="83"/><text x="15.3258%" y="351.50">&lt;core::h..</text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.61%)</title><rect x="20.7576%" y="325" width="0.6061%" height="15" fill="rgb(251,123,47)" fg:x="274" fg:w="8"/><text x="21.0076%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (236 samples, 17.88%)</title><rect x="3.6364%" y="485" width="17.8788%" height="15" fill="rgb(221,13,13)" fg:x="48" fg:w="236"/><text x="3.8864%" y="495.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (233 samples, 17.65%)</title><rect x="3.8636%" y="469" width="17.6515%" height="15" fill="rgb(238,131,9)" fg:x="51" fg:w="233"/><text x="4.1136%" y="479.50">core::hash::BuildHasher::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (122 samples, 9.24%)</title><rect x="12.2727%" y="453" width="9.2424%" height="15" fill="rgb(211,50,8)" fg:x="162" fg:w="122"/><text x="12.5227%" y="463.50">core::hash::i..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (122 samples, 9.24%)</title><rect x="12.2727%" y="437" width="9.2424%" height="15" fill="rgb(245,182,24)" fg:x="162" fg:w="122"/><text x="12.5227%" y="447.50">core::hash::i..</text></g><g><title>&lt;day06::Pos as core::hash::Hash&gt;::hash (87 samples, 6.59%)</title><rect x="14.9242%" y="421" width="6.5909%" height="15" fill="rgb(242,14,37)" fg:x="197" fg:w="87"/><text x="15.1742%" y="431.50">&lt;day06::P..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (87 samples, 6.59%)</title><rect x="14.9242%" y="405" width="6.5909%" height="15" fill="rgb(246,228,12)" fg:x="197" fg:w="87"/><text x="15.1742%" y="415.50">core::has..</text></g><g><title>_ZN4core4hash6Hasher11write_usize17h760e313c9e1d0dd1E.llvm.4642207729619142155 (86 samples, 6.52%)</title><rect x="15.0000%" y="389" width="6.5152%" height="15" fill="rgb(213,55,15)" fg:x="198" fg:w="86"/><text x="15.2500%" y="399.50">_ZN4core4..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.15%)</title><rect x="21.3636%" y="373" width="0.1515%" height="15" fill="rgb(209,9,3)" fg:x="282" fg:w="2"/><text x="21.6136%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 1.59%)</title><rect x="22.1970%" y="437" width="1.5909%" height="15" fill="rgb(230,59,30)" fg:x="293" fg:w="21"/><text x="22.4470%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (21 samples, 1.59%)</title><rect x="22.1970%" y="421" width="1.5909%" height="15" fill="rgb(209,121,21)" fg:x="293" fg:w="21"/><text x="22.4470%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (5 samples, 0.38%)</title><rect x="23.4091%" y="405" width="0.3788%" height="15" fill="rgb(220,109,13)" fg:x="309" fg:w="5"/><text x="23.6591%" y="415.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (5 samples, 0.38%)</title><rect x="23.4091%" y="389" width="0.3788%" height="15" fill="rgb(232,18,1)" fg:x="309" fg:w="5"/><text x="23.6591%" y="399.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (5 samples, 0.38%)</title><rect x="23.7879%" y="437" width="0.3788%" height="15" fill="rgb(215,41,42)" fg:x="314" fg:w="5"/><text x="24.0379%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.38%)</title><rect x="24.1667%" y="437" width="0.3788%" height="15" fill="rgb(224,123,36)" fg:x="319" fg:w="5"/><text x="24.4167%" y="447.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (5 samples, 0.38%)</title><rect x="24.1667%" y="421" width="0.3788%" height="15" fill="rgb(240,125,3)" fg:x="319" fg:w="5"/><text x="24.4167%" y="431.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.38%)</title><rect x="24.1667%" y="405" width="0.3788%" height="15" fill="rgb(205,98,50)" fg:x="319" fg:w="5"/><text x="24.4167%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.38%)</title><rect x="24.1667%" y="389" width="0.3788%" height="15" fill="rgb(205,185,37)" fg:x="319" fg:w="5"/><text x="24.4167%" y="399.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (5 samples, 0.38%)</title><rect x="24.1667%" y="373" width="0.3788%" height="15" fill="rgb(238,207,15)" fg:x="319" fg:w="5"/><text x="24.4167%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (25 samples, 1.89%)</title><rect x="24.5455%" y="437" width="1.8939%" height="15" fill="rgb(213,199,42)" fg:x="324" fg:w="25"/><text x="24.7955%" y="447.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.08%)</title><rect x="26.4394%" y="437" width="0.0758%" height="15" fill="rgb(235,201,11)" fg:x="349" fg:w="1"/><text x="26.6894%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.08%)</title><rect x="26.4394%" y="421" width="0.0758%" height="15" fill="rgb(207,46,11)" fg:x="349" fg:w="1"/><text x="26.6894%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="26.4394%" y="405" width="0.0758%" height="15" fill="rgb(241,35,35)" fg:x="349" fg:w="1"/><text x="26.6894%" y="415.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (323 samples, 24.47%)</title><rect x="3.0303%" y="549" width="24.4697%" height="15" fill="rgb(243,32,47)" fg:x="40" fg:w="323"/><text x="3.2803%" y="559.50">std::collections::hash::set::HashSet&lt;T,..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (323 samples, 24.47%)</title><rect x="3.0303%" y="533" width="24.4697%" height="15" fill="rgb(247,202,23)" fg:x="40" fg:w="323"/><text x="3.2803%" y="543.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (323 samples, 24.47%)</title><rect x="3.0303%" y="517" width="24.4697%" height="15" fill="rgb(219,102,11)" fg:x="40" fg:w="323"/><text x="3.2803%" y="527.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::conta..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (323 samples, 24.47%)</title><rect x="3.0303%" y="501" width="24.4697%" height="15" fill="rgb(243,110,44)" fg:x="40" fg:w="323"/><text x="3.2803%" y="511.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_i..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (79 samples, 5.98%)</title><rect x="21.5152%" y="485" width="5.9848%" height="15" fill="rgb(222,74,54)" fg:x="284" fg:w="79"/><text x="21.7652%" y="495.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (79 samples, 5.98%)</title><rect x="21.5152%" y="469" width="5.9848%" height="15" fill="rgb(216,99,12)" fg:x="284" fg:w="79"/><text x="21.7652%" y="479.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (79 samples, 5.98%)</title><rect x="21.5152%" y="453" width="5.9848%" height="15" fill="rgb(226,22,26)" fg:x="284" fg:w="79"/><text x="21.7652%" y="463.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (13 samples, 0.98%)</title><rect x="26.5152%" y="437" width="0.9848%" height="15" fill="rgb(217,163,10)" fg:x="350" fg:w="13"/><text x="26.7652%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.98%)</title><rect x="26.5152%" y="421" width="0.9848%" height="15" fill="rgb(213,25,53)" fg:x="350" fg:w="13"/><text x="26.7652%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 1.21%)</title><rect x="33.1061%" y="405" width="1.2121%" height="15" fill="rgb(252,105,26)" fg:x="437" fg:w="16"/><text x="33.3561%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (27 samples, 2.05%)</title><rect x="32.8030%" y="421" width="2.0455%" height="15" fill="rgb(220,39,43)" fg:x="433" fg:w="27"/><text x="33.0530%" y="431.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.53%)</title><rect x="34.3182%" y="405" width="0.5303%" height="15" fill="rgb(229,68,48)" fg:x="453" fg:w="7"/><text x="34.5682%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (44 samples, 3.33%)</title><rect x="35.1515%" y="405" width="3.3333%" height="15" fill="rgb(252,8,32)" fg:x="464" fg:w="44"/><text x="35.4015%" y="415.50">cor..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (129 samples, 9.77%)</title><rect x="29.6970%" y="469" width="9.7727%" height="15" fill="rgb(223,20,43)" fg:x="392" fg:w="129"/><text x="29.9470%" y="479.50">&lt;std::hash::ra..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (129 samples, 9.77%)</title><rect x="29.6970%" y="453" width="9.7727%" height="15" fill="rgb(229,81,49)" fg:x="392" fg:w="129"/><text x="29.9470%" y="463.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (129 samples, 9.77%)</title><rect x="29.6970%" y="437" width="9.7727%" height="15" fill="rgb(236,28,36)" fg:x="392" fg:w="129"/><text x="29.9470%" y="447.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (61 samples, 4.62%)</title><rect x="34.8485%" y="421" width="4.6212%" height="15" fill="rgb(249,185,26)" fg:x="460" fg:w="61"/><text x="35.0985%" y="431.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.98%)</title><rect x="38.4848%" y="405" width="0.9848%" height="15" fill="rgb(249,174,33)" fg:x="508" fg:w="13"/><text x="38.7348%" y="415.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 0.61%)</title><rect x="39.4697%" y="469" width="0.6061%" height="15" fill="rgb(233,201,37)" fg:x="521" fg:w="8"/><text x="39.7197%" y="479.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.23%)</title><rect x="39.8485%" y="453" width="0.2273%" height="15" fill="rgb(221,78,26)" fg:x="526" fg:w="3"/><text x="40.0985%" y="463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.23%)</title><rect x="39.8485%" y="437" width="0.2273%" height="15" fill="rgb(250,127,30)" fg:x="526" fg:w="3"/><text x="40.0985%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.23%)</title><rect x="39.8485%" y="421" width="0.2273%" height="15" fill="rgb(230,49,44)" fg:x="526" fg:w="3"/><text x="40.0985%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.83%)</title><rect x="41.5909%" y="309" width="0.8333%" height="15" fill="rgb(229,67,23)" fg:x="549" fg:w="11"/><text x="41.8409%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 1.52%)</title><rect x="41.4394%" y="325" width="1.5152%" height="15" fill="rgb(249,83,47)" fg:x="547" fg:w="20"/><text x="41.6894%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.53%)</title><rect x="42.4242%" y="309" width="0.5303%" height="15" fill="rgb(215,43,3)" fg:x="560" fg:w="7"/><text x="42.6742%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 2.73%)</title><rect x="40.3788%" y="373" width="2.7273%" height="15" fill="rgb(238,154,13)" fg:x="533" fg:w="36"/><text x="40.6288%" y="383.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 2.73%)</title><rect x="40.3788%" y="357" width="2.7273%" height="15" fill="rgb(219,56,2)" fg:x="533" fg:w="36"/><text x="40.6288%" y="367.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 2.73%)</title><rect x="40.3788%" y="341" width="2.7273%" height="15" fill="rgb(233,0,4)" fg:x="533" fg:w="36"/><text x="40.6288%" y="351.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.15%)</title><rect x="42.9545%" y="325" width="0.1515%" height="15" fill="rgb(235,30,7)" fg:x="567" fg:w="2"/><text x="43.2045%" y="335.50"></text></g><g><title>&lt;day06::Direction as core::hash::Hash&gt;::hash (37 samples, 2.80%)</title><rect x="40.3788%" y="437" width="2.8030%" height="15" fill="rgb(250,79,13)" fg:x="533" fg:w="37"/><text x="40.6288%" y="447.50">&lt;d..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (37 samples, 2.80%)</title><rect x="40.3788%" y="421" width="2.8030%" height="15" fill="rgb(211,146,34)" fg:x="533" fg:w="37"/><text x="40.6288%" y="431.50">co..</text></g><g><title>core::hash::Hasher::write_isize (37 samples, 2.80%)</title><rect x="40.3788%" y="405" width="2.8030%" height="15" fill="rgb(228,22,38)" fg:x="533" fg:w="37"/><text x="40.6288%" y="415.50">co..</text></g><g><title>_ZN4core4hash6Hasher11write_usize17h760e313c9e1d0dd1E.llvm.4642207729619142155 (37 samples, 2.80%)</title><rect x="40.3788%" y="389" width="2.8030%" height="15" fill="rgb(235,168,5)" fg:x="533" fg:w="37"/><text x="40.6288%" y="399.50">_Z..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.08%)</title><rect x="43.1061%" y="373" width="0.0758%" height="15" fill="rgb(221,155,16)" fg:x="569" fg:w="1"/><text x="43.3561%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 1.14%)</title><rect x="47.2727%" y="325" width="1.1364%" height="15" fill="rgb(215,215,53)" fg:x="624" fg:w="15"/><text x="47.5227%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 2.12%)</title><rect x="46.7424%" y="341" width="2.1212%" height="15" fill="rgb(223,4,10)" fg:x="617" fg:w="28"/><text x="46.9924%" y="351.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.45%)</title><rect x="48.4091%" y="325" width="0.4545%" height="15" fill="rgb(234,103,6)" fg:x="639" fg:w="6"/><text x="48.6591%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (79 samples, 5.98%)</title><rect x="43.6364%" y="389" width="5.9848%" height="15" fill="rgb(227,97,0)" fg:x="576" fg:w="79"/><text x="43.8864%" y="399.50">&lt;std::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (79 samples, 5.98%)</title><rect x="43.6364%" y="373" width="5.9848%" height="15" fill="rgb(234,150,53)" fg:x="576" fg:w="79"/><text x="43.8864%" y="383.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (79 samples, 5.98%)</title><rect x="43.6364%" y="357" width="5.9848%" height="15" fill="rgb(228,201,54)" fg:x="576" fg:w="79"/><text x="43.8864%" y="367.50">&lt;core::h..</text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.76%)</title><rect x="48.8636%" y="341" width="0.7576%" height="15" fill="rgb(222,22,37)" fg:x="645" fg:w="10"/><text x="49.1136%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (274 samples, 20.76%)</title><rect x="29.2424%" y="501" width="20.7576%" height="15" fill="rgb(237,53,32)" fg:x="386" fg:w="274"/><text x="29.4924%" y="511.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (274 samples, 20.76%)</title><rect x="29.2424%" y="485" width="20.7576%" height="15" fill="rgb(233,25,53)" fg:x="386" fg:w="274"/><text x="29.4924%" y="495.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (131 samples, 9.92%)</title><rect x="40.0758%" y="469" width="9.9242%" height="15" fill="rgb(210,40,34)" fg:x="529" fg:w="131"/><text x="40.3258%" y="479.50">core::hash::im..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (131 samples, 9.92%)</title><rect x="40.0758%" y="453" width="9.9242%" height="15" fill="rgb(241,220,44)" fg:x="529" fg:w="131"/><text x="40.3258%" y="463.50">core::hash::im..</text></g><g><title>&lt;day06::Pos as core::hash::Hash&gt;::hash (90 samples, 6.82%)</title><rect x="43.1818%" y="437" width="6.8182%" height="15" fill="rgb(235,28,35)" fg:x="570" fg:w="90"/><text x="43.4318%" y="447.50">&lt;day06::P..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (90 samples, 6.82%)</title><rect x="43.1818%" y="421" width="6.8182%" height="15" fill="rgb(210,56,17)" fg:x="570" fg:w="90"/><text x="43.4318%" y="431.50">core::has..</text></g><g><title>_ZN4core4hash6Hasher11write_usize17h760e313c9e1d0dd1E.llvm.4642207729619142155 (88 samples, 6.67%)</title><rect x="43.3333%" y="405" width="6.6667%" height="15" fill="rgb(224,130,29)" fg:x="572" fg:w="88"/><text x="43.5833%" y="415.50">_ZN4core4..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (5 samples, 0.38%)</title><rect x="49.6212%" y="389" width="0.3788%" height="15" fill="rgb(235,212,8)" fg:x="655" fg:w="5"/><text x="49.8712%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="50.8333%" y="389" width="0.0758%" height="15" fill="rgb(223,33,50)" fg:x="671" fg:w="1"/><text x="51.0833%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.08%)</title><rect x="50.8333%" y="373" width="0.0758%" height="15" fill="rgb(219,149,13)" fg:x="671" fg:w="1"/><text x="51.0833%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.61%)</title><rect x="50.3788%" y="421" width="0.6061%" height="15" fill="rgb(250,156,29)" fg:x="665" fg:w="8"/><text x="50.6288%" y="431.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (8 samples, 0.61%)</title><rect x="50.3788%" y="405" width="0.6061%" height="15" fill="rgb(216,193,19)" fg:x="665" fg:w="8"/><text x="50.6288%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.08%)</title><rect x="50.9091%" y="389" width="0.0758%" height="15" fill="rgb(216,135,14)" fg:x="672" fg:w="1"/><text x="51.1591%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.08%)</title><rect x="50.9091%" y="373" width="0.0758%" height="15" fill="rgb(241,47,5)" fg:x="672" fg:w="1"/><text x="51.1591%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 4.17%)</title><rect x="50.9848%" y="421" width="4.1667%" height="15" fill="rgb(233,42,35)" fg:x="673" fg:w="55"/><text x="51.2348%" y="431.50">core:..</text></g><g><title>[unknown] (40 samples, 3.03%)</title><rect x="52.1212%" y="405" width="3.0303%" height="15" fill="rgb(231,13,6)" fg:x="688" fg:w="40"/><text x="52.3712%" y="415.50">[un..</text></g><g><title>[unknown] (29 samples, 2.20%)</title><rect x="52.9545%" y="389" width="2.1970%" height="15" fill="rgb(207,181,40)" fg:x="699" fg:w="29"/><text x="53.2045%" y="399.50">[..</text></g><g><title>[unknown] (28 samples, 2.12%)</title><rect x="53.0303%" y="373" width="2.1212%" height="15" fill="rgb(254,173,49)" fg:x="700" fg:w="28"/><text x="53.2803%" y="383.50">[..</text></g><g><title>[unknown] (25 samples, 1.89%)</title><rect x="53.2576%" y="357" width="1.8939%" height="15" fill="rgb(221,1,38)" fg:x="703" fg:w="25"/><text x="53.5076%" y="367.50">[..</text></g><g><title>[unknown] (24 samples, 1.82%)</title><rect x="53.3333%" y="341" width="1.8182%" height="15" fill="rgb(206,124,46)" fg:x="704" fg:w="24"/><text x="53.5833%" y="351.50">[..</text></g><g><title>[unknown] (18 samples, 1.36%)</title><rect x="53.7879%" y="325" width="1.3636%" height="15" fill="rgb(249,21,11)" fg:x="710" fg:w="18"/><text x="54.0379%" y="335.50"></text></g><g><title>[unknown] (14 samples, 1.06%)</title><rect x="54.0909%" y="309" width="1.0606%" height="15" fill="rgb(222,201,40)" fg:x="714" fg:w="14"/><text x="54.3409%" y="319.50"></text></g><g><title>[unknown] (9 samples, 0.68%)</title><rect x="54.4697%" y="293" width="0.6818%" height="15" fill="rgb(235,61,29)" fg:x="719" fg:w="9"/><text x="54.7197%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.53%)</title><rect x="54.6212%" y="277" width="0.5303%" height="15" fill="rgb(219,207,3)" fg:x="721" fg:w="7"/><text x="54.8712%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="55.0758%" y="261" width="0.0758%" height="15" fill="rgb(222,56,46)" fg:x="727" fg:w="1"/><text x="55.3258%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.38%)</title><rect x="58.2576%" y="293" width="0.3788%" height="15" fill="rgb(239,76,54)" fg:x="769" fg:w="5"/><text x="58.5076%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 1.52%)</title><rect x="57.7273%" y="309" width="1.5152%" height="15" fill="rgb(231,124,27)" fg:x="762" fg:w="20"/><text x="57.9773%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.61%)</title><rect x="58.6364%" y="293" width="0.6061%" height="15" fill="rgb(249,195,6)" fg:x="774" fg:w="8"/><text x="58.8864%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (76 samples, 5.76%)</title><rect x="60.1515%" y="293" width="5.7576%" height="15" fill="rgb(237,174,47)" fg:x="794" fg:w="76"/><text x="60.4015%" y="303.50">core::n..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (142 samples, 10.76%)</title><rect x="56.2879%" y="357" width="10.7576%" height="15" fill="rgb(206,201,31)" fg:x="743" fg:w="142"/><text x="56.5379%" y="367.50">&lt;std::hash::rand..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (142 samples, 10.76%)</title><rect x="56.2879%" y="341" width="10.7576%" height="15" fill="rgb(231,57,52)" fg:x="743" fg:w="142"/><text x="56.5379%" y="351.50">&lt;core::hash::sip..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (142 samples, 10.76%)</title><rect x="56.2879%" y="325" width="10.7576%" height="15" fill="rgb(248,177,22)" fg:x="743" fg:w="142"/><text x="56.5379%" y="335.50">&lt;core::hash::sip..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (103 samples, 7.80%)</title><rect x="59.2424%" y="309" width="7.8030%" height="15" fill="rgb(215,211,37)" fg:x="782" fg:w="103"/><text x="59.4924%" y="319.50">&lt;core::hash..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 1.14%)</title><rect x="65.9091%" y="293" width="1.1364%" height="15" fill="rgb(241,128,51)" fg:x="870" fg:w="15"/><text x="66.1591%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (12 samples, 0.91%)</title><rect x="67.0455%" y="357" width="0.9091%" height="15" fill="rgb(227,165,31)" fg:x="885" fg:w="12"/><text x="67.2955%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.30%)</title><rect x="67.6515%" y="341" width="0.3030%" height="15" fill="rgb(228,167,24)" fg:x="893" fg:w="4"/><text x="67.9015%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.30%)</title><rect x="67.6515%" y="325" width="0.3030%" height="15" fill="rgb(228,143,12)" fg:x="893" fg:w="4"/><text x="67.9015%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.30%)</title><rect x="67.6515%" y="309" width="0.3030%" height="15" fill="rgb(249,149,8)" fg:x="893" fg:w="4"/><text x="67.9015%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.45%)</title><rect x="69.6212%" y="197" width="0.4545%" height="15" fill="rgb(243,35,44)" fg:x="919" fg:w="6"/><text x="69.8712%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (13 samples, 0.98%)</title><rect x="69.4697%" y="213" width="0.9848%" height="15" fill="rgb(246,89,9)" fg:x="917" fg:w="13"/><text x="69.7197%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.38%)</title><rect x="70.0758%" y="197" width="0.3788%" height="15" fill="rgb(233,213,13)" fg:x="925" fg:w="5"/><text x="70.3258%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 2.50%)</title><rect x="68.1061%" y="261" width="2.5000%" height="15" fill="rgb(233,141,41)" fg:x="899" fg:w="33"/><text x="68.3561%" y="271.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 2.50%)</title><rect x="68.1061%" y="245" width="2.5000%" height="15" fill="rgb(239,167,4)" fg:x="899" fg:w="33"/><text x="68.3561%" y="255.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 2.50%)</title><rect x="68.1061%" y="229" width="2.5000%" height="15" fill="rgb(209,217,16)" fg:x="899" fg:w="33"/><text x="68.3561%" y="239.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.15%)</title><rect x="70.4545%" y="213" width="0.1515%" height="15" fill="rgb(219,88,35)" fg:x="930" fg:w="2"/><text x="70.7045%" y="223.50"></text></g><g><title>&lt;day06::Direction as core::hash::Hash&gt;::hash (35 samples, 2.65%)</title><rect x="68.0303%" y="325" width="2.6515%" height="15" fill="rgb(220,193,23)" fg:x="898" fg:w="35"/><text x="68.2803%" y="335.50">&lt;d..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (35 samples, 2.65%)</title><rect x="68.0303%" y="309" width="2.6515%" height="15" fill="rgb(230,90,52)" fg:x="898" fg:w="35"/><text x="68.2803%" y="319.50">co..</text></g><g><title>core::hash::Hasher::write_isize (35 samples, 2.65%)</title><rect x="68.0303%" y="293" width="2.6515%" height="15" fill="rgb(252,106,19)" fg:x="898" fg:w="35"/><text x="68.2803%" y="303.50">co..</text></g><g><title>_ZN4core4hash6Hasher11write_usize17h760e313c9e1d0dd1E.llvm.4642207729619142155 (34 samples, 2.58%)</title><rect x="68.1061%" y="277" width="2.5758%" height="15" fill="rgb(206,74,20)" fg:x="899" fg:w="34"/><text x="68.3561%" y="287.50">_Z..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.08%)</title><rect x="70.6061%" y="261" width="0.0758%" height="15" fill="rgb(230,138,44)" fg:x="932" fg:w="1"/><text x="70.8561%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.83%)</title><rect x="75.3788%" y="213" width="0.8333%" height="15" fill="rgb(235,182,43)" fg:x="995" fg:w="11"/><text x="75.6288%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 2.12%)</title><rect x="74.5455%" y="229" width="2.1212%" height="15" fill="rgb(242,16,51)" fg:x="984" fg:w="28"/><text x="74.7955%" y="239.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.45%)</title><rect x="76.2121%" y="213" width="0.4545%" height="15" fill="rgb(248,9,4)" fg:x="1006" fg:w="6"/><text x="76.4621%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (12 samples, 0.91%)</title><rect x="76.6667%" y="229" width="0.9091%" height="15" fill="rgb(210,31,22)" fg:x="1012" fg:w="12"/><text x="76.9167%" y="239.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (297 samples, 22.50%)</title><rect x="55.1515%" y="405" width="22.5000%" height="15" fill="rgb(239,54,39)" fg:x="728" fg:w="297"/><text x="55.4015%" y="415.50">hashbrown::map::make_hasher::_{{clos..</text></g><g><title>hashbrown::map::make_hash (297 samples, 22.50%)</title><rect x="55.1515%" y="389" width="22.5000%" height="15" fill="rgb(230,99,41)" fg:x="728" fg:w="297"/><text x="55.4015%" y="399.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (293 samples, 22.20%)</title><rect x="55.4545%" y="373" width="22.1970%" height="15" fill="rgb(253,106,12)" fg:x="732" fg:w="293"/><text x="55.7045%" y="383.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (128 samples, 9.70%)</title><rect x="67.9545%" y="357" width="9.6970%" height="15" fill="rgb(213,46,41)" fg:x="897" fg:w="128"/><text x="68.2045%" y="367.50">core::hash::im..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (128 samples, 9.70%)</title><rect x="67.9545%" y="341" width="9.6970%" height="15" fill="rgb(215,133,35)" fg:x="897" fg:w="128"/><text x="68.2045%" y="351.50">core::hash::im..</text></g><g><title>&lt;day06::Pos as core::hash::Hash&gt;::hash (92 samples, 6.97%)</title><rect x="70.6818%" y="325" width="6.9697%" height="15" fill="rgb(213,28,5)" fg:x="933" fg:w="92"/><text x="70.9318%" y="335.50">&lt;day06::P..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (92 samples, 6.97%)</title><rect x="70.6818%" y="309" width="6.9697%" height="15" fill="rgb(215,77,49)" fg:x="933" fg:w="92"/><text x="70.9318%" y="319.50">core::has..</text></g><g><title>_ZN4core4hash6Hasher11write_usize17h760e313c9e1d0dd1E.llvm.4642207729619142155 (85 samples, 6.44%)</title><rect x="71.2121%" y="293" width="6.4394%" height="15" fill="rgb(248,100,22)" fg:x="940" fg:w="85"/><text x="71.4621%" y="303.50">_ZN4core..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (84 samples, 6.36%)</title><rect x="71.2879%" y="277" width="6.3636%" height="15" fill="rgb(208,67,9)" fg:x="941" fg:w="84"/><text x="71.5379%" y="287.50">&lt;std::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (84 samples, 6.36%)</title><rect x="71.2879%" y="261" width="6.3636%" height="15" fill="rgb(219,133,21)" fg:x="941" fg:w="84"/><text x="71.5379%" y="271.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (84 samples, 6.36%)</title><rect x="71.2879%" y="245" width="6.3636%" height="15" fill="rgb(246,46,29)" fg:x="941" fg:w="84"/><text x="71.5379%" y="255.50">&lt;core::h..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.5758%" y="229" width="0.0758%" height="15" fill="rgb(246,185,52)" fg:x="1024" fg:w="1"/><text x="77.8258%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.08%)</title><rect x="77.6515%" y="405" width="0.0758%" height="15" fill="rgb(252,136,11)" fg:x="1025" fg:w="1"/><text x="77.9015%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.08%)</title><rect x="77.6515%" y="389" width="0.0758%" height="15" fill="rgb(219,138,53)" fg:x="1025" fg:w="1"/><text x="77.9015%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.08%)</title><rect x="77.6515%" y="373" width="0.0758%" height="15" fill="rgb(211,51,23)" fg:x="1025" fg:w="1"/><text x="77.9015%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.08%)</title><rect x="77.6515%" y="357" width="0.0758%" height="15" fill="rgb(247,221,28)" fg:x="1025" fg:w="1"/><text x="77.9015%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (299 samples, 22.65%)</title><rect x="55.1515%" y="421" width="22.6515%" height="15" fill="rgb(251,222,45)" fg:x="728" fg:w="299"/><text x="55.4015%" y="431.50">hashbrown::raw::RawTable&lt;T,A&gt;::reser..</text></g><g><title>hashbrown::raw::RawTableInner::bucket (1 samples, 0.08%)</title><rect x="77.7273%" y="405" width="0.0758%" height="15" fill="rgb(217,162,53)" fg:x="1026" fg:w="1"/><text x="77.9773%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (1 samples, 0.08%)</title><rect x="77.7273%" y="389" width="0.0758%" height="15" fill="rgb(229,93,14)" fg:x="1026" fg:w="1"/><text x="77.9773%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (6 samples, 0.45%)</title><rect x="77.8030%" y="421" width="0.4545%" height="15" fill="rgb(209,67,49)" fg:x="1027" fg:w="6"/><text x="78.0530%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (6 samples, 0.45%)</title><rect x="77.8030%" y="405" width="0.4545%" height="15" fill="rgb(213,87,29)" fg:x="1027" fg:w="6"/><text x="78.0530%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (46 samples, 3.48%)</title><rect x="78.7121%" y="373" width="3.4848%" height="15" fill="rgb(205,151,52)" fg:x="1039" fg:w="46"/><text x="78.9621%" y="383.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (78 samples, 5.91%)</title><rect x="78.2576%" y="389" width="5.9091%" height="15" fill="rgb(253,215,39)" fg:x="1033" fg:w="78"/><text x="78.5076%" y="399.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (26 samples, 1.97%)</title><rect x="82.1970%" y="373" width="1.9697%" height="15" fill="rgb(221,220,41)" fg:x="1085" fg:w="26"/><text x="82.4470%" y="383.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 1.97%)</title><rect x="82.1970%" y="357" width="1.9697%" height="15" fill="rgb(218,133,21)" fg:x="1085" fg:w="26"/><text x="82.4470%" y="367.50">c..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (35 samples, 2.65%)</title><rect x="84.1667%" y="389" width="2.6515%" height="15" fill="rgb(221,193,43)" fg:x="1111" fg:w="35"/><text x="84.4167%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (8 samples, 0.61%)</title><rect x="86.2121%" y="373" width="0.6061%" height="15" fill="rgb(240,128,52)" fg:x="1138" fg:w="8"/><text x="86.4621%" y="383.50"></text></g><g><title>hashbrown::raw::is_full (8 samples, 0.61%)</title><rect x="86.2121%" y="357" width="0.6061%" height="15" fill="rgb(253,114,12)" fg:x="1138" fg:w="8"/><text x="86.4621%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (123 samples, 9.32%)</title><rect x="78.2576%" y="405" width="9.3182%" height="15" fill="rgb(215,223,47)" fg:x="1033" fg:w="123"/><text x="78.5076%" y="415.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (10 samples, 0.76%)</title><rect x="86.8182%" y="389" width="0.7576%" height="15" fill="rgb(248,225,23)" fg:x="1146" fg:w="10"/><text x="87.0682%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (131 samples, 9.92%)</title><rect x="78.2576%" y="421" width="9.9242%" height="15" fill="rgb(250,108,0)" fg:x="1033" fg:w="131"/><text x="78.5076%" y="431.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (8 samples, 0.61%)</title><rect x="87.5758%" y="405" width="0.6061%" height="15" fill="rgb(228,208,7)" fg:x="1156" fg:w="8"/><text x="87.8258%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (8 samples, 0.61%)</title><rect x="87.5758%" y="389" width="0.6061%" height="15" fill="rgb(244,45,10)" fg:x="1156" fg:w="8"/><text x="87.8258%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.15%)</title><rect x="88.1818%" y="389" width="0.1515%" height="15" fill="rgb(207,125,25)" fg:x="1164" fg:w="2"/><text x="88.4318%" y="399.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.15%)</title><rect x="88.1818%" y="373" width="0.1515%" height="15" fill="rgb(210,195,18)" fg:x="1164" fg:w="2"/><text x="88.4318%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="88.1818%" y="357" width="0.1515%" height="15" fill="rgb(249,80,12)" fg:x="1164" fg:w="2"/><text x="88.4318%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="341" width="0.0758%" height="15" fill="rgb(221,65,9)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="325" width="0.0758%" height="15" fill="rgb(235,49,36)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="309" width="0.0758%" height="15" fill="rgb(225,32,20)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="293" width="0.0758%" height="15" fill="rgb(215,141,46)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="277" width="0.0758%" height="15" fill="rgb(250,160,47)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="261" width="0.0758%" height="15" fill="rgb(216,222,40)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="245" width="0.0758%" height="15" fill="rgb(234,217,39)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="229" width="0.0758%" height="15" fill="rgb(207,178,40)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.2576%" y="213" width="0.0758%" height="15" fill="rgb(221,136,13)" fg:x="1165" fg:w="1"/><text x="88.5076%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.3333%" y="261" width="0.0758%" height="15" fill="rgb(249,199,10)" fg:x="1166" fg:w="1"/><text x="88.5833%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.3333%" y="245" width="0.0758%" height="15" fill="rgb(249,222,13)" fg:x="1166" fg:w="1"/><text x="88.5833%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.3333%" y="229" width="0.0758%" height="15" fill="rgb(244,185,38)" fg:x="1166" fg:w="1"/><text x="88.5833%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.3333%" y="213" width="0.0758%" height="15" fill="rgb(236,202,9)" fg:x="1166" fg:w="1"/><text x="88.5833%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.3333%" y="197" width="0.0758%" height="15" fill="rgb(250,229,37)" fg:x="1166" fg:w="1"/><text x="88.5833%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (508 samples, 38.48%)</title><rect x="50.0000%" y="485" width="38.4848%" height="15" fill="rgb(206,174,23)" fg:x="660" fg:w="508"/><text x="50.2500%" y="495.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve</text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17he80a838fa589378fE.llvm.7232135224028056481 (503 samples, 38.11%)</title><rect x="50.3788%" y="469" width="38.1061%" height="15" fill="rgb(211,33,43)" fg:x="665" fg:w="503"/><text x="50.6288%" y="479.50">_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17he80..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (503 samples, 38.11%)</title><rect x="50.3788%" y="453" width="38.1061%" height="15" fill="rgb(245,58,50)" fg:x="665" fg:w="503"/><text x="50.6288%" y="463.50">hashbrown::raw::RawTableInner::reserve_rehash_inner</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (503 samples, 38.11%)</title><rect x="50.3788%" y="437" width="38.1061%" height="15" fill="rgb(244,68,36)" fg:x="665" fg:w="503"/><text x="50.6288%" y="447.50">hashbrown::raw::RawTableInner::resize_inner</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.30%)</title><rect x="88.1818%" y="421" width="0.3030%" height="15" fill="rgb(232,229,15)" fg:x="1164" fg:w="4"/><text x="88.4318%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.30%)</title><rect x="88.1818%" y="405" width="0.3030%" height="15" fill="rgb(254,30,23)" fg:x="1164" fg:w="4"/><text x="88.4318%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.15%)</title><rect x="88.3333%" y="389" width="0.1515%" height="15" fill="rgb(235,160,14)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="399.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.15%)</title><rect x="88.3333%" y="373" width="0.1515%" height="15" fill="rgb(212,155,44)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.15%)</title><rect x="88.3333%" y="357" width="0.1515%" height="15" fill="rgb(226,2,50)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.15%)</title><rect x="88.3333%" y="341" width="0.1515%" height="15" fill="rgb(234,177,6)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.15%)</title><rect x="88.3333%" y="325" width="0.1515%" height="15" fill="rgb(217,24,9)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="335.50"></text></g><g><title>malloc (2 samples, 0.15%)</title><rect x="88.3333%" y="309" width="0.1515%" height="15" fill="rgb(220,13,46)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="88.3333%" y="293" width="0.1515%" height="15" fill="rgb(239,221,27)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="88.3333%" y="277" width="0.1515%" height="15" fill="rgb(222,198,25)" fg:x="1166" fg:w="2"/><text x="88.5833%" y="287.50"></text></g><g><title>__default_morecore (1 samples, 0.08%)</title><rect x="88.4091%" y="261" width="0.0758%" height="15" fill="rgb(211,99,13)" fg:x="1167" fg:w="1"/><text x="88.6591%" y="271.50"></text></g><g><title>__sbrk (1 samples, 0.08%)</title><rect x="88.4091%" y="245" width="0.0758%" height="15" fill="rgb(232,111,31)" fg:x="1167" fg:w="1"/><text x="88.6591%" y="255.50"></text></g><g><title>brk (1 samples, 0.08%)</title><rect x="88.4091%" y="229" width="0.0758%" height="15" fill="rgb(245,82,37)" fg:x="1167" fg:w="1"/><text x="88.6591%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.4091%" y="213" width="0.0758%" height="15" fill="rgb(227,149,46)" fg:x="1167" fg:w="1"/><text x="88.6591%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.4091%" y="197" width="0.0758%" height="15" fill="rgb(218,36,50)" fg:x="1167" fg:w="1"/><text x="88.6591%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="88.4091%" y="181" width="0.0758%" height="15" fill="rgb(226,80,48)" fg:x="1167" fg:w="1"/><text x="88.6591%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 2.05%)</title><rect x="88.7879%" y="469" width="2.0455%" height="15" fill="rgb(238,224,15)" fg:x="1172" fg:w="27"/><text x="89.0379%" y="479.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (27 samples, 2.05%)</title><rect x="88.7879%" y="453" width="2.0455%" height="15" fill="rgb(241,136,10)" fg:x="1172" fg:w="27"/><text x="89.0379%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 0.15%)</title><rect x="90.8333%" y="469" width="0.1515%" height="15" fill="rgb(208,32,45)" fg:x="1199" fg:w="2"/><text x="91.0833%" y="479.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.15%)</title><rect x="90.8333%" y="453" width="0.1515%" height="15" fill="rgb(207,135,9)" fg:x="1199" fg:w="2"/><text x="91.0833%" y="463.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.15%)</title><rect x="90.8333%" y="437" width="0.1515%" height="15" fill="rgb(206,86,44)" fg:x="1199" fg:w="2"/><text x="91.0833%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.15%)</title><rect x="90.8333%" y="421" width="0.1515%" height="15" fill="rgb(245,177,15)" fg:x="1199" fg:w="2"/><text x="91.0833%" y="431.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2 samples, 0.15%)</title><rect x="90.8333%" y="405" width="0.1515%" height="15" fill="rgb(206,64,50)" fg:x="1199" fg:w="2"/><text x="91.0833%" y="415.50"></text></g><g><title>&lt;day06::Pos as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="90.9091%" y="389" width="0.0758%" height="15" fill="rgb(234,36,40)" fg:x="1200" fg:w="1"/><text x="91.1591%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.30%)</title><rect x="90.9848%" y="469" width="0.3030%" height="15" fill="rgb(213,64,8)" fg:x="1201" fg:w="4"/><text x="91.2348%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (18 samples, 1.36%)</title><rect x="91.2879%" y="469" width="1.3636%" height="15" fill="rgb(210,75,36)" fg:x="1205" fg:w="18"/><text x="91.5379%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (14 samples, 1.06%)</title><rect x="91.5909%" y="453" width="1.0606%" height="15" fill="rgb(229,88,21)" fg:x="1209" fg:w="14"/><text x="91.8409%" y="463.50"></text></g><g><title>hashbrown::raw::is_full (14 samples, 1.06%)</title><rect x="91.5909%" y="437" width="1.0606%" height="15" fill="rgb(252,204,47)" fg:x="1209" fg:w="14"/><text x="91.8409%" y="447.50"></text></g><g><title>hashbrown::raw::h2 (30 samples, 2.27%)</title><rect x="92.6515%" y="469" width="2.2727%" height="15" fill="rgb(208,77,27)" fg:x="1223" fg:w="30"/><text x="92.9015%" y="479.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.08%)</title><rect x="94.9242%" y="469" width="0.0758%" height="15" fill="rgb(221,76,26)" fg:x="1253" fg:w="1"/><text x="95.1742%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.08%)</title><rect x="94.9242%" y="453" width="0.0758%" height="15" fill="rgb(225,139,18)" fg:x="1253" fg:w="1"/><text x="95.1742%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="94.9242%" y="437" width="0.0758%" height="15" fill="rgb(230,137,11)" fg:x="1253" fg:w="1"/><text x="95.1742%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.53%)</title><rect x="95.0000%" y="469" width="0.5303%" height="15" fill="rgb(212,28,1)" fg:x="1254" fg:w="7"/><text x="95.2500%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.53%)</title><rect x="95.0000%" y="453" width="0.5303%" height="15" fill="rgb(248,164,17)" fg:x="1254" fg:w="7"/><text x="95.2500%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (607 samples, 45.98%)</title><rect x="50.0000%" y="501" width="45.9848%" height="15" fill="rgb(222,171,42)" fg:x="660" fg:w="607"/><text x="50.2500%" y="511.50">hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (99 samples, 7.50%)</title><rect x="88.4848%" y="485" width="7.5000%" height="15" fill="rgb(243,84,45)" fg:x="1168" fg:w="99"/><text x="88.7348%" y="495.50">hashbrown:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (6 samples, 0.45%)</title><rect x="95.5303%" y="469" width="0.4545%" height="15" fill="rgb(252,49,23)" fg:x="1261" fg:w="6"/><text x="95.7803%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.45%)</title><rect x="95.5303%" y="453" width="0.4545%" height="15" fill="rgb(215,19,7)" fg:x="1261" fg:w="6"/><text x="95.7803%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.45%)</title><rect x="95.5303%" y="437" width="0.4545%" height="15" fill="rgb(238,81,41)" fg:x="1261" fg:w="6"/><text x="95.7803%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (40 samples, 3.03%)</title><rect x="95.9848%" y="485" width="3.0303%" height="15" fill="rgb(210,199,37)" fg:x="1267" fg:w="40"/><text x="96.2348%" y="495.50">has..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (40 samples, 3.03%)</title><rect x="95.9848%" y="469" width="3.0303%" height="15" fill="rgb(244,192,49)" fg:x="1267" fg:w="40"/><text x="96.2348%" y="479.50">cor..</text></g><g><title>core::ptr::write (40 samples, 3.03%)</title><rect x="95.9848%" y="453" width="3.0303%" height="15" fill="rgb(226,211,11)" fg:x="1267" fg:w="40"/><text x="96.2348%" y="463.50">cor..</text></g><g><title>all (1,320 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="1320"/><text x="0.2500%" y="879.50"></text></g><g><title>day06 (1,320 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="1320"/><text x="0.2500%" y="863.50">day06</text></g><g><title>_start (1,311 samples, 99.32%)</title><rect x="0.6818%" y="837" width="99.3182%" height="15" fill="rgb(250,87,22)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="847.50">_start</text></g><g><title>__libc_start_main (1,311 samples, 99.32%)</title><rect x="0.6818%" y="821" width="99.3182%" height="15" fill="rgb(239,43,17)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,311 samples, 99.32%)</title><rect x="0.6818%" y="805" width="99.3182%" height="15" fill="rgb(231,177,25)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="815.50">[libc.so.6]</text></g><g><title>main (1,311 samples, 99.32%)</title><rect x="0.6818%" y="789" width="99.3182%" height="15" fill="rgb(219,179,1)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (1,311 samples, 99.32%)</title><rect x="0.6818%" y="773" width="99.3182%" height="15" fill="rgb(238,219,53)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,311 samples, 99.32%)</title><rect x="0.6818%" y="757" width="99.3182%" height="15" fill="rgb(232,167,36)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,311 samples, 99.32%)</title><rect x="0.6818%" y="741" width="99.3182%" height="15" fill="rgb(244,19,51)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,311 samples, 99.32%)</title><rect x="0.6818%" y="725" width="99.3182%" height="15" fill="rgb(224,6,22)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="735.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,311 samples, 99.32%)</title><rect x="0.6818%" y="709" width="99.3182%" height="15" fill="rgb(224,145,5)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="719.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,311 samples, 99.32%)</title><rect x="0.6818%" y="693" width="99.3182%" height="15" fill="rgb(234,130,49)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,311 samples, 99.32%)</title><rect x="0.6818%" y="677" width="99.3182%" height="15" fill="rgb(254,6,2)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,311 samples, 99.32%)</title><rect x="0.6818%" y="661" width="99.3182%" height="15" fill="rgb(208,96,46)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,311 samples, 99.32%)</title><rect x="0.6818%" y="645" width="99.3182%" height="15" fill="rgb(239,3,39)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h1f0d62e061de07f4E.llvm.3107357775653960430 (1,311 samples, 99.32%)</title><rect x="0.6818%" y="629" width="99.3182%" height="15" fill="rgb(233,210,1)" fg:x="9" fg:w="1311"/><text x="0.9318%" y="639.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h1f0d62e061de07f4E.llvm.3107357775653960430</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,310 samples, 99.24%)</title><rect x="0.7576%" y="613" width="99.2424%" height="15" fill="rgb(244,137,37)" fg:x="10" fg:w="1310"/><text x="1.0076%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,310 samples, 99.24%)</title><rect x="0.7576%" y="597" width="99.2424%" height="15" fill="rgb(240,136,2)" fg:x="10" fg:w="1310"/><text x="1.0076%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>day06::main (1,310 samples, 99.24%)</title><rect x="0.7576%" y="581" width="99.2424%" height="15" fill="rgb(239,18,37)" fg:x="10" fg:w="1310"/><text x="1.0076%" y="591.50">day06::main</text></g><g><title>day06::Puzzle::solve_guard (1,307 samples, 99.02%)</title><rect x="0.9848%" y="565" width="99.0152%" height="15" fill="rgb(218,185,22)" fg:x="13" fg:w="1307"/><text x="1.2348%" y="575.50">day06::Puzzle::solve_guard</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (957 samples, 72.50%)</title><rect x="27.5000%" y="549" width="72.5000%" height="15" fill="rgb(225,218,4)" fg:x="363" fg:w="957"/><text x="27.7500%" y="559.50">std::collections::hash::set::HashSet&lt;T,S&gt;::insert</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (957 samples, 72.50%)</title><rect x="27.5000%" y="533" width="72.5000%" height="15" fill="rgb(230,182,32)" fg:x="363" fg:w="957"/><text x="27.7500%" y="543.50">hashbrown::set::HashSet&lt;T,S,A&gt;::insert</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (956 samples, 72.42%)</title><rect x="27.5758%" y="517" width="72.4242%" height="15" fill="rgb(242,56,43)" fg:x="364" fg:w="956"/><text x="27.8258%" y="527.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (53 samples, 4.02%)</title><rect x="95.9848%" y="501" width="4.0152%" height="15" fill="rgb(233,99,24)" fg:x="1267" fg:w="53"/><text x="96.2348%" y="511.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (13 samples, 0.98%)</title><rect x="99.0152%" y="485" width="0.9848%" height="15" fill="rgb(234,209,42)" fg:x="1307" fg:w="13"/><text x="99.2652%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (4 samples, 0.30%)</title><rect x="99.6970%" y="469" width="0.3030%" height="15" fill="rgb(227,7,12)" fg:x="1316" fg:w="4"/><text x="99.9470%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (4 samples, 0.30%)</title><rect x="99.6970%" y="453" width="0.3030%" height="15" fill="rgb(245,203,43)" fg:x="1316" fg:w="4"/><text x="99.9470%" y="463.50"></text></g></svg></svg>