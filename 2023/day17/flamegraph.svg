<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="134"><g><title>[[stack]] (1 samples, 0.75%)</title><rect x="0.0000%" y="645" width="0.7463%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>realloc (1 samples, 0.75%)</title><rect x="0.0000%" y="629" width="0.7463%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="0.0000%" y="613" width="0.7463%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="0.0000%" y="597" width="0.7463%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="0.0000%" y="581" width="0.7463%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 2.99%)</title><rect x="0.7463%" y="613" width="2.9851%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="4"/><text x="0.9963%" y="623.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 2.99%)</title><rect x="0.7463%" y="597" width="2.9851%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.9963%" y="607.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 1.49%)</title><rect x="2.2388%" y="581" width="1.4925%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="2"/><text x="2.4888%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.75%)</title><rect x="2.9851%" y="565" width="0.7463%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="3.2351%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 5.97%)</title><rect x="0.7463%" y="629" width="5.9701%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="8"/><text x="0.9963%" y="639.50">[ld-linu..</text></g><g><title>[unknown] (4 samples, 2.99%)</title><rect x="3.7313%" y="613" width="2.9851%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="4"/><text x="3.9813%" y="623.50">[un..</text></g><g><title>[unknown] (3 samples, 2.24%)</title><rect x="4.4776%" y="597" width="2.2388%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="3"/><text x="4.7276%" y="607.50">[..</text></g><g><title>[unknown] (3 samples, 2.24%)</title><rect x="4.4776%" y="581" width="2.2388%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="3"/><text x="4.7276%" y="591.50">[..</text></g><g><title>[unknown] (3 samples, 2.24%)</title><rect x="4.4776%" y="565" width="2.2388%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="3"/><text x="4.7276%" y="575.50">[..</text></g><g><title>[unknown] (2 samples, 1.49%)</title><rect x="5.2239%" y="549" width="1.4925%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="5.4739%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="5.9701%" y="533" width="0.7463%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="6.2201%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="5.9701%" y="517" width="0.7463%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="6.2201%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="5.9701%" y="501" width="0.7463%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="6.2201%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 7.46%)</title><rect x="0.7463%" y="645" width="7.4627%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="10"/><text x="0.9963%" y="655.50">[ld-linux-..</text></g><g><title>[unknown] (2 samples, 1.49%)</title><rect x="6.7164%" y="629" width="1.4925%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="2"/><text x="6.9664%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="7.4627%" y="613" width="0.7463%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="1"/><text x="7.7127%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="7.4627%" y="597" width="0.7463%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="7.7127%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;petgraph::graphmap::GraphMap&lt;util::grid::Position,(u32,util::grid::Direction),petgraph::Directed&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="373" width="0.7463%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="8.4590%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;util::grid::Position,alloc::vec::Vec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="357" width="0.7463%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="1"/><text x="8.4590%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;util::grid::Position,alloc::vec::Vec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="341" width="0.7463%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="8.4590%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;util::grid::Position,alloc::vec::Vec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt;&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="325" width="0.7463%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="8.4590%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="8.2090%" y="309" width="0.7463%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="8.4590%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[indexmap::Bucket&lt;util::grid::Position,alloc::vec::Vec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt;]&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="293" width="0.7463%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="1"/><text x="8.4590%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::Bucket&lt;util::grid::Position,alloc::vec::Vec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="277" width="0.7463%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="8.4590%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="261" width="0.7463%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="8.4590%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(util::grid::Position,petgraph::graphmap::CompactDirection)&gt;&gt; (1 samples, 0.75%)</title><rect x="8.2090%" y="245" width="0.7463%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="8.4590%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="8.2090%" y="229" width="0.7463%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="8.4590%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.75%)</title><rect x="8.2090%" y="213" width="0.7463%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="8.4590%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.75%)</title><rect x="8.2090%" y="197" width="0.7463%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="8.4590%" y="207.50"></text></g><g><title>cfree (1 samples, 0.75%)</title><rect x="8.2090%" y="181" width="0.7463%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="8.4590%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="8.2090%" y="165" width="0.7463%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="8.4590%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="8.9552%" y="357" width="0.7463%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="1"/><text x="9.2052%" y="367.50"></text></g><g><title>core::ptr::read (1 samples, 0.75%)</title><rect x="8.9552%" y="341" width="0.7463%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="1"/><text x="9.2052%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="9.7015%" y="197" width="0.7463%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="1"/><text x="9.9515%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.75%)</title><rect x="9.7015%" y="181" width="0.7463%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="1"/><text x="9.9515%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.75%)</title><rect x="9.7015%" y="165" width="0.7463%" height="15" fill="rgb(231,60,39)" fg:x="13" fg:w="1"/><text x="9.9515%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.75%)</title><rect x="9.7015%" y="149" width="0.7463%" height="15" fill="rgb(208,69,12)" fg:x="13" fg:w="1"/><text x="9.9515%" y="159.50"></text></g><g><title>&lt;petgraph::graphmap::NeighborsDirected&lt;N,Ty&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.49%)</title><rect x="9.7015%" y="293" width="1.4925%" height="15" fill="rgb(235,93,37)" fg:x="13" fg:w="2"/><text x="9.9515%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.49%)</title><rect x="9.7015%" y="277" width="1.4925%" height="15" fill="rgb(213,116,39)" fg:x="13" fg:w="2"/><text x="9.9515%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2 samples, 1.49%)</title><rect x="9.7015%" y="261" width="1.4925%" height="15" fill="rgb(222,207,29)" fg:x="13" fg:w="2"/><text x="9.9515%" y="271.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.49%)</title><rect x="9.7015%" y="245" width="1.4925%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="2"/><text x="9.9515%" y="255.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (2 samples, 1.49%)</title><rect x="9.7015%" y="229" width="1.4925%" height="15" fill="rgb(218,138,4)" fg:x="13" fg:w="2"/><text x="9.9515%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 1.49%)</title><rect x="9.7015%" y="213" width="1.4925%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="2"/><text x="9.9515%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1 samples, 0.75%)</title><rect x="10.4478%" y="197" width="0.7463%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="1"/><text x="10.6978%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.75%)</title><rect x="10.4478%" y="181" width="0.7463%" height="15" fill="rgb(206,27,48)" fg:x="14" fg:w="1"/><text x="10.6978%" y="191.50"></text></g><g><title>&lt;petgraph::graphmap::NeighborsDirected&lt;N,Ty&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.75%)</title><rect x="10.4478%" y="165" width="0.7463%" height="15" fill="rgb(225,35,8)" fg:x="14" fg:w="1"/><text x="10.6978%" y="175.50"></text></g><g><title>&lt;petgraph::graphmap::CompactDirection as core::cmp::PartialEq&lt;petgraph::Direction&gt;&gt;::eq (1 samples, 0.75%)</title><rect x="10.4478%" y="149" width="0.7463%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="10.6978%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="11.9403%" y="165" width="0.7463%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="1"/><text x="12.1903%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.75%)</title><rect x="11.9403%" y="149" width="0.7463%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="1"/><text x="12.1903%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 2.24%)</title><rect x="11.9403%" y="213" width="2.2388%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="3"/><text x="12.1903%" y="223.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 2.24%)</title><rect x="11.9403%" y="197" width="2.2388%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="3"/><text x="12.1903%" y="207.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 2.24%)</title><rect x="11.9403%" y="181" width="2.2388%" height="15" fill="rgb(217,147,25)" fg:x="16" fg:w="3"/><text x="12.1903%" y="191.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 1.49%)</title><rect x="12.6866%" y="165" width="1.4925%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="2"/><text x="12.9366%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 1.49%)</title><rect x="12.6866%" y="149" width="1.4925%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="2"/><text x="12.9366%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 1.49%)</title><rect x="17.1642%" y="85" width="1.4925%" height="15" fill="rgb(227,1,9)" fg:x="23" fg:w="2"/><text x="17.4142%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 5.22%)</title><rect x="14.1791%" y="149" width="5.2239%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="7"/><text x="14.4291%" y="159.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 5.22%)</title><rect x="14.1791%" y="133" width="5.2239%" height="15" fill="rgb(221,10,30)" fg:x="19" fg:w="7"/><text x="14.4291%" y="143.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 5.22%)</title><rect x="14.1791%" y="117" width="5.2239%" height="15" fill="rgb(210,229,1)" fg:x="19" fg:w="7"/><text x="14.4291%" y="127.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 2.99%)</title><rect x="16.4179%" y="101" width="2.9851%" height="15" fill="rgb(222,148,37)" fg:x="22" fg:w="4"/><text x="16.6679%" y="111.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.75%)</title><rect x="18.6567%" y="85" width="0.7463%" height="15" fill="rgb(234,67,33)" fg:x="25" fg:w="1"/><text x="18.9067%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (13 samples, 9.70%)</title><rect x="11.1940%" y="229" width="9.7015%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="13"/><text x="11.4440%" y="239.50">indexmap::map:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (9 samples, 6.72%)</title><rect x="14.1791%" y="213" width="6.7164%" height="15" fill="rgb(247,138,52)" fg:x="19" fg:w="9"/><text x="14.4291%" y="223.50">core::has..</text></g><g><title>&lt;util::grid::Position as core::hash::Hash&gt;::hash (9 samples, 6.72%)</title><rect x="14.1791%" y="197" width="6.7164%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="9"/><text x="14.4291%" y="207.50">&lt;util::gr..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (9 samples, 6.72%)</title><rect x="14.1791%" y="181" width="6.7164%" height="15" fill="rgb(246,177,23)" fg:x="19" fg:w="9"/><text x="14.4291%" y="191.50">core::has..</text></g><g><title>core::hash::Hasher::write_usize (9 samples, 6.72%)</title><rect x="14.1791%" y="165" width="6.7164%" height="15" fill="rgb(230,62,27)" fg:x="19" fg:w="9"/><text x="14.4291%" y="175.50">core::has..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 1.49%)</title><rect x="19.4030%" y="149" width="1.4925%" height="15" fill="rgb(216,154,8)" fg:x="26" fg:w="2"/><text x="19.6530%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 3.73%)</title><rect x="21.6418%" y="165" width="3.7313%" height="15" fill="rgb(244,35,45)" fg:x="29" fg:w="5"/><text x="21.8918%" y="175.50">hash..</text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (5 samples, 3.73%)</title><rect x="21.6418%" y="149" width="3.7313%" height="15" fill="rgb(251,115,12)" fg:x="29" fg:w="5"/><text x="21.8918%" y="159.50">inde..</text></g><g><title>&lt;Q as equivalent::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.75%)</title><rect x="24.6269%" y="133" width="0.7463%" height="15" fill="rgb(240,54,50)" fg:x="33" fg:w="1"/><text x="24.8769%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.75%)</title><rect x="24.6269%" y="117" width="0.7463%" height="15" fill="rgb(233,84,52)" fg:x="33" fg:w="1"/><text x="24.8769%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 18.66%)</title><rect x="9.7015%" y="357" width="18.6567%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="25"/><text x="9.9515%" y="367.50">&lt;core::iter::adapters::filter..</text></g><g><title>core::iter::traits::iterator::Iterator::find (25 samples, 18.66%)</title><rect x="9.7015%" y="341" width="18.6567%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="25"/><text x="9.9515%" y="351.50">core::iter::traits::iterator:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (25 samples, 18.66%)</title><rect x="9.7015%" y="325" width="18.6567%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="25"/><text x="9.9515%" y="335.50">core::iter::traits::iterator:..</text></g><g><title>&lt;petgraph::graphmap::EdgesDirected&lt;N,E,Ty&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 18.66%)</title><rect x="9.7015%" y="309" width="18.6567%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="25"/><text x="9.9515%" y="319.50">&lt;petgraph::graphmap::EdgesDir..</text></g><g><title>core::option::Option&lt;T&gt;::map (23 samples, 17.16%)</title><rect x="11.1940%" y="293" width="17.1642%" height="15" fill="rgb(242,79,21)" fg:x="15" fg:w="23"/><text x="11.4440%" y="303.50">core::option::Option&lt;T&gt;::map</text></g><g><title>&lt;petgraph::graphmap::EdgesDirected&lt;N,E,Ty&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (23 samples, 17.16%)</title><rect x="11.1940%" y="277" width="17.1642%" height="15" fill="rgb(211,96,35)" fg:x="15" fg:w="23"/><text x="11.4440%" y="287.50">&lt;petgraph::graphmap::EdgesD..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (23 samples, 17.16%)</title><rect x="11.1940%" y="261" width="17.1642%" height="15" fill="rgb(253,215,40)" fg:x="15" fg:w="23"/><text x="11.4440%" y="271.50">indexmap::map::IndexMap&lt;K,V..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (23 samples, 17.16%)</title><rect x="11.1940%" y="245" width="17.1642%" height="15" fill="rgb(211,81,21)" fg:x="15" fg:w="23"/><text x="11.4440%" y="255.50">indexmap::map::IndexMap&lt;K,V..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (10 samples, 7.46%)</title><rect x="20.8955%" y="229" width="7.4627%" height="15" fill="rgb(208,190,38)" fg:x="28" fg:w="10"/><text x="21.1455%" y="239.50">indexmap::..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (10 samples, 7.46%)</title><rect x="20.8955%" y="213" width="7.4627%" height="15" fill="rgb(235,213,38)" fg:x="28" fg:w="10"/><text x="21.1455%" y="223.50">hashbrown:..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (10 samples, 7.46%)</title><rect x="20.8955%" y="197" width="7.4627%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="10"/><text x="21.1455%" y="207.50">hashbrown:..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (10 samples, 7.46%)</title><rect x="20.8955%" y="181" width="7.4627%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="10"/><text x="21.1455%" y="191.50">hashbrown:..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (4 samples, 2.99%)</title><rect x="25.3731%" y="165" width="2.9851%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="4"/><text x="25.6231%" y="175.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 2.99%)</title><rect x="25.3731%" y="149" width="2.9851%" height="15" fill="rgb(210,16,53)" fg:x="34" fg:w="4"/><text x="25.6231%" y="159.50">cor..</text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.75%)</title><rect x="28.3582%" y="357" width="0.7463%" height="15" fill="rgb(235,124,12)" fg:x="38" fg:w="1"/><text x="28.6082%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.75%)</title><rect x="28.3582%" y="341" width="0.7463%" height="15" fill="rgb(224,169,11)" fg:x="38" fg:w="1"/><text x="28.6082%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.75%)</title><rect x="28.3582%" y="325" width="0.7463%" height="15" fill="rgb(250,166,2)" fg:x="38" fg:w="1"/><text x="28.6082%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.75%)</title><rect x="28.3582%" y="309" width="0.7463%" height="15" fill="rgb(242,216,29)" fg:x="38" fg:w="1"/><text x="28.6082%" y="319.50"></text></g><g><title>malloc (1 samples, 0.75%)</title><rect x="28.3582%" y="293" width="0.7463%" height="15" fill="rgb(230,116,27)" fg:x="38" fg:w="1"/><text x="28.6082%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (1 samples, 0.75%)</title><rect x="29.1045%" y="293" width="0.7463%" height="15" fill="rgb(228,99,48)" fg:x="39" fg:w="1"/><text x="29.3545%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (1 samples, 0.75%)</title><rect x="29.8507%" y="293" width="0.7463%" height="15" fill="rgb(253,11,6)" fg:x="40" fg:w="1"/><text x="30.1007%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.75%)</title><rect x="29.8507%" y="277" width="0.7463%" height="15" fill="rgb(247,143,39)" fg:x="40" fg:w="1"/><text x="30.1007%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (2 samples, 1.49%)</title><rect x="30.5970%" y="293" width="1.4925%" height="15" fill="rgb(236,97,10)" fg:x="41" fg:w="2"/><text x="30.8470%" y="303.50"></text></g><g><title>core::ptr::read (2 samples, 1.49%)</title><rect x="30.5970%" y="277" width="1.4925%" height="15" fill="rgb(233,208,19)" fg:x="41" fg:w="2"/><text x="30.8470%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (5 samples, 3.73%)</title><rect x="29.1045%" y="357" width="3.7313%" height="15" fill="rgb(216,164,2)" fg:x="39" fg:w="5"/><text x="29.3545%" y="367.50">allo..</text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 3.73%)</title><rect x="29.1045%" y="341" width="3.7313%" height="15" fill="rgb(220,129,5)" fg:x="39" fg:w="5"/><text x="29.3545%" y="351.50">core..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (5 samples, 3.73%)</title><rect x="29.1045%" y="325" width="3.7313%" height="15" fill="rgb(242,17,10)" fg:x="39" fg:w="5"/><text x="29.3545%" y="335.50">allo..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (5 samples, 3.73%)</title><rect x="29.1045%" y="309" width="3.7313%" height="15" fill="rgb(242,107,0)" fg:x="39" fg:w="5"/><text x="29.3545%" y="319.50">allo..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (1 samples, 0.75%)</title><rect x="32.0896%" y="293" width="0.7463%" height="15" fill="rgb(251,28,31)" fg:x="43" fg:w="1"/><text x="32.3396%" y="303.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (1 samples, 0.75%)</title><rect x="32.0896%" y="277" width="0.7463%" height="15" fill="rgb(233,223,10)" fg:x="43" fg:w="1"/><text x="32.3396%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.75%)</title><rect x="32.0896%" y="261" width="0.7463%" height="15" fill="rgb(215,21,27)" fg:x="43" fg:w="1"/><text x="32.3396%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.49%)</title><rect x="34.3284%" y="309" width="1.4925%" height="15" fill="rgb(232,23,21)" fg:x="46" fg:w="2"/><text x="34.5784%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 4.48%)</title><rect x="32.8358%" y="357" width="4.4776%" height="15" fill="rgb(244,5,23)" fg:x="44" fg:w="6"/><text x="33.0858%" y="367.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 2.99%)</title><rect x="34.3284%" y="341" width="2.9851%" height="15" fill="rgb(226,81,46)" fg:x="46" fg:w="4"/><text x="34.5784%" y="351.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 2.99%)</title><rect x="34.3284%" y="325" width="2.9851%" height="15" fill="rgb(247,70,30)" fg:x="46" fg:w="4"/><text x="34.5784%" y="335.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.49%)</title><rect x="35.8209%" y="309" width="1.4925%" height="15" fill="rgb(212,68,19)" fg:x="48" fg:w="2"/><text x="36.0709%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.49%)</title><rect x="35.8209%" y="293" width="1.4925%" height="15" fill="rgb(240,187,13)" fg:x="48" fg:w="2"/><text x="36.0709%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.49%)</title><rect x="35.8209%" y="277" width="1.4925%" height="15" fill="rgb(223,113,26)" fg:x="48" fg:w="2"/><text x="36.0709%" y="287.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.49%)</title><rect x="35.8209%" y="261" width="1.4925%" height="15" fill="rgb(206,192,2)" fg:x="48" fg:w="2"/><text x="36.0709%" y="271.50"></text></g><g><title>realloc (2 samples, 1.49%)</title><rect x="35.8209%" y="245" width="1.4925%" height="15" fill="rgb(241,108,4)" fg:x="48" fg:w="2"/><text x="36.0709%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 1.49%)</title><rect x="35.8209%" y="229" width="1.4925%" height="15" fill="rgb(247,173,49)" fg:x="48" fg:w="2"/><text x="36.0709%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 1.49%)</title><rect x="35.8209%" y="213" width="1.4925%" height="15" fill="rgb(224,114,35)" fg:x="48" fg:w="2"/><text x="36.0709%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;day17::NodeVariant&gt;&gt; (1 samples, 0.75%)</title><rect x="37.3134%" y="357" width="0.7463%" height="15" fill="rgb(245,159,27)" fg:x="50" fg:w="1"/><text x="37.5634%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="37.3134%" y="341" width="0.7463%" height="15" fill="rgb(245,172,44)" fg:x="50" fg:w="1"/><text x="37.5634%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;day17::NodeVariant,alloc::alloc::Global&gt;&gt; (1 samples, 0.75%)</title><rect x="37.3134%" y="325" width="0.7463%" height="15" fill="rgb(236,23,11)" fg:x="50" fg:w="1"/><text x="37.5634%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="37.3134%" y="309" width="0.7463%" height="15" fill="rgb(205,117,38)" fg:x="50" fg:w="1"/><text x="37.5634%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;day17::NodeVariant&gt;&gt; (1 samples, 0.75%)</title><rect x="37.3134%" y="293" width="0.7463%" height="15" fill="rgb(237,72,25)" fg:x="50" fg:w="1"/><text x="37.5634%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="37.3134%" y="277" width="0.7463%" height="15" fill="rgb(244,70,9)" fg:x="50" fg:w="1"/><text x="37.5634%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.75%)</title><rect x="37.3134%" y="261" width="0.7463%" height="15" fill="rgb(217,125,39)" fg:x="50" fg:w="1"/><text x="37.5634%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.75%)</title><rect x="37.3134%" y="245" width="0.7463%" height="15" fill="rgb(235,36,10)" fg:x="50" fg:w="1"/><text x="37.5634%" y="255.50"></text></g><g><title>cfree (1 samples, 0.75%)</title><rect x="37.3134%" y="229" width="0.7463%" height="15" fill="rgb(251,123,47)" fg:x="50" fg:w="1"/><text x="37.5634%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="37.3134%" y="213" width="0.7463%" height="15" fill="rgb(221,13,13)" fg:x="50" fg:w="1"/><text x="37.5634%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;util::grid::Position,std::collections::hash::map::HashMap&lt;day17::NodeVariant,day17::VariantData&gt;&gt;&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="357" width="0.7463%" height="15" fill="rgb(238,131,9)" fg:x="51" fg:w="1"/><text x="38.3097%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;util::grid::Position,std::collections::hash::map::HashMap&lt;day17::NodeVariant,day17::VariantData&gt;,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="341" width="0.7463%" height="15" fill="rgb(211,50,8)" fg:x="51" fg:w="1"/><text x="38.3097%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(util::grid::Position,std::collections::hash::map::HashMap&lt;day17::NodeVariant,day17::VariantData&gt;)&gt;&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="325" width="0.7463%" height="15" fill="rgb(245,182,24)" fg:x="51" fg:w="1"/><text x="38.3097%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="38.0597%" y="309" width="0.7463%" height="15" fill="rgb(242,14,37)" fg:x="51" fg:w="1"/><text x="38.3097%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.75%)</title><rect x="38.0597%" y="293" width="0.7463%" height="15" fill="rgb(246,228,12)" fg:x="51" fg:w="1"/><text x="38.3097%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.75%)</title><rect x="38.0597%" y="277" width="0.7463%" height="15" fill="rgb(213,55,15)" fg:x="51" fg:w="1"/><text x="38.3097%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.75%)</title><rect x="38.0597%" y="261" width="0.7463%" height="15" fill="rgb(209,9,3)" fg:x="51" fg:w="1"/><text x="38.3097%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(util::grid::Position,std::collections::hash::map::HashMap&lt;day17::NodeVariant,day17::VariantData&gt;)&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="245" width="0.7463%" height="15" fill="rgb(230,59,30)" fg:x="51" fg:w="1"/><text x="38.3097%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;day17::NodeVariant,day17::VariantData&gt;&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="229" width="0.7463%" height="15" fill="rgb(209,121,21)" fg:x="51" fg:w="1"/><text x="38.3097%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;day17::NodeVariant,day17::VariantData,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="213" width="0.7463%" height="15" fill="rgb(220,109,13)" fg:x="51" fg:w="1"/><text x="38.3097%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(day17::NodeVariant,day17::VariantData)&gt;&gt; (1 samples, 0.75%)</title><rect x="38.0597%" y="197" width="0.7463%" height="15" fill="rgb(232,18,1)" fg:x="51" fg:w="1"/><text x="38.3097%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.75%)</title><rect x="38.0597%" y="181" width="0.7463%" height="15" fill="rgb(215,41,42)" fg:x="51" fg:w="1"/><text x="38.3097%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (1 samples, 0.75%)</title><rect x="38.0597%" y="165" width="0.7463%" height="15" fill="rgb(224,123,36)" fg:x="51" fg:w="1"/><text x="38.3097%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (1 samples, 0.75%)</title><rect x="38.0597%" y="149" width="0.7463%" height="15" fill="rgb(240,125,3)" fg:x="51" fg:w="1"/><text x="38.3097%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.75%)</title><rect x="38.0597%" y="133" width="0.7463%" height="15" fill="rgb(205,98,50)" fg:x="51" fg:w="1"/><text x="38.3097%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.75%)</title><rect x="38.0597%" y="117" width="0.7463%" height="15" fill="rgb(205,185,37)" fg:x="51" fg:w="1"/><text x="38.3097%" y="127.50"></text></g><g><title>cfree (1 samples, 0.75%)</title><rect x="38.0597%" y="101" width="0.7463%" height="15" fill="rgb(238,207,15)" fg:x="51" fg:w="1"/><text x="38.3097%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="38.0597%" y="85" width="0.7463%" height="15" fill="rgb(213,199,42)" fg:x="51" fg:w="1"/><text x="38.3097%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="38.0597%" y="69" width="0.7463%" height="15" fill="rgb(235,201,11)" fg:x="51" fg:w="1"/><text x="38.3097%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.75%)</title><rect x="39.5522%" y="229" width="0.7463%" height="15" fill="rgb(207,46,11)" fg:x="53" fg:w="1"/><text x="39.8022%" y="239.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.75%)</title><rect x="39.5522%" y="213" width="0.7463%" height="15" fill="rgb(241,35,35)" fg:x="53" fg:w="1"/><text x="39.8022%" y="223.50"></text></g><g><title>petgraph::graphmap::GraphMap&lt;N,E,Ty&gt;::edges_directed (4 samples, 2.99%)</title><rect x="38.8060%" y="357" width="2.9851%" height="15" fill="rgb(243,32,47)" fg:x="52" fg:w="4"/><text x="39.0560%" y="367.50">pet..</text></g><g><title>petgraph::graphmap::GraphMap&lt;N,E,Ty&gt;::neighbors_directed (4 samples, 2.99%)</title><rect x="38.8060%" y="341" width="2.9851%" height="15" fill="rgb(247,202,23)" fg:x="52" fg:w="4"/><text x="39.0560%" y="351.50">pet..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (4 samples, 2.99%)</title><rect x="38.8060%" y="325" width="2.9851%" height="15" fill="rgb(219,102,11)" fg:x="52" fg:w="4"/><text x="39.0560%" y="335.50">ind..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (4 samples, 2.99%)</title><rect x="38.8060%" y="309" width="2.9851%" height="15" fill="rgb(243,110,44)" fg:x="52" fg:w="4"/><text x="39.0560%" y="319.50">ind..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (4 samples, 2.99%)</title><rect x="38.8060%" y="293" width="2.9851%" height="15" fill="rgb(222,74,54)" fg:x="52" fg:w="4"/><text x="39.0560%" y="303.50">ind..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (4 samples, 2.99%)</title><rect x="38.8060%" y="277" width="2.9851%" height="15" fill="rgb(216,99,12)" fg:x="52" fg:w="4"/><text x="39.0560%" y="287.50">has..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (4 samples, 2.99%)</title><rect x="38.8060%" y="261" width="2.9851%" height="15" fill="rgb(226,22,26)" fg:x="52" fg:w="4"/><text x="39.0560%" y="271.50">has..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (4 samples, 2.99%)</title><rect x="38.8060%" y="245" width="2.9851%" height="15" fill="rgb(217,163,10)" fg:x="52" fg:w="4"/><text x="39.0560%" y="255.50">has..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 1.49%)</title><rect x="40.2985%" y="229" width="1.4925%" height="15" fill="rgb(213,25,53)" fg:x="54" fg:w="2"/><text x="40.5485%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 1.49%)</title><rect x="40.2985%" y="213" width="1.4925%" height="15" fill="rgb(252,105,26)" fg:x="54" fg:w="2"/><text x="40.5485%" y="223.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.75%)</title><rect x="41.7910%" y="325" width="0.7463%" height="15" fill="rgb(220,39,43)" fg:x="56" fg:w="1"/><text x="42.0410%" y="335.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.75%)</title><rect x="41.7910%" y="309" width="0.7463%" height="15" fill="rgb(229,68,48)" fg:x="56" fg:w="1"/><text x="42.0410%" y="319.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.75%)</title><rect x="41.7910%" y="293" width="0.7463%" height="15" fill="rgb(252,8,32)" fg:x="56" fg:w="1"/><text x="42.0410%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.75%)</title><rect x="41.7910%" y="277" width="0.7463%" height="15" fill="rgb(223,20,43)" fg:x="56" fg:w="1"/><text x="42.0410%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.75%)</title><rect x="41.7910%" y="261" width="0.7463%" height="15" fill="rgb(229,81,49)" fg:x="56" fg:w="1"/><text x="42.0410%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.75%)</title><rect x="41.7910%" y="245" width="0.7463%" height="15" fill="rgb(236,28,36)" fg:x="56" fg:w="1"/><text x="42.0410%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.75%)</title><rect x="41.7910%" y="229" width="0.7463%" height="15" fill="rgb(249,185,26)" fg:x="56" fg:w="1"/><text x="42.0410%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.75%)</title><rect x="41.7910%" y="213" width="0.7463%" height="15" fill="rgb(249,174,33)" fg:x="56" fg:w="1"/><text x="42.0410%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 1.49%)</title><rect x="42.5373%" y="293" width="1.4925%" height="15" fill="rgb(233,201,37)" fg:x="57" fg:w="2"/><text x="42.7873%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 1.49%)</title><rect x="42.5373%" y="277" width="1.4925%" height="15" fill="rgb(221,78,26)" fg:x="57" fg:w="2"/><text x="42.7873%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="42.5373%" y="261" width="1.4925%" height="15" fill="rgb(250,127,30)" fg:x="57" fg:w="2"/><text x="42.7873%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="42.5373%" y="245" width="1.4925%" height="15" fill="rgb(230,49,44)" fg:x="57" fg:w="2"/><text x="42.7873%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="42.5373%" y="229" width="1.4925%" height="15" fill="rgb(229,67,23)" fg:x="57" fg:w="2"/><text x="42.7873%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.75%)</title><rect x="43.2836%" y="213" width="0.7463%" height="15" fill="rgb(249,83,47)" fg:x="58" fg:w="1"/><text x="43.5336%" y="223.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (5 samples, 3.73%)</title><rect x="41.7910%" y="357" width="3.7313%" height="15" fill="rgb(215,43,3)" fg:x="56" fg:w="5"/><text x="42.0410%" y="367.50">std:..</text></g><g><title>day17::crooked_dijkstra::_{{closure}} (5 samples, 3.73%)</title><rect x="41.7910%" y="341" width="3.7313%" height="15" fill="rgb(238,154,13)" fg:x="56" fg:w="5"/><text x="42.0410%" y="351.50">day1..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 2.99%)</title><rect x="42.5373%" y="325" width="2.9851%" height="15" fill="rgb(219,56,2)" fg:x="57" fg:w="4"/><text x="42.7873%" y="335.50">std..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 2.99%)</title><rect x="42.5373%" y="309" width="2.9851%" height="15" fill="rgb(233,0,4)" fg:x="57" fg:w="4"/><text x="42.7873%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 1.49%)</title><rect x="44.0299%" y="293" width="1.4925%" height="15" fill="rgb(235,30,7)" fg:x="59" fg:w="2"/><text x="44.2799%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 1.49%)</title><rect x="44.0299%" y="277" width="1.4925%" height="15" fill="rgb(250,79,13)" fg:x="59" fg:w="2"/><text x="44.2799%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.75%)</title><rect x="44.7761%" y="261" width="0.7463%" height="15" fill="rgb(211,146,34)" fg:x="60" fg:w="1"/><text x="45.0261%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.75%)</title><rect x="44.7761%" y="245" width="0.7463%" height="15" fill="rgb(228,22,38)" fg:x="60" fg:w="1"/><text x="45.0261%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.75%)</title><rect x="45.5224%" y="357" width="0.7463%" height="15" fill="rgb(235,168,5)" fg:x="61" fg:w="1"/><text x="45.7724%" y="367.50"></text></g><g><title>day17::crooked_dijkstra::_{{closure}} (1 samples, 0.75%)</title><rect x="45.5224%" y="341" width="0.7463%" height="15" fill="rgb(221,155,16)" fg:x="61" fg:w="1"/><text x="45.7724%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.75%)</title><rect x="45.5224%" y="325" width="0.7463%" height="15" fill="rgb(215,215,53)" fg:x="61" fg:w="1"/><text x="45.7724%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.75%)</title><rect x="45.5224%" y="309" width="0.7463%" height="15" fill="rgb(223,4,10)" fg:x="61" fg:w="1"/><text x="45.7724%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.75%)</title><rect x="45.5224%" y="293" width="0.7463%" height="15" fill="rgb(234,103,6)" fg:x="61" fg:w="1"/><text x="45.7724%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (1 samples, 0.75%)</title><rect x="45.5224%" y="277" width="0.7463%" height="15" fill="rgb(227,97,0)" fg:x="61" fg:w="1"/><text x="45.7724%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.75%)</title><rect x="45.5224%" y="261" width="0.7463%" height="15" fill="rgb(234,150,53)" fg:x="61" fg:w="1"/><text x="45.7724%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.75%)</title><rect x="45.5224%" y="245" width="0.7463%" height="15" fill="rgb(228,201,54)" fg:x="61" fg:w="1"/><text x="45.7724%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.75%)</title><rect x="46.2687%" y="325" width="0.7463%" height="15" fill="rgb(222,22,37)" fg:x="62" fg:w="1"/><text x="46.5187%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.75%)</title><rect x="46.2687%" y="309" width="0.7463%" height="15" fill="rgb(237,53,32)" fg:x="62" fg:w="1"/><text x="46.5187%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.75%)</title><rect x="46.2687%" y="293" width="0.7463%" height="15" fill="rgb(233,25,53)" fg:x="62" fg:w="1"/><text x="46.5187%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.75%)</title><rect x="46.2687%" y="277" width="0.7463%" height="15" fill="rgb(210,40,34)" fg:x="62" fg:w="1"/><text x="46.5187%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.75%)</title><rect x="46.2687%" y="261" width="0.7463%" height="15" fill="rgb(241,220,44)" fg:x="62" fg:w="1"/><text x="46.5187%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.75%)</title><rect x="46.2687%" y="245" width="0.7463%" height="15" fill="rgb(235,28,35)" fg:x="62" fg:w="1"/><text x="46.5187%" y="255.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.75%)</title><rect x="46.2687%" y="229" width="0.7463%" height="15" fill="rgb(210,56,17)" fg:x="62" fg:w="1"/><text x="46.5187%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.75%)</title><rect x="46.2687%" y="213" width="0.7463%" height="15" fill="rgb(224,130,29)" fg:x="62" fg:w="1"/><text x="46.5187%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.75%)</title><rect x="46.2687%" y="197" width="0.7463%" height="15" fill="rgb(235,212,8)" fg:x="62" fg:w="1"/><text x="46.5187%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.75%)</title><rect x="46.2687%" y="181" width="0.7463%" height="15" fill="rgb(223,33,50)" fg:x="62" fg:w="1"/><text x="46.5187%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.75%)</title><rect x="46.2687%" y="165" width="0.7463%" height="15" fill="rgb(219,149,13)" fg:x="62" fg:w="1"/><text x="46.5187%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.75%)</title><rect x="46.2687%" y="149" width="0.7463%" height="15" fill="rgb(250,156,29)" fg:x="62" fg:w="1"/><text x="46.5187%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.75%)</title><rect x="46.2687%" y="133" width="0.7463%" height="15" fill="rgb(216,193,19)" fg:x="62" fg:w="1"/><text x="46.5187%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.75%)</title><rect x="46.2687%" y="117" width="0.7463%" height="15" fill="rgb(216,135,14)" fg:x="62" fg:w="1"/><text x="46.5187%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.75%)</title><rect x="47.7612%" y="293" width="0.7463%" height="15" fill="rgb(241,47,5)" fg:x="64" fg:w="1"/><text x="48.0112%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.75%)</title><rect x="47.7612%" y="277" width="0.7463%" height="15" fill="rgb(233,42,35)" fg:x="64" fg:w="1"/><text x="48.0112%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.75%)</title><rect x="47.7612%" y="261" width="0.7463%" height="15" fill="rgb(231,13,6)" fg:x="64" fg:w="1"/><text x="48.0112%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="47.7612%" y="245" width="0.7463%" height="15" fill="rgb(207,181,40)" fg:x="64" fg:w="1"/><text x="48.0112%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.75%)</title><rect x="47.7612%" y="229" width="0.7463%" height="15" fill="rgb(254,173,49)" fg:x="64" fg:w="1"/><text x="48.0112%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 3.73%)</title><rect x="47.0149%" y="325" width="3.7313%" height="15" fill="rgb(221,1,38)" fg:x="63" fg:w="5"/><text x="47.2649%" y="335.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 3.73%)</title><rect x="47.0149%" y="309" width="3.7313%" height="15" fill="rgb(206,124,46)" fg:x="63" fg:w="5"/><text x="47.2649%" y="319.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 2.24%)</title><rect x="48.5075%" y="293" width="2.2388%" height="15" fill="rgb(249,21,11)" fg:x="65" fg:w="3"/><text x="48.7575%" y="303.50">c..</text></g><g><title>&lt;util::grid::Position as core::hash::Hash&gt;::hash (3 samples, 2.24%)</title><rect x="48.5075%" y="277" width="2.2388%" height="15" fill="rgb(222,201,40)" fg:x="65" fg:w="3"/><text x="48.7575%" y="287.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (3 samples, 2.24%)</title><rect x="48.5075%" y="261" width="2.2388%" height="15" fill="rgb(235,61,29)" fg:x="65" fg:w="3"/><text x="48.7575%" y="271.50">c..</text></g><g><title>core::hash::Hasher::write_usize (3 samples, 2.24%)</title><rect x="48.5075%" y="245" width="2.2388%" height="15" fill="rgb(219,207,3)" fg:x="65" fg:w="3"/><text x="48.7575%" y="255.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 2.24%)</title><rect x="48.5075%" y="229" width="2.2388%" height="15" fill="rgb(222,56,46)" fg:x="65" fg:w="3"/><text x="48.7575%" y="239.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 2.24%)</title><rect x="48.5075%" y="213" width="2.2388%" height="15" fill="rgb(239,76,54)" fg:x="65" fg:w="3"/><text x="48.7575%" y="223.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 2.24%)</title><rect x="48.5075%" y="197" width="2.2388%" height="15" fill="rgb(231,124,27)" fg:x="65" fg:w="3"/><text x="48.7575%" y="207.50">&lt;..</text></g><g><title>core::hash::sip::u8to64_le (2 samples, 1.49%)</title><rect x="49.2537%" y="181" width="1.4925%" height="15" fill="rgb(249,195,6)" fg:x="66" fg:w="2"/><text x="49.5037%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 6.72%)</title><rect x="46.2687%" y="357" width="6.7164%" height="15" fill="rgb(237,174,47)" fg:x="62" fg:w="9"/><text x="46.5187%" y="367.50">std::coll..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 6.72%)</title><rect x="46.2687%" y="341" width="6.7164%" height="15" fill="rgb(206,201,31)" fg:x="62" fg:w="9"/><text x="46.5187%" y="351.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 2.24%)</title><rect x="50.7463%" y="325" width="2.2388%" height="15" fill="rgb(231,57,52)" fg:x="68" fg:w="3"/><text x="50.9963%" y="335.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 2.24%)</title><rect x="50.7463%" y="309" width="2.2388%" height="15" fill="rgb(248,177,22)" fg:x="68" fg:w="3"/><text x="50.9963%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.75%)</title><rect x="52.2388%" y="293" width="0.7463%" height="15" fill="rgb(215,211,37)" fg:x="70" fg:w="1"/><text x="52.4888%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.75%)</title><rect x="52.2388%" y="277" width="0.7463%" height="15" fill="rgb(241,128,51)" fg:x="70" fg:w="1"/><text x="52.4888%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.75%)</title><rect x="52.2388%" y="261" width="0.7463%" height="15" fill="rgb(227,165,31)" fg:x="70" fg:w="1"/><text x="52.4888%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.75%)</title><rect x="52.2388%" y="245" width="0.7463%" height="15" fill="rgb(228,167,24)" fg:x="70" fg:w="1"/><text x="52.4888%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.75%)</title><rect x="52.2388%" y="229" width="0.7463%" height="15" fill="rgb(228,143,12)" fg:x="70" fg:w="1"/><text x="52.4888%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.75%)</title><rect x="52.9851%" y="277" width="0.7463%" height="15" fill="rgb(249,149,8)" fg:x="71" fg:w="1"/><text x="53.2351%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 2.24%)</title><rect x="52.9851%" y="309" width="2.2388%" height="15" fill="rgb(243,35,44)" fg:x="71" fg:w="3"/><text x="53.2351%" y="319.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 2.24%)</title><rect x="52.9851%" y="293" width="2.2388%" height="15" fill="rgb(246,89,9)" fg:x="71" fg:w="3"/><text x="53.2351%" y="303.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 1.49%)</title><rect x="53.7313%" y="277" width="1.4925%" height="15" fill="rgb(233,213,13)" fg:x="72" fg:w="2"/><text x="53.9813%" y="287.50"></text></g><g><title>&lt;util::grid::Position as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="54.4776%" y="261" width="0.7463%" height="15" fill="rgb(233,141,41)" fg:x="73" fg:w="1"/><text x="54.7276%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.75%)</title><rect x="54.4776%" y="245" width="0.7463%" height="15" fill="rgb(239,167,4)" fg:x="73" fg:w="1"/><text x="54.7276%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.75%)</title><rect x="54.4776%" y="229" width="0.7463%" height="15" fill="rgb(209,217,16)" fg:x="73" fg:w="1"/><text x="54.7276%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="54.4776%" y="213" width="0.7463%" height="15" fill="rgb(219,88,35)" fg:x="73" fg:w="1"/><text x="54.7276%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="54.4776%" y="197" width="0.7463%" height="15" fill="rgb(220,193,23)" fg:x="73" fg:w="1"/><text x="54.7276%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="54.4776%" y="181" width="0.7463%" height="15" fill="rgb(230,90,52)" fg:x="73" fg:w="1"/><text x="54.7276%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="58.2090%" y="261" width="0.7463%" height="15" fill="rgb(252,106,19)" fg:x="78" fg:w="1"/><text x="58.4590%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.75%)</title><rect x="58.9552%" y="261" width="0.7463%" height="15" fill="rgb(206,74,20)" fg:x="79" fg:w="1"/><text x="59.2052%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.75%)</title><rect x="58.9552%" y="245" width="0.7463%" height="15" fill="rgb(230,138,44)" fg:x="79" fg:w="1"/><text x="59.2052%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.75%)</title><rect x="58.9552%" y="229" width="0.7463%" height="15" fill="rgb(235,182,43)" fg:x="79" fg:w="1"/><text x="59.2052%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.75%)</title><rect x="58.9552%" y="213" width="0.7463%" height="15" fill="rgb(242,16,51)" fg:x="79" fg:w="1"/><text x="59.2052%" y="223.50"></text></g><g><title>&lt;day17::NodeVariant as core::cmp::PartialEq&gt;::eq (1 samples, 0.75%)</title><rect x="58.9552%" y="197" width="0.7463%" height="15" fill="rgb(248,9,4)" fg:x="79" fg:w="1"/><text x="59.2052%" y="207.50"></text></g><g><title>&lt;util::grid::Orientation as core::cmp::PartialEq&gt;::eq (1 samples, 0.75%)</title><rect x="58.9552%" y="181" width="0.7463%" height="15" fill="rgb(210,31,22)" fg:x="79" fg:w="1"/><text x="59.2052%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (12 samples, 8.96%)</title><rect x="52.9851%" y="357" width="8.9552%" height="15" fill="rgb(239,54,39)" fg:x="71" fg:w="12"/><text x="53.2351%" y="367.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (12 samples, 8.96%)</title><rect x="52.9851%" y="341" width="8.9552%" height="15" fill="rgb(230,99,41)" fg:x="71" fg:w="12"/><text x="53.2351%" y="351.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 8.96%)</title><rect x="52.9851%" y="325" width="8.9552%" height="15" fill="rgb(253,106,12)" fg:x="71" fg:w="12"/><text x="53.2351%" y="335.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 6.72%)</title><rect x="55.2239%" y="309" width="6.7164%" height="15" fill="rgb(213,46,41)" fg:x="74" fg:w="9"/><text x="55.4739%" y="319.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 6.72%)</title><rect x="55.2239%" y="293" width="6.7164%" height="15" fill="rgb(215,133,35)" fg:x="74" fg:w="9"/><text x="55.4739%" y="303.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 6.72%)</title><rect x="55.2239%" y="277" width="6.7164%" height="15" fill="rgb(213,28,5)" fg:x="74" fg:w="9"/><text x="55.4739%" y="287.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 2.24%)</title><rect x="59.7015%" y="261" width="2.2388%" height="15" fill="rgb(215,77,49)" fg:x="80" fg:w="3"/><text x="59.9515%" y="271.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 2.24%)</title><rect x="59.7015%" y="245" width="2.2388%" height="15" fill="rgb(248,100,22)" fg:x="80" fg:w="3"/><text x="59.9515%" y="255.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="61.9403%" y="261" width="1.4925%" height="15" fill="rgb(208,67,9)" fg:x="83" fg:w="2"/><text x="62.1903%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="61.9403%" y="245" width="1.4925%" height="15" fill="rgb(219,133,21)" fg:x="83" fg:w="2"/><text x="62.1903%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="61.9403%" y="229" width="1.4925%" height="15" fill="rgb(246,46,29)" fg:x="83" fg:w="2"/><text x="62.1903%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.75%)</title><rect x="62.6866%" y="213" width="0.7463%" height="15" fill="rgb(246,185,52)" fg:x="84" fg:w="1"/><text x="62.9366%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.75%)</title><rect x="62.6866%" y="197" width="0.7463%" height="15" fill="rgb(252,136,11)" fg:x="84" fg:w="1"/><text x="62.9366%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="64.1791%" y="101" width="0.7463%" height="15" fill="rgb(219,138,53)" fg:x="86" fg:w="1"/><text x="64.4291%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.75%)</title><rect x="64.1791%" y="85" width="0.7463%" height="15" fill="rgb(211,51,23)" fg:x="86" fg:w="1"/><text x="64.4291%" y="95.50"></text></g><g><title>&lt;util::grid::Orientation as core::hash::Hash&gt;::hash (2 samples, 1.49%)</title><rect x="64.1791%" y="213" width="1.4925%" height="15" fill="rgb(247,221,28)" fg:x="86" fg:w="2"/><text x="64.4291%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 1.49%)</title><rect x="64.1791%" y="197" width="1.4925%" height="15" fill="rgb(251,222,45)" fg:x="86" fg:w="2"/><text x="64.4291%" y="207.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 1.49%)</title><rect x="64.1791%" y="181" width="1.4925%" height="15" fill="rgb(217,162,53)" fg:x="86" fg:w="2"/><text x="64.4291%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 1.49%)</title><rect x="64.1791%" y="165" width="1.4925%" height="15" fill="rgb(229,93,14)" fg:x="86" fg:w="2"/><text x="64.4291%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.49%)</title><rect x="64.1791%" y="149" width="1.4925%" height="15" fill="rgb(209,67,49)" fg:x="86" fg:w="2"/><text x="64.4291%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 1.49%)</title><rect x="64.1791%" y="133" width="1.4925%" height="15" fill="rgb(213,87,29)" fg:x="86" fg:w="2"/><text x="64.4291%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 1.49%)</title><rect x="64.1791%" y="117" width="1.4925%" height="15" fill="rgb(205,151,52)" fg:x="86" fg:w="2"/><text x="64.4291%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.75%)</title><rect x="64.9254%" y="101" width="0.7463%" height="15" fill="rgb(253,215,39)" fg:x="87" fg:w="1"/><text x="65.1754%" y="111.50"></text></g><g><title>&lt;day17::NodeVariant as core::hash::Hash&gt;::hash (3 samples, 2.24%)</title><rect x="64.1791%" y="229" width="2.2388%" height="15" fill="rgb(221,220,41)" fg:x="86" fg:w="3"/><text x="64.4291%" y="239.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.75%)</title><rect x="65.6716%" y="213" width="0.7463%" height="15" fill="rgb(218,133,21)" fg:x="88" fg:w="1"/><text x="65.9216%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.75%)</title><rect x="65.6716%" y="197" width="0.7463%" height="15" fill="rgb(221,193,43)" fg:x="88" fg:w="1"/><text x="65.9216%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="65.6716%" y="181" width="0.7463%" height="15" fill="rgb(240,128,52)" fg:x="88" fg:w="1"/><text x="65.9216%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="65.6716%" y="165" width="0.7463%" height="15" fill="rgb(253,114,12)" fg:x="88" fg:w="1"/><text x="65.9216%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="65.6716%" y="149" width="0.7463%" height="15" fill="rgb(215,223,47)" fg:x="88" fg:w="1"/><text x="65.9216%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="67.9104%" y="133" width="0.7463%" height="15" fill="rgb(248,225,23)" fg:x="91" fg:w="1"/><text x="68.1604%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 7.46%)</title><rect x="61.9403%" y="293" width="7.4627%" height="15" fill="rgb(250,108,0)" fg:x="83" fg:w="10"/><text x="62.1903%" y="303.50">hashbrown:..</text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 7.46%)</title><rect x="61.9403%" y="277" width="7.4627%" height="15" fill="rgb(228,208,7)" fg:x="83" fg:w="10"/><text x="62.1903%" y="287.50">core::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 5.97%)</title><rect x="63.4328%" y="261" width="5.9701%" height="15" fill="rgb(244,45,10)" fg:x="85" fg:w="8"/><text x="63.6828%" y="271.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (8 samples, 5.97%)</title><rect x="63.4328%" y="245" width="5.9701%" height="15" fill="rgb(207,125,25)" fg:x="85" fg:w="8"/><text x="63.6828%" y="255.50">core::ha..</text></g><g><title>&lt;util::grid::Position as core::hash::Hash&gt;::hash (4 samples, 2.99%)</title><rect x="66.4179%" y="229" width="2.9851%" height="15" fill="rgb(210,195,18)" fg:x="89" fg:w="4"/><text x="66.6679%" y="239.50">&lt;ut..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 2.99%)</title><rect x="66.4179%" y="213" width="2.9851%" height="15" fill="rgb(249,80,12)" fg:x="89" fg:w="4"/><text x="66.6679%" y="223.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (4 samples, 2.99%)</title><rect x="66.4179%" y="197" width="2.9851%" height="15" fill="rgb(221,65,9)" fg:x="89" fg:w="4"/><text x="66.6679%" y="207.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 2.99%)</title><rect x="66.4179%" y="181" width="2.9851%" height="15" fill="rgb(235,49,36)" fg:x="89" fg:w="4"/><text x="66.6679%" y="191.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 2.99%)</title><rect x="66.4179%" y="165" width="2.9851%" height="15" fill="rgb(225,32,20)" fg:x="89" fg:w="4"/><text x="66.6679%" y="175.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 2.99%)</title><rect x="66.4179%" y="149" width="2.9851%" height="15" fill="rgb(215,141,46)" fg:x="89" fg:w="4"/><text x="66.6679%" y="159.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.75%)</title><rect x="68.6567%" y="133" width="0.7463%" height="15" fill="rgb(250,160,47)" fg:x="92" fg:w="1"/><text x="68.9067%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="69.4030%" y="245" width="0.7463%" height="15" fill="rgb(216,222,40)" fg:x="93" fg:w="1"/><text x="69.6530%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 3.73%)</title><rect x="70.1493%" y="245" width="3.7313%" height="15" fill="rgb(234,217,39)" fg:x="94" fg:w="5"/><text x="70.3993%" y="255.50">hash..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (5 samples, 3.73%)</title><rect x="70.1493%" y="229" width="3.7313%" height="15" fill="rgb(207,178,40)" fg:x="94" fg:w="5"/><text x="70.3993%" y="239.50">hash..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 3.73%)</title><rect x="70.1493%" y="213" width="3.7313%" height="15" fill="rgb(221,136,13)" fg:x="94" fg:w="5"/><text x="70.3993%" y="223.50">&lt;Q a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 3.73%)</title><rect x="70.1493%" y="197" width="3.7313%" height="15" fill="rgb(249,199,10)" fg:x="94" fg:w="5"/><text x="70.3993%" y="207.50">core..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (5 samples, 3.73%)</title><rect x="70.1493%" y="181" width="3.7313%" height="15" fill="rgb(249,222,13)" fg:x="94" fg:w="5"/><text x="70.3993%" y="191.50">core..</text></g><g><title>&lt;util::grid::Position as core::cmp::PartialEq&gt;::eq (1 samples, 0.75%)</title><rect x="73.1343%" y="165" width="0.7463%" height="15" fill="rgb(244,185,38)" fg:x="98" fg:w="1"/><text x="73.3843%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 1.49%)</title><rect x="73.8806%" y="245" width="1.4925%" height="15" fill="rgb(236,202,9)" fg:x="99" fg:w="2"/><text x="74.1306%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (23 samples, 17.16%)</title><rect x="61.9403%" y="357" width="17.1642%" height="15" fill="rgb(250,229,37)" fg:x="83" fg:w="23"/><text x="62.1903%" y="367.50">std::collections::hash::set..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (23 samples, 17.16%)</title><rect x="61.9403%" y="341" width="17.1642%" height="15" fill="rgb(206,174,23)" fg:x="83" fg:w="23"/><text x="62.1903%" y="351.50">hashbrown::set::HashSet&lt;T,S..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (23 samples, 17.16%)</title><rect x="61.9403%" y="325" width="17.1642%" height="15" fill="rgb(211,33,43)" fg:x="83" fg:w="23"/><text x="62.1903%" y="335.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23 samples, 17.16%)</title><rect x="61.9403%" y="309" width="17.1642%" height="15" fill="rgb(245,58,50)" fg:x="83" fg:w="23"/><text x="62.1903%" y="319.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 9.70%)</title><rect x="69.4030%" y="293" width="9.7015%" height="15" fill="rgb(244,68,36)" fg:x="93" fg:w="13"/><text x="69.6530%" y="303.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 9.70%)</title><rect x="69.4030%" y="277" width="9.7015%" height="15" fill="rgb(232,229,15)" fg:x="93" fg:w="13"/><text x="69.6530%" y="287.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 9.70%)</title><rect x="69.4030%" y="261" width="9.7015%" height="15" fill="rgb(254,30,23)" fg:x="93" fg:w="13"/><text x="69.6530%" y="271.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 3.73%)</title><rect x="75.3731%" y="245" width="3.7313%" height="15" fill="rgb(235,160,14)" fg:x="101" fg:w="5"/><text x="75.6231%" y="255.50">hash..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 3.73%)</title><rect x="75.3731%" y="229" width="3.7313%" height="15" fill="rgb(212,155,44)" fg:x="101" fg:w="5"/><text x="75.6231%" y="239.50">core..</text></g><g><title>&lt;day17::NodeVariant as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="79.1045%" y="245" width="0.7463%" height="15" fill="rgb(226,2,50)" fg:x="106" fg:w="1"/><text x="79.3545%" y="255.50"></text></g><g><title>&lt;util::grid::Orientation as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="79.1045%" y="229" width="0.7463%" height="15" fill="rgb(234,177,6)" fg:x="106" fg:w="1"/><text x="79.3545%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.75%)</title><rect x="79.1045%" y="213" width="0.7463%" height="15" fill="rgb(217,24,9)" fg:x="106" fg:w="1"/><text x="79.3545%" y="223.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.75%)</title><rect x="79.1045%" y="197" width="0.7463%" height="15" fill="rgb(220,13,46)" fg:x="106" fg:w="1"/><text x="79.3545%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.75%)</title><rect x="79.1045%" y="181" width="0.7463%" height="15" fill="rgb(239,221,27)" fg:x="106" fg:w="1"/><text x="79.3545%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="79.1045%" y="165" width="0.7463%" height="15" fill="rgb(222,198,25)" fg:x="106" fg:w="1"/><text x="79.3545%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="79.1045%" y="149" width="0.7463%" height="15" fill="rgb(211,99,13)" fg:x="106" fg:w="1"/><text x="79.3545%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="79.1045%" y="133" width="0.7463%" height="15" fill="rgb(232,111,31)" fg:x="106" fg:w="1"/><text x="79.3545%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 1.49%)</title><rect x="79.1045%" y="309" width="1.4925%" height="15" fill="rgb(245,82,37)" fg:x="106" fg:w="2"/><text x="79.3545%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 1.49%)</title><rect x="79.1045%" y="293" width="1.4925%" height="15" fill="rgb(227,149,46)" fg:x="106" fg:w="2"/><text x="79.3545%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 1.49%)</title><rect x="79.1045%" y="277" width="1.4925%" height="15" fill="rgb(218,36,50)" fg:x="106" fg:w="2"/><text x="79.3545%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (2 samples, 1.49%)</title><rect x="79.1045%" y="261" width="1.4925%" height="15" fill="rgb(226,80,48)" fg:x="106" fg:w="2"/><text x="79.3545%" y="271.50"></text></g><g><title>&lt;util::grid::Position as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="79.8507%" y="245" width="0.7463%" height="15" fill="rgb(238,224,15)" fg:x="107" fg:w="1"/><text x="80.1007%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.75%)</title><rect x="79.8507%" y="229" width="0.7463%" height="15" fill="rgb(241,136,10)" fg:x="107" fg:w="1"/><text x="80.1007%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.75%)</title><rect x="79.8507%" y="213" width="0.7463%" height="15" fill="rgb(208,32,45)" fg:x="107" fg:w="1"/><text x="80.1007%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="79.8507%" y="197" width="0.7463%" height="15" fill="rgb(207,135,9)" fg:x="107" fg:w="1"/><text x="80.1007%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="79.8507%" y="181" width="0.7463%" height="15" fill="rgb(206,86,44)" fg:x="107" fg:w="1"/><text x="80.1007%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="79.8507%" y="165" width="0.7463%" height="15" fill="rgb(245,177,15)" fg:x="107" fg:w="1"/><text x="80.1007%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="79.8507%" y="149" width="0.7463%" height="15" fill="rgb(206,64,50)" fg:x="107" fg:w="1"/><text x="80.1007%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.75%)</title><rect x="79.8507%" y="133" width="0.7463%" height="15" fill="rgb(234,36,40)" fg:x="107" fg:w="1"/><text x="80.1007%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="80.5970%" y="165" width="1.4925%" height="15" fill="rgb(213,64,8)" fg:x="108" fg:w="2"/><text x="80.8470%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="80.5970%" y="149" width="1.4925%" height="15" fill="rgb(210,75,36)" fg:x="108" fg:w="2"/><text x="80.8470%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="80.5970%" y="133" width="1.4925%" height="15" fill="rgb(229,88,21)" fg:x="108" fg:w="2"/><text x="80.8470%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 1.49%)</title><rect x="80.5970%" y="117" width="1.4925%" height="15" fill="rgb(252,204,47)" fg:x="108" fg:w="2"/><text x="80.8470%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 1.49%)</title><rect x="80.5970%" y="101" width="1.4925%" height="15" fill="rgb(208,77,27)" fg:x="108" fg:w="2"/><text x="80.8470%" y="111.50"></text></g><g><title>&lt;day17::NodeVariant as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="82.0896%" y="133" width="0.7463%" height="15" fill="rgb(221,76,26)" fg:x="110" fg:w="1"/><text x="82.3396%" y="143.50"></text></g><g><title>&lt;util::grid::Orientation as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="82.0896%" y="117" width="0.7463%" height="15" fill="rgb(225,139,18)" fg:x="110" fg:w="1"/><text x="82.3396%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.75%)</title><rect x="82.0896%" y="101" width="0.7463%" height="15" fill="rgb(230,137,11)" fg:x="110" fg:w="1"/><text x="82.3396%" y="111.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.75%)</title><rect x="82.0896%" y="85" width="0.7463%" height="15" fill="rgb(212,28,1)" fg:x="110" fg:w="1"/><text x="82.3396%" y="95.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.75%)</title><rect x="82.0896%" y="69" width="0.7463%" height="15" fill="rgb(248,164,17)" fg:x="110" fg:w="1"/><text x="82.3396%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.75%)</title><rect x="82.0896%" y="53" width="0.7463%" height="15" fill="rgb(222,171,42)" fg:x="110" fg:w="1"/><text x="82.3396%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4 samples, 2.99%)</title><rect x="80.5970%" y="309" width="2.9851%" height="15" fill="rgb(243,84,45)" fg:x="108" fg:w="4"/><text x="80.8470%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 2.99%)</title><rect x="80.5970%" y="293" width="2.9851%" height="15" fill="rgb(252,49,23)" fg:x="108" fg:w="4"/><text x="80.8470%" y="303.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 2.99%)</title><rect x="80.5970%" y="277" width="2.9851%" height="15" fill="rgb(215,19,7)" fg:x="108" fg:w="4"/><text x="80.8470%" y="287.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (4 samples, 2.99%)</title><rect x="80.5970%" y="261" width="2.9851%" height="15" fill="rgb(238,81,41)" fg:x="108" fg:w="4"/><text x="80.8470%" y="271.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (4 samples, 2.99%)</title><rect x="80.5970%" y="245" width="2.9851%" height="15" fill="rgb(210,199,37)" fg:x="108" fg:w="4"/><text x="80.8470%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (4 samples, 2.99%)</title><rect x="80.5970%" y="229" width="2.9851%" height="15" fill="rgb(244,192,49)" fg:x="108" fg:w="4"/><text x="80.8470%" y="239.50">has..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (4 samples, 2.99%)</title><rect x="80.5970%" y="213" width="2.9851%" height="15" fill="rgb(226,211,11)" fg:x="108" fg:w="4"/><text x="80.8470%" y="223.50">has..</text></g><g><title>hashbrown::map::make_hash (4 samples, 2.99%)</title><rect x="80.5970%" y="197" width="2.9851%" height="15" fill="rgb(236,162,54)" fg:x="108" fg:w="4"/><text x="80.8470%" y="207.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 2.99%)</title><rect x="80.5970%" y="181" width="2.9851%" height="15" fill="rgb(220,229,9)" fg:x="108" fg:w="4"/><text x="80.8470%" y="191.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 1.49%)</title><rect x="82.0896%" y="165" width="1.4925%" height="15" fill="rgb(250,87,22)" fg:x="110" fg:w="2"/><text x="82.3396%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (2 samples, 1.49%)</title><rect x="82.0896%" y="149" width="1.4925%" height="15" fill="rgb(239,43,17)" fg:x="110" fg:w="2"/><text x="82.3396%" y="159.50"></text></g><g><title>&lt;util::grid::Position as core::hash::Hash&gt;::hash (1 samples, 0.75%)</title><rect x="82.8358%" y="133" width="0.7463%" height="15" fill="rgb(231,177,25)" fg:x="111" fg:w="1"/><text x="83.0858%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.75%)</title><rect x="82.8358%" y="117" width="0.7463%" height="15" fill="rgb(219,179,1)" fg:x="111" fg:w="1"/><text x="83.0858%" y="127.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.75%)</title><rect x="82.8358%" y="101" width="0.7463%" height="15" fill="rgb(238,219,53)" fg:x="111" fg:w="1"/><text x="83.0858%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="82.8358%" y="85" width="0.7463%" height="15" fill="rgb(232,167,36)" fg:x="111" fg:w="1"/><text x="83.0858%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="82.8358%" y="69" width="0.7463%" height="15" fill="rgb(244,19,51)" fg:x="111" fg:w="1"/><text x="83.0858%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.75%)</title><rect x="82.8358%" y="53" width="0.7463%" height="15" fill="rgb(224,6,22)" fg:x="111" fg:w="1"/><text x="83.0858%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="82.8358%" y="37" width="0.7463%" height="15" fill="rgb(224,145,5)" fg:x="111" fg:w="1"/><text x="83.0858%" y="47.50"></text></g><g><title>day17::crooked_dijkstra (104 samples, 77.61%)</title><rect x="8.9552%" y="373" width="77.6119%" height="15" fill="rgb(234,130,49)" fg:x="12" fg:w="104"/><text x="9.2052%" y="383.50">day17::crooked_dijkstra</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (10 samples, 7.46%)</title><rect x="79.1045%" y="357" width="7.4627%" height="15" fill="rgb(254,6,2)" fg:x="106" fg:w="10"/><text x="79.3545%" y="367.50">std::colle..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (10 samples, 7.46%)</title><rect x="79.1045%" y="341" width="7.4627%" height="15" fill="rgb(208,96,46)" fg:x="106" fg:w="10"/><text x="79.3545%" y="351.50">hashbrown:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 7.46%)</title><rect x="79.1045%" y="325" width="7.4627%" height="15" fill="rgb(239,3,39)" fg:x="106" fg:w="10"/><text x="79.3545%" y="335.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (4 samples, 2.99%)</title><rect x="83.5821%" y="309" width="2.9851%" height="15" fill="rgb(233,210,1)" fg:x="112" fg:w="4"/><text x="83.8321%" y="319.50">has..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 2.99%)</title><rect x="83.5821%" y="293" width="2.9851%" height="15" fill="rgb(244,137,37)" fg:x="112" fg:w="4"/><text x="83.8321%" y="303.50">has..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 2.99%)</title><rect x="83.5821%" y="277" width="2.9851%" height="15" fill="rgb(240,136,2)" fg:x="112" fg:w="4"/><text x="83.8321%" y="287.50">cor..</text></g><g><title>core::ptr::write (4 samples, 2.99%)</title><rect x="83.5821%" y="261" width="2.9851%" height="15" fill="rgb(239,18,37)" fg:x="112" fg:w="4"/><text x="83.8321%" y="271.50">cor..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.75%)</title><rect x="87.3134%" y="325" width="0.7463%" height="15" fill="rgb(218,185,22)" fg:x="117" fg:w="1"/><text x="87.5634%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.75%)</title><rect x="87.3134%" y="309" width="0.7463%" height="15" fill="rgb(225,218,4)" fg:x="117" fg:w="1"/><text x="87.5634%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.75%)</title><rect x="87.3134%" y="293" width="0.7463%" height="15" fill="rgb(230,182,32)" fg:x="117" fg:w="1"/><text x="87.5634%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.75%)</title><rect x="87.3134%" y="277" width="0.7463%" height="15" fill="rgb(242,56,43)" fg:x="117" fg:w="1"/><text x="87.5634%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.75%)</title><rect x="87.3134%" y="261" width="0.7463%" height="15" fill="rgb(233,99,24)" fg:x="117" fg:w="1"/><text x="87.5634%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.75%)</title><rect x="87.3134%" y="245" width="0.7463%" height="15" fill="rgb(234,209,42)" fg:x="117" fg:w="1"/><text x="87.5634%" y="255.50"></text></g><g><title>realloc (1 samples, 0.75%)</title><rect x="87.3134%" y="229" width="0.7463%" height="15" fill="rgb(227,7,12)" fg:x="117" fg:w="1"/><text x="87.5634%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="87.3134%" y="213" width="0.7463%" height="15" fill="rgb(245,203,43)" fg:x="117" fg:w="1"/><text x="87.5634%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.75%)</title><rect x="87.3134%" y="197" width="0.7463%" height="15" fill="rgb(238,205,33)" fg:x="117" fg:w="1"/><text x="87.5634%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="181" width="0.7463%" height="15" fill="rgb(231,56,7)" fg:x="117" fg:w="1"/><text x="87.5634%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="165" width="0.7463%" height="15" fill="rgb(244,186,29)" fg:x="117" fg:w="1"/><text x="87.5634%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="149" width="0.7463%" height="15" fill="rgb(234,111,31)" fg:x="117" fg:w="1"/><text x="87.5634%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="133" width="0.7463%" height="15" fill="rgb(241,149,10)" fg:x="117" fg:w="1"/><text x="87.5634%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="117" width="0.7463%" height="15" fill="rgb(249,206,44)" fg:x="117" fg:w="1"/><text x="87.5634%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="101" width="0.7463%" height="15" fill="rgb(251,153,30)" fg:x="117" fg:w="1"/><text x="87.5634%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="85" width="0.7463%" height="15" fill="rgb(239,152,38)" fg:x="117" fg:w="1"/><text x="87.5634%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="87.3134%" y="69" width="0.7463%" height="15" fill="rgb(249,139,47)" fg:x="117" fg:w="1"/><text x="87.5634%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.49%)</title><rect x="87.3134%" y="341" width="1.4925%" height="15" fill="rgb(244,64,35)" fg:x="117" fg:w="2"/><text x="87.5634%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.75%)</title><rect x="88.0597%" y="325" width="0.7463%" height="15" fill="rgb(216,46,15)" fg:x="118" fg:w="1"/><text x="88.3097%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.75%)</title><rect x="88.0597%" y="309" width="0.7463%" height="15" fill="rgb(250,74,19)" fg:x="118" fg:w="1"/><text x="88.3097%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.75%)</title><rect x="88.0597%" y="293" width="0.7463%" height="15" fill="rgb(249,42,33)" fg:x="118" fg:w="1"/><text x="88.3097%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.75%)</title><rect x="88.0597%" y="277" width="0.7463%" height="15" fill="rgb(242,149,17)" fg:x="118" fg:w="1"/><text x="88.3097%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="88.0597%" y="261" width="0.7463%" height="15" fill="rgb(244,29,21)" fg:x="118" fg:w="1"/><text x="88.3097%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (2 samples, 1.49%)</title><rect x="88.8060%" y="325" width="1.4925%" height="15" fill="rgb(220,130,37)" fg:x="119" fg:w="2"/><text x="89.0560%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="88.8060%" y="309" width="1.4925%" height="15" fill="rgb(211,67,2)" fg:x="119" fg:w="2"/><text x="89.0560%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="88.8060%" y="293" width="1.4925%" height="15" fill="rgb(235,68,52)" fg:x="119" fg:w="2"/><text x="89.0560%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 1.49%)</title><rect x="88.8060%" y="277" width="1.4925%" height="15" fill="rgb(246,142,3)" fg:x="119" fg:w="2"/><text x="89.0560%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.75%)</title><rect x="89.5522%" y="261" width="0.7463%" height="15" fill="rgb(241,25,7)" fg:x="120" fg:w="1"/><text x="89.8022%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.75%)</title><rect x="89.5522%" y="245" width="0.7463%" height="15" fill="rgb(242,119,39)" fg:x="120" fg:w="1"/><text x="89.8022%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="90.2985%" y="277" width="0.7463%" height="15" fill="rgb(241,98,45)" fg:x="121" fg:w="1"/><text x="90.5485%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (4 samples, 2.99%)</title><rect x="88.8060%" y="341" width="2.9851%" height="15" fill="rgb(254,28,30)" fg:x="119" fg:w="4"/><text x="89.0560%" y="351.50">ind..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (2 samples, 1.49%)</title><rect x="90.2985%" y="325" width="1.4925%" height="15" fill="rgb(241,142,54)" fg:x="121" fg:w="2"/><text x="90.5485%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (2 samples, 1.49%)</title><rect x="90.2985%" y="309" width="1.4925%" height="15" fill="rgb(222,85,15)" fg:x="121" fg:w="2"/><text x="90.5485%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (2 samples, 1.49%)</title><rect x="90.2985%" y="293" width="1.4925%" height="15" fill="rgb(210,85,47)" fg:x="121" fg:w="2"/><text x="90.5485%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.75%)</title><rect x="91.0448%" y="277" width="0.7463%" height="15" fill="rgb(224,206,25)" fg:x="122" fg:w="1"/><text x="91.2948%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.75%)</title><rect x="91.0448%" y="261" width="0.7463%" height="15" fill="rgb(243,201,19)" fg:x="122" fg:w="1"/><text x="91.2948%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (1 samples, 0.75%)</title><rect x="93.2836%" y="277" width="0.7463%" height="15" fill="rgb(236,59,4)" fg:x="125" fg:w="1"/><text x="93.5336%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.75%)</title><rect x="93.2836%" y="261" width="0.7463%" height="15" fill="rgb(254,179,45)" fg:x="125" fg:w="1"/><text x="93.5336%" y="271.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (4 samples, 2.99%)</title><rect x="93.2836%" y="293" width="2.9851%" height="15" fill="rgb(226,14,10)" fg:x="125" fg:w="4"/><text x="93.5336%" y="303.50">ind..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 2.24%)</title><rect x="94.0299%" y="277" width="2.2388%" height="15" fill="rgb(244,27,41)" fg:x="126" fg:w="3"/><text x="94.2799%" y="287.50">a..</text></g><g><title>core::ptr::write (3 samples, 2.24%)</title><rect x="94.0299%" y="261" width="2.2388%" height="15" fill="rgb(235,35,32)" fg:x="126" fg:w="3"/><text x="94.2799%" y="271.50">c..</text></g><g><title>[unknown] (3 samples, 2.24%)</title><rect x="94.0299%" y="245" width="2.2388%" height="15" fill="rgb(218,68,31)" fg:x="126" fg:w="3"/><text x="94.2799%" y="255.50">[..</text></g><g><title>[unknown] (2 samples, 1.49%)</title><rect x="94.7761%" y="229" width="1.4925%" height="15" fill="rgb(207,120,37)" fg:x="127" fg:w="2"/><text x="95.0261%" y="239.50"></text></g><g><title>[unknown] (2 samples, 1.49%)</title><rect x="94.7761%" y="213" width="1.4925%" height="15" fill="rgb(227,98,0)" fg:x="127" fg:w="2"/><text x="95.0261%" y="223.50"></text></g><g><title>[unknown] (2 samples, 1.49%)</title><rect x="94.7761%" y="197" width="1.4925%" height="15" fill="rgb(207,7,3)" fg:x="127" fg:w="2"/><text x="95.0261%" y="207.50"></text></g><g><title>[unknown] (2 samples, 1.49%)</title><rect x="94.7761%" y="181" width="1.4925%" height="15" fill="rgb(206,98,19)" fg:x="127" fg:w="2"/><text x="95.0261%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="95.5224%" y="165" width="0.7463%" height="15" fill="rgb(217,5,26)" fg:x="128" fg:w="1"/><text x="95.7724%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="95.5224%" y="149" width="0.7463%" height="15" fill="rgb(235,190,38)" fg:x="128" fg:w="1"/><text x="95.7724%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="95.5224%" y="133" width="0.7463%" height="15" fill="rgb(247,86,24)" fg:x="128" fg:w="1"/><text x="95.7724%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="95.5224%" y="117" width="0.7463%" height="15" fill="rgb(205,101,16)" fg:x="128" fg:w="1"/><text x="95.7724%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 1.49%)</title><rect x="96.2687%" y="245" width="1.4925%" height="15" fill="rgb(246,168,33)" fg:x="129" fg:w="2"/><text x="96.5187%" y="255.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (2 samples, 1.49%)</title><rect x="96.2687%" y="229" width="1.4925%" height="15" fill="rgb(231,114,1)" fg:x="129" fg:w="2"/><text x="96.5187%" y="239.50"></text></g><g><title>&lt;Q as equivalent::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.75%)</title><rect x="97.0149%" y="213" width="0.7463%" height="15" fill="rgb(207,184,53)" fg:x="130" fg:w="1"/><text x="97.2649%" y="223.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.75%)</title><rect x="97.0149%" y="197" width="0.7463%" height="15" fill="rgb(224,95,51)" fg:x="130" fg:w="1"/><text x="97.2649%" y="207.50"></text></g><g><title>petgraph::graphmap::GraphMap&lt;N,E,Ty&gt;::add_edge (16 samples, 11.94%)</title><rect x="86.5672%" y="357" width="11.9403%" height="15" fill="rgb(212,188,45)" fg:x="116" fg:w="16"/><text x="86.8172%" y="367.50">petgraph::graphmap..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (9 samples, 6.72%)</title><rect x="91.7910%" y="341" width="6.7164%" height="15" fill="rgb(223,154,38)" fg:x="123" fg:w="9"/><text x="92.0410%" y="351.50">indexmap:..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (8 samples, 5.97%)</title><rect x="92.5373%" y="325" width="5.9701%" height="15" fill="rgb(251,22,52)" fg:x="124" fg:w="8"/><text x="92.7873%" y="335.50">indexmap..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (7 samples, 5.22%)</title><rect x="93.2836%" y="309" width="5.2239%" height="15" fill="rgb(229,209,22)" fg:x="125" fg:w="7"/><text x="93.5336%" y="319.50">indexm..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (3 samples, 2.24%)</title><rect x="96.2687%" y="293" width="2.2388%" height="15" fill="rgb(234,138,34)" fg:x="129" fg:w="3"/><text x="96.5187%" y="303.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 2.24%)</title><rect x="96.2687%" y="277" width="2.2388%" height="15" fill="rgb(212,95,11)" fg:x="129" fg:w="3"/><text x="96.5187%" y="287.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (3 samples, 2.24%)</title><rect x="96.2687%" y="261" width="2.2388%" height="15" fill="rgb(240,179,47)" fg:x="129" fg:w="3"/><text x="96.5187%" y="271.50">h..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.75%)</title><rect x="97.7612%" y="245" width="0.7463%" height="15" fill="rgb(240,163,11)" fg:x="131" fg:w="1"/><text x="98.0112%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.75%)</title><rect x="97.7612%" y="229" width="0.7463%" height="15" fill="rgb(236,37,12)" fg:x="131" fg:w="1"/><text x="98.0112%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.75%)</title><rect x="97.7612%" y="213" width="0.7463%" height="15" fill="rgb(232,164,16)" fg:x="131" fg:w="1"/><text x="98.0112%" y="223.50"></text></g><g><title>util::grid::SparseGrid&lt;T&gt;::neighbour (1 samples, 0.75%)</title><rect x="98.5075%" y="357" width="0.7463%" height="15" fill="rgb(244,205,15)" fg:x="132" fg:w="1"/><text x="98.7575%" y="367.50"></text></g><g><title>util::grid::SparseGrid&lt;T&gt;::get (1 samples, 0.75%)</title><rect x="98.5075%" y="341" width="0.7463%" height="15" fill="rgb(223,117,47)" fg:x="132" fg:w="1"/><text x="98.7575%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.75%)</title><rect x="98.5075%" y="325" width="0.7463%" height="15" fill="rgb(244,107,35)" fg:x="132" fg:w="1"/><text x="98.7575%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.75%)</title><rect x="98.5075%" y="309" width="0.7463%" height="15" fill="rgb(205,140,8)" fg:x="132" fg:w="1"/><text x="98.7575%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.75%)</title><rect x="98.5075%" y="293" width="0.7463%" height="15" fill="rgb(228,84,46)" fg:x="132" fg:w="1"/><text x="98.7575%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.75%)</title><rect x="98.5075%" y="277" width="0.7463%" height="15" fill="rgb(254,188,9)" fg:x="132" fg:w="1"/><text x="98.7575%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.75%)</title><rect x="98.5075%" y="261" width="0.7463%" height="15" fill="rgb(206,112,54)" fg:x="132" fg:w="1"/><text x="98.7575%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.75%)</title><rect x="98.5075%" y="245" width="0.7463%" height="15" fill="rgb(216,84,49)" fg:x="132" fg:w="1"/><text x="98.7575%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.75%)</title><rect x="98.5075%" y="229" width="0.7463%" height="15" fill="rgb(214,194,35)" fg:x="132" fg:w="1"/><text x="98.7575%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.75%)</title><rect x="98.5075%" y="213" width="0.7463%" height="15" fill="rgb(249,28,3)" fg:x="132" fg:w="1"/><text x="98.7575%" y="223.50"></text></g><g><title>all (134 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="134"/><text x="0.2500%" y="687.50"></text></g><g><title>day17 (134 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="134"/><text x="0.2500%" y="671.50">day17</text></g><g><title>_start (123 samples, 91.79%)</title><rect x="8.2090%" y="645" width="91.7910%" height="15" fill="rgb(213,201,24)" fg:x="11" fg:w="123"/><text x="8.4590%" y="655.50">_start</text></g><g><title>__libc_start_main (123 samples, 91.79%)</title><rect x="8.2090%" y="629" width="91.7910%" height="15" fill="rgb(248,116,28)" fg:x="11" fg:w="123"/><text x="8.4590%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (123 samples, 91.79%)</title><rect x="8.2090%" y="613" width="91.7910%" height="15" fill="rgb(219,72,43)" fg:x="11" fg:w="123"/><text x="8.4590%" y="623.50">[libc.so.6]</text></g><g><title>main (123 samples, 91.79%)</title><rect x="8.2090%" y="597" width="91.7910%" height="15" fill="rgb(209,138,14)" fg:x="11" fg:w="123"/><text x="8.4590%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (123 samples, 91.79%)</title><rect x="8.2090%" y="581" width="91.7910%" height="15" fill="rgb(222,18,33)" fg:x="11" fg:w="123"/><text x="8.4590%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (123 samples, 91.79%)</title><rect x="8.2090%" y="565" width="91.7910%" height="15" fill="rgb(213,199,7)" fg:x="11" fg:w="123"/><text x="8.4590%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (123 samples, 91.79%)</title><rect x="8.2090%" y="549" width="91.7910%" height="15" fill="rgb(250,110,10)" fg:x="11" fg:w="123"/><text x="8.4590%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (123 samples, 91.79%)</title><rect x="8.2090%" y="533" width="91.7910%" height="15" fill="rgb(248,123,6)" fg:x="11" fg:w="123"/><text x="8.4590%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (123 samples, 91.79%)</title><rect x="8.2090%" y="517" width="91.7910%" height="15" fill="rgb(206,91,31)" fg:x="11" fg:w="123"/><text x="8.4590%" y="527.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (123 samples, 91.79%)</title><rect x="8.2090%" y="501" width="91.7910%" height="15" fill="rgb(211,154,13)" fg:x="11" fg:w="123"/><text x="8.4590%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (123 samples, 91.79%)</title><rect x="8.2090%" y="485" width="91.7910%" height="15" fill="rgb(225,148,7)" fg:x="11" fg:w="123"/><text x="8.4590%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (123 samples, 91.79%)</title><rect x="8.2090%" y="469" width="91.7910%" height="15" fill="rgb(220,160,43)" fg:x="11" fg:w="123"/><text x="8.4590%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (123 samples, 91.79%)</title><rect x="8.2090%" y="453" width="91.7910%" height="15" fill="rgb(213,52,39)" fg:x="11" fg:w="123"/><text x="8.4590%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (123 samples, 91.79%)</title><rect x="8.2090%" y="437" width="91.7910%" height="15" fill="rgb(243,137,7)" fg:x="11" fg:w="123"/><text x="8.4590%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (123 samples, 91.79%)</title><rect x="8.2090%" y="421" width="91.7910%" height="15" fill="rgb(230,79,13)" fg:x="11" fg:w="123"/><text x="8.4590%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (123 samples, 91.79%)</title><rect x="8.2090%" y="405" width="91.7910%" height="15" fill="rgb(247,105,23)" fg:x="11" fg:w="123"/><text x="8.4590%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>day17::main (123 samples, 91.79%)</title><rect x="8.2090%" y="389" width="91.7910%" height="15" fill="rgb(223,179,41)" fg:x="11" fg:w="123"/><text x="8.4590%" y="399.50">day17::main</text></g><g><title>day17::fill_graph (18 samples, 13.43%)</title><rect x="86.5672%" y="373" width="13.4328%" height="15" fill="rgb(218,9,34)" fg:x="116" fg:w="18"/><text x="86.8172%" y="383.50">day17::fill_graph</text></g><g><title>util::grid::SparseGrid&lt;T&gt;::put (1 samples, 0.75%)</title><rect x="99.2537%" y="357" width="0.7463%" height="15" fill="rgb(222,106,8)" fg:x="133" fg:w="1"/><text x="99.5037%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.75%)</title><rect x="99.2537%" y="341" width="0.7463%" height="15" fill="rgb(211,220,0)" fg:x="133" fg:w="1"/><text x="99.5037%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.75%)</title><rect x="99.2537%" y="325" width="0.7463%" height="15" fill="rgb(229,52,16)" fg:x="133" fg:w="1"/><text x="99.5037%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.75%)</title><rect x="99.2537%" y="309" width="0.7463%" height="15" fill="rgb(212,155,18)" fg:x="133" fg:w="1"/><text x="99.5037%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.75%)</title><rect x="99.2537%" y="293" width="0.7463%" height="15" fill="rgb(242,21,14)" fg:x="133" fg:w="1"/><text x="99.5037%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.75%)</title><rect x="99.2537%" y="277" width="0.7463%" height="15" fill="rgb(222,19,48)" fg:x="133" fg:w="1"/><text x="99.5037%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.75%)</title><rect x="99.2537%" y="261" width="0.7463%" height="15" fill="rgb(232,45,27)" fg:x="133" fg:w="1"/><text x="99.5037%" y="271.50"></text></g></svg></svg>