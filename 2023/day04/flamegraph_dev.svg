<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="28764"><g><title>[[stack]] (3 samples, 0.01%)</title><rect x="0.0000%" y="789" width="0.0104%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.01%)</title><rect x="0.0000%" y="773" width="0.0104%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.01%)</title><rect x="0.0000%" y="757" width="0.0104%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.01%)</title><rect x="0.0000%" y="741" width="0.0104%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.02%)</title><rect x="0.0104%" y="773" width="0.0209%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="6"/><text x="0.2604%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="0.0209%" y="757" width="0.0104%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="3"/><text x="0.2709%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.03%)</title><rect x="0.0104%" y="789" width="0.0278%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="8"/><text x="0.2604%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="0.0382%" y="789" width="0.0174%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="5"/><text x="0.2882%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (8 samples, 0.03%)</title><rect x="0.3998%" y="469" width="0.0278%" height="15" fill="rgb(218,30,26)" fg:x="115" fg:w="8"/><text x="0.6498%" y="479.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (26 samples, 0.09%)</title><rect x="0.4380%" y="469" width="0.0904%" height="15" fill="rgb(220,122,19)" fg:x="126" fg:w="26"/><text x="0.6880%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (53 samples, 0.18%)</title><rect x="0.3477%" y="485" width="0.1843%" height="15" fill="rgb(250,228,42)" fg:x="100" fg:w="53"/><text x="0.5977%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.06%)</title><rect x="0.5319%" y="485" width="0.0591%" height="15" fill="rgb(240,193,28)" fg:x="153" fg:w="17"/><text x="0.7819%" y="495.50"></text></g><g><title>core::slice::raw::from_raw_parts (13 samples, 0.05%)</title><rect x="0.5458%" y="469" width="0.0452%" height="15" fill="rgb(216,20,37)" fg:x="157" fg:w="13"/><text x="0.7958%" y="479.50"></text></g><g><title>core::ptr::slice_from_raw_parts (13 samples, 0.05%)</title><rect x="0.5458%" y="453" width="0.0452%" height="15" fill="rgb(206,188,39)" fg:x="157" fg:w="13"/><text x="0.7958%" y="463.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (12 samples, 0.04%)</title><rect x="0.5493%" y="437" width="0.0417%" height="15" fill="rgb(217,207,13)" fg:x="158" fg:w="12"/><text x="0.7993%" y="447.50"></text></g><g><title>core::mem::zeroed (3 samples, 0.01%)</title><rect x="0.7092%" y="469" width="0.0104%" height="15" fill="rgb(231,73,38)" fg:x="204" fg:w="3"/><text x="0.9592%" y="479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (3 samples, 0.01%)</title><rect x="0.7092%" y="453" width="0.0104%" height="15" fill="rgb(225,20,46)" fg:x="204" fg:w="3"/><text x="0.9592%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.01%)</title><rect x="0.7092%" y="437" width="0.0104%" height="15" fill="rgb(210,31,41)" fg:x="204" fg:w="3"/><text x="0.9592%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.02%)</title><rect x="0.7196%" y="469" width="0.0174%" height="15" fill="rgb(221,200,47)" fg:x="207" fg:w="5"/><text x="0.9696%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (3 samples, 0.01%)</title><rect x="0.7370%" y="437" width="0.0104%" height="15" fill="rgb(226,26,5)" fg:x="212" fg:w="3"/><text x="0.9870%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_byte_sub (5 samples, 0.02%)</title><rect x="0.7370%" y="469" width="0.0174%" height="15" fill="rgb(249,33,26)" fg:x="212" fg:w="5"/><text x="0.9870%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (5 samples, 0.02%)</title><rect x="0.7370%" y="453" width="0.0174%" height="15" fill="rgb(235,183,28)" fg:x="212" fg:w="5"/><text x="0.9870%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.17%)</title><rect x="0.5910%" y="485" width="0.1704%" height="15" fill="rgb(221,5,38)" fg:x="170" fg:w="49"/><text x="0.8410%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.01%)</title><rect x="0.9004%" y="453" width="0.0139%" height="15" fill="rgb(247,18,42)" fg:x="259" fg:w="4"/><text x="1.1504%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (27 samples, 0.09%)</title><rect x="0.8239%" y="469" width="0.0939%" height="15" fill="rgb(241,131,45)" fg:x="237" fg:w="27"/><text x="1.0739%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.01%)</title><rect x="1.0847%" y="405" width="0.0104%" height="15" fill="rgb(249,31,29)" fg:x="312" fg:w="3"/><text x="1.3347%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.01%)</title><rect x="1.0847%" y="389" width="0.0104%" height="15" fill="rgb(225,111,53)" fg:x="312" fg:w="3"/><text x="1.3347%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (21 samples, 0.07%)</title><rect x="1.0777%" y="421" width="0.0730%" height="15" fill="rgb(238,160,17)" fg:x="310" fg:w="21"/><text x="1.3277%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (16 samples, 0.06%)</title><rect x="1.0951%" y="405" width="0.0556%" height="15" fill="rgb(214,148,48)" fg:x="315" fg:w="16"/><text x="1.3451%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (16 samples, 0.06%)</title><rect x="1.0951%" y="389" width="0.0556%" height="15" fill="rgb(232,36,49)" fg:x="315" fg:w="16"/><text x="1.3451%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (16 samples, 0.06%)</title><rect x="1.0951%" y="373" width="0.0556%" height="15" fill="rgb(209,103,24)" fg:x="315" fg:w="16"/><text x="1.3451%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (52 samples, 0.18%)</title><rect x="1.0186%" y="437" width="0.1808%" height="15" fill="rgb(229,88,8)" fg:x="293" fg:w="52"/><text x="1.2686%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (14 samples, 0.05%)</title><rect x="1.1507%" y="421" width="0.0487%" height="15" fill="rgb(213,181,19)" fg:x="331" fg:w="14"/><text x="1.4007%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (14 samples, 0.05%)</title><rect x="1.1507%" y="405" width="0.0487%" height="15" fill="rgb(254,191,54)" fg:x="331" fg:w="14"/><text x="1.4007%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (16 samples, 0.06%)</title><rect x="3.7060%" y="373" width="0.0556%" height="15" fill="rgb(241,83,37)" fg:x="1066" fg:w="16"/><text x="3.9560%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (19 samples, 0.07%)</title><rect x="3.7025%" y="421" width="0.0661%" height="15" fill="rgb(233,36,39)" fg:x="1065" fg:w="19"/><text x="3.9525%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (18 samples, 0.06%)</title><rect x="3.7060%" y="405" width="0.0626%" height="15" fill="rgb(226,3,54)" fg:x="1066" fg:w="18"/><text x="3.9560%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (18 samples, 0.06%)</title><rect x="3.7060%" y="389" width="0.0626%" height="15" fill="rgb(245,192,40)" fg:x="1066" fg:w="18"/><text x="3.9560%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (11 samples, 0.04%)</title><rect x="3.9216%" y="405" width="0.0382%" height="15" fill="rgb(238,167,29)" fg:x="1128" fg:w="11"/><text x="4.1716%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (8 samples, 0.03%)</title><rect x="3.9320%" y="389" width="0.0278%" height="15" fill="rgb(232,182,51)" fg:x="1131" fg:w="8"/><text x="4.1820%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (8 samples, 0.03%)</title><rect x="3.9320%" y="373" width="0.0278%" height="15" fill="rgb(231,60,39)" fg:x="1131" fg:w="8"/><text x="4.1820%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (8 samples, 0.03%)</title><rect x="3.9320%" y="357" width="0.0278%" height="15" fill="rgb(208,69,12)" fg:x="1131" fg:w="8"/><text x="4.1820%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (6 samples, 0.02%)</title><rect x="3.9633%" y="405" width="0.0209%" height="15" fill="rgb(235,93,37)" fg:x="1140" fg:w="6"/><text x="4.2133%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (3 samples, 0.01%)</title><rect x="3.9841%" y="405" width="0.0104%" height="15" fill="rgb(213,116,39)" fg:x="1146" fg:w="3"/><text x="4.2341%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="3.9841%" y="389" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="1146" fg:w="3"/><text x="4.2341%" y="399.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="4.0085%" y="389" width="0.0104%" height="15" fill="rgb(206,96,30)" fg:x="1153" fg:w="3"/><text x="4.2585%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (9 samples, 0.03%)</title><rect x="3.9946%" y="405" width="0.0313%" height="15" fill="rgb(218,138,4)" fg:x="1149" fg:w="9"/><text x="4.2446%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (163 samples, 0.57%)</title><rect x="4.0328%" y="405" width="0.5667%" height="15" fill="rgb(250,191,14)" fg:x="1160" fg:w="163"/><text x="4.2828%" y="415.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (158 samples, 0.55%)</title><rect x="4.0502%" y="389" width="0.5493%" height="15" fill="rgb(239,60,40)" fg:x="1165" fg:w="158"/><text x="4.3002%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (142 samples, 0.49%)</title><rect x="4.1058%" y="373" width="0.4937%" height="15" fill="rgb(206,27,48)" fg:x="1181" fg:w="142"/><text x="4.3558%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::le (131 samples, 0.46%)</title><rect x="4.1441%" y="357" width="0.4554%" height="15" fill="rgb(225,35,8)" fg:x="1192" fg:w="131"/><text x="4.3941%" y="367.50"></text></g><g><title>&lt;day04::Card as core::cmp::PartialOrd&gt;::partial_cmp (83 samples, 0.29%)</title><rect x="4.3109%" y="341" width="0.2886%" height="15" fill="rgb(250,213,24)" fg:x="1240" fg:w="83"/><text x="4.5609%" y="351.50"></text></g><g><title>&lt;day04::Card as core::cmp::Ord&gt;::cmp (55 samples, 0.19%)</title><rect x="4.4083%" y="325" width="0.1912%" height="15" fill="rgb(247,123,22)" fg:x="1268" fg:w="55"/><text x="4.6583%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (52 samples, 0.18%)</title><rect x="4.4187%" y="309" width="0.1808%" height="15" fill="rgb(231,138,38)" fg:x="1271" fg:w="52"/><text x="4.6687%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (244 samples, 0.85%)</title><rect x="3.7790%" y="421" width="0.8483%" height="15" fill="rgb(231,145,46)" fg:x="1087" fg:w="244"/><text x="4.0290%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;core::cmp::Reverse&lt;&amp;day04::Card&gt;&gt;&gt; (8 samples, 0.03%)</title><rect x="4.5995%" y="405" width="0.0278%" height="15" fill="rgb(251,118,11)" fg:x="1323" fg:w="8"/><text x="4.8495%" y="415.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="4.6099%" y="389" width="0.0174%" height="15" fill="rgb(217,147,25)" fg:x="1326" fg:w="5"/><text x="4.8599%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (37 samples, 0.13%)</title><rect x="4.7907%" y="373" width="0.1286%" height="15" fill="rgb(247,81,37)" fg:x="1378" fg:w="37"/><text x="5.0407%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (86 samples, 0.30%)</title><rect x="4.6273%" y="421" width="0.2990%" height="15" fill="rgb(209,12,38)" fg:x="1331" fg:w="86"/><text x="4.8773%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (39 samples, 0.14%)</title><rect x="4.7907%" y="405" width="0.1356%" height="15" fill="rgb(227,1,9)" fg:x="1378" fg:w="39"/><text x="5.0407%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (39 samples, 0.14%)</title><rect x="4.7907%" y="389" width="0.1356%" height="15" fill="rgb(248,47,43)" fg:x="1378" fg:w="39"/><text x="5.0407%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (142 samples, 0.49%)</title><rect x="5.0897%" y="405" width="0.4937%" height="15" fill="rgb(221,10,30)" fg:x="1464" fg:w="142"/><text x="5.3397%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (59 samples, 0.21%)</title><rect x="5.5834%" y="405" width="0.2051%" height="15" fill="rgb(210,229,1)" fg:x="1606" fg:w="59"/><text x="5.8334%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (249 samples, 0.87%)</title><rect x="4.9263%" y="421" width="0.8657%" height="15" fill="rgb(222,148,37)" fg:x="1417" fg:w="249"/><text x="5.1763%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (10 samples, 0.03%)</title><rect x="5.7920%" y="421" width="0.0348%" height="15" fill="rgb(234,67,33)" fg:x="1666" fg:w="10"/><text x="6.0420%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (2,229 samples, 7.75%)</title><rect x="5.8267%" y="421" width="7.7493%" height="15" fill="rgb(247,98,35)" fg:x="1676" fg:w="2229"/><text x="6.0767%" y="431.50">core::cmp::..</text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (2,213 samples, 7.69%)</title><rect x="5.8824%" y="405" width="7.6936%" height="15" fill="rgb(247,138,52)" fg:x="1692" fg:w="2213"/><text x="6.1324%" y="415.50">&lt;core::cmp:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (2,080 samples, 7.23%)</title><rect x="6.3447%" y="389" width="7.2313%" height="15" fill="rgb(213,79,30)" fg:x="1825" fg:w="2080"/><text x="6.5947%" y="399.50">core::cmp:..</text></g><g><title>core::cmp::PartialOrd::le (1,808 samples, 6.29%)</title><rect x="7.2904%" y="373" width="6.2856%" height="15" fill="rgb(246,177,23)" fg:x="2097" fg:w="1808"/><text x="7.5404%" y="383.50">core::cm..</text></g><g><title>&lt;day04::Card as core::cmp::PartialOrd&gt;::partial_cmp (1,090 samples, 3.79%)</title><rect x="9.7865%" y="357" width="3.7895%" height="15" fill="rgb(230,62,27)" fg:x="2815" fg:w="1090"/><text x="10.0365%" y="367.50">&lt;day..</text></g><g><title>&lt;day04::Card as core::cmp::Ord&gt;::cmp (647 samples, 2.25%)</title><rect x="11.3267%" y="341" width="2.2493%" height="15" fill="rgb(216,154,8)" fg:x="3258" fg:w="647"/><text x="11.5767%" y="351.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (559 samples, 1.94%)</title><rect x="11.6326%" y="325" width="1.9434%" height="15" fill="rgb(244,35,45)" fg:x="3346" fg:w="559"/><text x="11.8826%" y="335.50">c..</text></g><g><title>core::mem::drop (29 samples, 0.10%)</title><rect x="13.5760%" y="421" width="0.1008%" height="15" fill="rgb(251,115,12)" fg:x="3905" fg:w="29"/><text x="13.8260%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;core::cmp::Reverse&lt;&amp;day04::Card&gt;&gt;&gt; (27 samples, 0.09%)</title><rect x="13.5830%" y="405" width="0.0939%" height="15" fill="rgb(240,54,50)" fg:x="3907" fg:w="27"/><text x="13.8330%" y="415.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.07%)</title><rect x="13.6038%" y="389" width="0.0730%" height="15" fill="rgb(233,84,52)" fg:x="3913" fg:w="21"/><text x="13.8538%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="13.6664%" y="373" width="0.0104%" height="15" fill="rgb(207,117,47)" fg:x="3931" fg:w="3"/><text x="13.9164%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (3,594 samples, 12.49%)</title><rect x="1.1994%" y="437" width="12.4948%" height="15" fill="rgb(249,43,39)" fg:x="345" fg:w="3594"/><text x="1.4494%" y="447.50">alloc::collections:..</text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (5 samples, 0.02%)</title><rect x="13.6768%" y="421" width="0.0174%" height="15" fill="rgb(209,38,44)" fg:x="3934" fg:w="5"/><text x="13.9268%" y="431.50"></text></g><g><title>core::ptr::read (9 samples, 0.03%)</title><rect x="13.7429%" y="405" width="0.0313%" height="15" fill="rgb(236,212,23)" fg:x="3953" fg:w="9"/><text x="13.9929%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (3,744 samples, 13.02%)</title><rect x="0.7614%" y="485" width="13.0163%" height="15" fill="rgb(242,79,21)" fg:x="219" fg:w="3744"/><text x="1.0114%" y="495.50">alloc::collections::..</text></g><g><title>core::option::Option&lt;T&gt;::map (3,699 samples, 12.86%)</title><rect x="0.9178%" y="469" width="12.8598%" height="15" fill="rgb(211,96,35)" fg:x="264" fg:w="3699"/><text x="1.1678%" y="479.50">core::option::Optio..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (3,689 samples, 12.83%)</title><rect x="0.9526%" y="453" width="12.8251%" height="15" fill="rgb(253,215,40)" fg:x="274" fg:w="3689"/><text x="1.2026%" y="463.50">alloc::collections:..</text></g><g><title>core::mem::swap (24 samples, 0.08%)</title><rect x="13.6942%" y="437" width="0.0834%" height="15" fill="rgb(211,81,21)" fg:x="3939" fg:w="24"/><text x="13.9442%" y="447.50"></text></g><g><title>core::mem::swap_simple (10 samples, 0.03%)</title><rect x="13.7429%" y="421" width="0.0348%" height="15" fill="rgb(208,190,38)" fg:x="3953" fg:w="10"/><text x="13.9929%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="13.8055%" y="469" width="0.0104%" height="15" fill="rgb(235,213,38)" fg:x="3971" fg:w="3"/><text x="14.0555%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="13.8055%" y="453" width="0.0104%" height="15" fill="rgb(237,122,38)" fg:x="3971" fg:w="3"/><text x="14.0555%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.01%)</title><rect x="14.0314%" y="437" width="0.0139%" height="15" fill="rgb(244,218,35)" fg:x="4036" fg:w="4"/><text x="14.2814%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.01%)</title><rect x="14.0314%" y="421" width="0.0139%" height="15" fill="rgb(240,68,47)" fg:x="4036" fg:w="4"/><text x="14.2814%" y="431.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (13 samples, 0.05%)</title><rect x="14.0453%" y="405" width="0.0452%" height="15" fill="rgb(210,16,53)" fg:x="4040" fg:w="13"/><text x="14.2953%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (22 samples, 0.08%)</title><rect x="14.0210%" y="453" width="0.0765%" height="15" fill="rgb(235,124,12)" fg:x="4033" fg:w="22"/><text x="14.2710%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (15 samples, 0.05%)</title><rect x="14.0453%" y="437" width="0.0521%" height="15" fill="rgb(224,169,11)" fg:x="4040" fg:w="15"/><text x="14.2953%" y="447.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (15 samples, 0.05%)</title><rect x="14.0453%" y="421" width="0.0521%" height="15" fill="rgb(250,166,2)" fg:x="4040" fg:w="15"/><text x="14.2953%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="14.1044%" y="453" width="0.0243%" height="15" fill="rgb(242,216,29)" fg:x="4057" fg:w="7"/><text x="14.3544%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (4 samples, 0.01%)</title><rect x="14.1288%" y="453" width="0.0139%" height="15" fill="rgb(230,116,27)" fg:x="4064" fg:w="4"/><text x="14.3788%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (8 samples, 0.03%)</title><rect x="14.1427%" y="453" width="0.0278%" height="15" fill="rgb(228,99,48)" fg:x="4068" fg:w="8"/><text x="14.3927%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (206 samples, 0.72%)</title><rect x="14.1705%" y="453" width="0.7162%" height="15" fill="rgb(253,11,6)" fg:x="4076" fg:w="206"/><text x="14.4205%" y="463.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (198 samples, 0.69%)</title><rect x="14.1983%" y="437" width="0.6884%" height="15" fill="rgb(247,143,39)" fg:x="4084" fg:w="198"/><text x="14.4483%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (193 samples, 0.67%)</title><rect x="14.2157%" y="421" width="0.6710%" height="15" fill="rgb(236,97,10)" fg:x="4089" fg:w="193"/><text x="14.4657%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (171 samples, 0.59%)</title><rect x="14.2922%" y="405" width="0.5945%" height="15" fill="rgb(233,208,19)" fg:x="4111" fg:w="171"/><text x="14.5422%" y="415.50"></text></g><g><title>&lt;day04::Card as core::cmp::PartialOrd&gt;::partial_cmp (100 samples, 0.35%)</title><rect x="14.5390%" y="389" width="0.3477%" height="15" fill="rgb(216,164,2)" fg:x="4182" fg:w="100"/><text x="14.7890%" y="399.50"></text></g><g><title>&lt;day04::Card as core::cmp::Ord&gt;::cmp (54 samples, 0.19%)</title><rect x="14.6989%" y="373" width="0.1877%" height="15" fill="rgb(220,129,5)" fg:x="4228" fg:w="54"/><text x="14.9489%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (41 samples, 0.14%)</title><rect x="14.7441%" y="357" width="0.1425%" height="15" fill="rgb(242,17,10)" fg:x="4241" fg:w="41"/><text x="14.9941%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (315 samples, 1.10%)</title><rect x="13.8159%" y="469" width="1.0951%" height="15" fill="rgb(242,107,0)" fg:x="3974" fg:w="315"/><text x="14.0659%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;core::cmp::Reverse&lt;&amp;day04::Card&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="14.8867%" y="453" width="0.0243%" height="15" fill="rgb(251,28,31)" fg:x="4282" fg:w="7"/><text x="15.1367%" y="463.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="14.8971%" y="437" width="0.0139%" height="15" fill="rgb(233,223,10)" fg:x="4285" fg:w="4"/><text x="15.1471%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (9 samples, 0.03%)</title><rect x="14.9492%" y="453" width="0.0313%" height="15" fill="rgb(215,21,27)" fg:x="4300" fg:w="9"/><text x="15.1992%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (354 samples, 1.23%)</title><rect x="13.7776%" y="485" width="1.2307%" height="15" fill="rgb(232,23,21)" fg:x="3963" fg:w="354"/><text x="14.0276%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.10%)</title><rect x="14.9110%" y="469" width="0.0973%" height="15" fill="rgb(244,5,23)" fg:x="4289" fg:w="28"/><text x="15.1610%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.02%)</title><rect x="14.9840%" y="453" width="0.0243%" height="15" fill="rgb(226,81,46)" fg:x="4310" fg:w="7"/><text x="15.2340%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter_map (8 samples, 0.03%)</title><rect x="15.0083%" y="485" width="0.0278%" height="15" fill="rgb(247,70,30)" fg:x="4317" fg:w="8"/><text x="15.2583%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.02%)</title><rect x="15.0987%" y="453" width="0.0209%" height="15" fill="rgb(212,68,19)" fg:x="4343" fg:w="6"/><text x="15.3487%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.02%)</title><rect x="15.0987%" y="437" width="0.0209%" height="15" fill="rgb(240,187,13)" fg:x="4343" fg:w="6"/><text x="15.3487%" y="447.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (16 samples, 0.06%)</title><rect x="15.1196%" y="437" width="0.0556%" height="15" fill="rgb(223,113,26)" fg:x="4349" fg:w="16"/><text x="15.3696%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.09%)</title><rect x="15.0918%" y="469" width="0.0869%" height="15" fill="rgb(206,192,2)" fg:x="4341" fg:w="25"/><text x="15.3418%" y="479.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (17 samples, 0.06%)</title><rect x="15.1196%" y="453" width="0.0591%" height="15" fill="rgb(241,108,4)" fg:x="4349" fg:w="17"/><text x="15.3696%" y="463.50"></text></g><g><title>__rust_dealloc (5 samples, 0.02%)</title><rect x="15.2726%" y="405" width="0.0174%" height="15" fill="rgb(247,173,49)" fg:x="4393" fg:w="5"/><text x="15.5226%" y="415.50"></text></g><g><title>cfree (24 samples, 0.08%)</title><rect x="15.2899%" y="405" width="0.0834%" height="15" fill="rgb(224,114,35)" fg:x="4398" fg:w="24"/><text x="15.5399%" y="415.50"></text></g><g><title>[libc.so.6] (15 samples, 0.05%)</title><rect x="15.3212%" y="389" width="0.0521%" height="15" fill="rgb(245,159,27)" fg:x="4407" fg:w="15"/><text x="15.5712%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 0.14%)</title><rect x="15.2378%" y="437" width="0.1391%" height="15" fill="rgb(245,172,44)" fg:x="4383" fg:w="40"/><text x="15.4878%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.11%)</title><rect x="15.2621%" y="421" width="0.1147%" height="15" fill="rgb(236,23,11)" fg:x="4390" fg:w="33"/><text x="15.5121%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (142 samples, 0.49%)</title><rect x="15.0362%" y="485" width="0.4937%" height="15" fill="rgb(205,117,38)" fg:x="4325" fg:w="142"/><text x="15.2862%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (101 samples, 0.35%)</title><rect x="15.1787%" y="469" width="0.3511%" height="15" fill="rgb(237,72,25)" fg:x="4366" fg:w="101"/><text x="15.4287%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.33%)</title><rect x="15.1961%" y="453" width="0.3338%" height="15" fill="rgb(244,70,9)" fg:x="4371" fg:w="96"/><text x="15.4461%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (44 samples, 0.15%)</title><rect x="15.3769%" y="437" width="0.1530%" height="15" fill="rgb(217,125,39)" fg:x="4423" fg:w="44"/><text x="15.6269%" y="447.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (3 samples, 0.01%)</title><rect x="15.5194%" y="421" width="0.0104%" height="15" fill="rgb(235,36,10)" fg:x="4464" fg:w="3"/><text x="15.7694%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (48 samples, 0.17%)</title><rect x="15.7280%" y="405" width="0.1669%" height="15" fill="rgb(251,123,47)" fg:x="4524" fg:w="48"/><text x="15.9780%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (28 samples, 0.10%)</title><rect x="15.7975%" y="389" width="0.0973%" height="15" fill="rgb(221,13,13)" fg:x="4544" fg:w="28"/><text x="16.0475%" y="399.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (94 samples, 0.33%)</title><rect x="15.6133%" y="437" width="0.3268%" height="15" fill="rgb(238,131,9)" fg:x="4491" fg:w="94"/><text x="15.8633%" y="447.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (94 samples, 0.33%)</title><rect x="15.6133%" y="421" width="0.3268%" height="15" fill="rgb(211,50,8)" fg:x="4491" fg:w="94"/><text x="15.8633%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.05%)</title><rect x="15.8949%" y="405" width="0.0452%" height="15" fill="rgb(245,182,24)" fg:x="4572" fg:w="13"/><text x="16.1449%" y="415.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (13 samples, 0.05%)</title><rect x="15.8949%" y="389" width="0.0452%" height="15" fill="rgb(242,14,37)" fg:x="4572" fg:w="13"/><text x="16.1449%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (5 samples, 0.02%)</title><rect x="15.9227%" y="373" width="0.0174%" height="15" fill="rgb(246,228,12)" fg:x="4580" fg:w="5"/><text x="16.1727%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (4 samples, 0.01%)</title><rect x="15.9401%" y="421" width="0.0139%" height="15" fill="rgb(213,55,15)" fg:x="4585" fg:w="4"/><text x="16.1901%" y="431.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (107 samples, 0.37%)</title><rect x="15.5855%" y="453" width="0.3720%" height="15" fill="rgb(209,9,3)" fg:x="4483" fg:w="107"/><text x="15.8355%" y="463.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (5 samples, 0.02%)</title><rect x="15.9401%" y="437" width="0.0174%" height="15" fill="rgb(230,59,30)" fg:x="4585" fg:w="5"/><text x="16.1901%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (9 samples, 0.03%)</title><rect x="16.0165%" y="421" width="0.0313%" height="15" fill="rgb(209,121,21)" fg:x="4607" fg:w="9"/><text x="16.2665%" y="431.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (7 samples, 0.02%)</title><rect x="16.0235%" y="405" width="0.0243%" height="15" fill="rgb(220,109,13)" fg:x="4609" fg:w="7"/><text x="16.2735%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.09%)</title><rect x="16.1174%" y="389" width="0.0939%" height="15" fill="rgb(232,18,1)" fg:x="4636" fg:w="27"/><text x="16.3674%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.06%)</title><rect x="16.1521%" y="373" width="0.0591%" height="15" fill="rgb(215,41,42)" fg:x="4646" fg:w="17"/><text x="16.4021%" y="383.50"></text></g><g><title>cfree (15 samples, 0.05%)</title><rect x="16.1591%" y="357" width="0.0521%" height="15" fill="rgb(224,123,36)" fg:x="4648" fg:w="15"/><text x="16.4091%" y="367.50"></text></g><g><title>[libc.so.6] (12 samples, 0.04%)</title><rect x="16.1695%" y="341" width="0.0417%" height="15" fill="rgb(240,125,3)" fg:x="4651" fg:w="12"/><text x="16.4195%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;day04::Card&gt;&gt; (241 samples, 0.84%)</title><rect x="15.5298%" y="485" width="0.8379%" height="15" fill="rgb(205,98,50)" fg:x="4467" fg:w="241"/><text x="15.7798%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (236 samples, 0.82%)</title><rect x="15.5472%" y="469" width="0.8205%" height="15" fill="rgb(205,185,37)" fg:x="4472" fg:w="236"/><text x="15.7972%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;day04::Card,alloc::alloc::Global&gt;&gt; (118 samples, 0.41%)</title><rect x="15.9574%" y="453" width="0.4102%" height="15" fill="rgb(238,207,15)" fg:x="4590" fg:w="118"/><text x="16.2074%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.38%)</title><rect x="15.9887%" y="437" width="0.3789%" height="15" fill="rgb(213,199,42)" fg:x="4599" fg:w="109"/><text x="16.2387%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;day04::Card&gt;&gt; (92 samples, 0.32%)</title><rect x="16.0478%" y="421" width="0.3198%" height="15" fill="rgb(235,201,11)" fg:x="4616" fg:w="92"/><text x="16.2978%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.30%)</title><rect x="16.0722%" y="405" width="0.2955%" height="15" fill="rgb(207,46,11)" fg:x="4623" fg:w="85"/><text x="16.3222%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (45 samples, 0.16%)</title><rect x="16.2112%" y="389" width="0.1564%" height="15" fill="rgb(241,35,35)" fg:x="4663" fg:w="45"/><text x="16.4612%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (5 samples, 0.02%)</title><rect x="16.4129%" y="453" width="0.0174%" height="15" fill="rgb(243,32,47)" fg:x="4721" fg:w="5"/><text x="16.6629%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (19 samples, 0.07%)</title><rect x="16.3677%" y="485" width="0.0661%" height="15" fill="rgb(247,202,23)" fg:x="4708" fg:w="19"/><text x="16.6177%" y="495.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (17 samples, 0.06%)</title><rect x="16.3746%" y="469" width="0.0591%" height="15" fill="rgb(219,102,11)" fg:x="4710" fg:w="17"/><text x="16.6246%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (8 samples, 0.03%)</title><rect x="16.4998%" y="469" width="0.0278%" height="15" fill="rgb(243,110,44)" fg:x="4746" fg:w="8"/><text x="16.7498%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (89 samples, 0.31%)</title><rect x="17.0456%" y="421" width="0.3094%" height="15" fill="rgb(222,74,54)" fg:x="4903" fg:w="89"/><text x="17.2956%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (3 samples, 0.01%)</title><rect x="19.6078%" y="309" width="0.0104%" height="15" fill="rgb(216,99,12)" fg:x="5640" fg:w="3"/><text x="19.8578%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (110 samples, 0.38%)</title><rect x="19.6183%" y="309" width="0.3824%" height="15" fill="rgb(226,22,26)" fg:x="5643" fg:w="110"/><text x="19.8683%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (108 samples, 0.38%)</title><rect x="20.2962%" y="293" width="0.3755%" height="15" fill="rgb(217,163,10)" fg:x="5838" fg:w="108"/><text x="20.5462%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (354 samples, 1.23%)</title><rect x="20.0007%" y="309" width="1.2307%" height="15" fill="rgb(213,25,53)" fg:x="5753" fg:w="354"/><text x="20.2507%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (161 samples, 0.56%)</title><rect x="20.6717%" y="293" width="0.5597%" height="15" fill="rgb(252,105,26)" fg:x="5946" fg:w="161"/><text x="20.9217%" y="303.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (11 samples, 0.04%)</title><rect x="21.1932%" y="277" width="0.0382%" height="15" fill="rgb(220,39,43)" fg:x="6096" fg:w="11"/><text x="21.4432%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (553 samples, 1.92%)</title><rect x="19.3228%" y="325" width="1.9225%" height="15" fill="rgb(229,68,48)" fg:x="5558" fg:w="553"/><text x="19.5728%" y="335.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4 samples, 0.01%)</title><rect x="21.2314%" y="309" width="0.0139%" height="15" fill="rgb(252,8,32)" fg:x="6107" fg:w="4"/><text x="21.4814%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.03%)</title><rect x="21.2453%" y="325" width="0.0313%" height="15" fill="rgb(223,20,43)" fg:x="6111" fg:w="9"/><text x="21.4953%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.05%)</title><rect x="22.0553%" y="309" width="0.0452%" height="15" fill="rgb(229,81,49)" fg:x="6344" fg:w="13"/><text x="22.3053%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.02%)</title><rect x="22.0832%" y="293" width="0.0174%" height="15" fill="rgb(236,28,36)" fg:x="6352" fg:w="5"/><text x="22.3332%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (241 samples, 0.84%)</title><rect x="21.2766%" y="325" width="0.8379%" height="15" fill="rgb(249,185,26)" fg:x="6120" fg:w="241"/><text x="21.5266%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.01%)</title><rect x="22.1040%" y="309" width="0.0104%" height="15" fill="rgb(249,174,33)" fg:x="6358" fg:w="3"/><text x="22.3540%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,019 samples, 3.54%)</title><rect x="18.6483%" y="357" width="3.5426%" height="15" fill="rgb(233,201,37)" fg:x="5364" fg:w="1019"/><text x="18.8983%" y="367.50">&lt;has..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (920 samples, 3.20%)</title><rect x="18.9925%" y="341" width="3.1984%" height="15" fill="rgb(221,78,26)" fg:x="5463" fg:w="920"/><text x="19.2425%" y="351.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (22 samples, 0.08%)</title><rect x="22.1144%" y="325" width="0.0765%" height="15" fill="rgb(250,127,30)" fg:x="6361" fg:w="22"/><text x="22.3644%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (51 samples, 0.18%)</title><rect x="22.4621%" y="325" width="0.1773%" height="15" fill="rgb(230,49,44)" fg:x="6461" fg:w="51"/><text x="22.7121%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28 samples, 0.10%)</title><rect x="22.5421%" y="309" width="0.0973%" height="15" fill="rgb(229,67,23)" fg:x="6484" fg:w="28"/><text x="22.7921%" y="319.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,521 samples, 5.29%)</title><rect x="17.3550%" y="421" width="5.2879%" height="15" fill="rgb(249,83,47)" fg:x="4992" fg:w="1521"/><text x="17.6050%" y="431.50">&lt;std::..</text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,521 samples, 5.29%)</title><rect x="17.3550%" y="405" width="5.2879%" height="15" fill="rgb(215,43,3)" fg:x="4992" fg:w="1521"/><text x="17.6050%" y="415.50">&lt;hashb..</text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,515 samples, 5.27%)</title><rect x="17.3759%" y="389" width="5.2670%" height="15" fill="rgb(238,154,13)" fg:x="4998" fg:w="1515"/><text x="17.6259%" y="399.50">&lt;hashb..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,366 samples, 4.75%)</title><rect x="17.8939%" y="373" width="4.7490%" height="15" fill="rgb(219,56,2)" fg:x="5147" fg:w="1366"/><text x="18.1439%" y="383.50">&lt;hashb..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (130 samples, 0.45%)</title><rect x="22.1909%" y="357" width="0.4520%" height="15" fill="rgb(233,0,4)" fg:x="6383" fg:w="130"/><text x="22.4409%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (65 samples, 0.23%)</title><rect x="22.4169%" y="341" width="0.2260%" height="15" fill="rgb(235,30,7)" fg:x="6448" fg:w="65"/><text x="22.6669%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (24 samples, 0.08%)</title><rect x="22.8098%" y="373" width="0.0834%" height="15" fill="rgb(250,79,13)" fg:x="6561" fg:w="24"/><text x="23.0598%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key (25 samples, 0.09%)</title><rect x="23.2409%" y="357" width="0.0869%" height="15" fill="rgb(211,146,34)" fg:x="6685" fg:w="25"/><text x="23.4909%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (122 samples, 0.42%)</title><rect x="28.8347%" y="261" width="0.4241%" height="15" fill="rgb(228,22,38)" fg:x="8294" fg:w="122"/><text x="29.0847%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,111 samples, 3.86%)</title><rect x="25.4485%" y="277" width="3.8625%" height="15" fill="rgb(235,168,5)" fg:x="7320" fg:w="1111"/><text x="25.6985%" y="287.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 0.05%)</title><rect x="29.2588%" y="261" width="0.0521%" height="15" fill="rgb(221,155,16)" fg:x="8416" fg:w="15"/><text x="29.5088%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (334 samples, 1.16%)</title><rect x="39.0106%" y="261" width="1.1612%" height="15" fill="rgb(215,215,53)" fg:x="11221" fg:w="334"/><text x="39.2606%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4,812 samples, 16.73%)</title><rect x="23.6302%" y="325" width="16.7292%" height="15" fill="rgb(223,4,10)" fg:x="6797" fg:w="4812"/><text x="23.8802%" y="335.50">&lt;std::collections::hash::m..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,794 samples, 16.67%)</title><rect x="23.6928%" y="309" width="16.6667%" height="15" fill="rgb(234,103,6)" fg:x="6815" fg:w="4794"/><text x="23.9428%" y="319.50">&lt;core::hash::sip::SipHashe..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,794 samples, 16.67%)</title><rect x="23.6928%" y="293" width="16.6667%" height="15" fill="rgb(227,97,0)" fg:x="6815" fg:w="4794"/><text x="23.9428%" y="303.50">&lt;core::hash::sip::Hasher&lt;S..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,178 samples, 11.05%)</title><rect x="29.3109%" y="277" width="11.0485%" height="15" fill="rgb(234,150,53)" fg:x="8431" fg:w="3178"/><text x="29.5609%" y="287.50">&lt;core::hash::sip..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (54 samples, 0.19%)</title><rect x="40.1717%" y="261" width="0.1877%" height="15" fill="rgb(228,201,54)" fg:x="11555" fg:w="54"/><text x="40.4217%" y="271.50"></text></g><g><title>[libc.so.6] (533 samples, 1.85%)</title><rect x="40.7210%" y="309" width="1.8530%" height="15" fill="rgb(222,22,37)" fg:x="11713" fg:w="533"/><text x="40.9710%" y="319.50">[..</text></g><g><title>[libc.so.6] (524 samples, 1.82%)</title><rect x="42.6019%" y="293" width="1.8217%" height="15" fill="rgb(237,53,32)" fg:x="12254" fg:w="524"/><text x="42.8519%" y="303.50">[..</text></g><g><title>[libc.so.6] (605 samples, 2.10%)</title><rect x="45.0980%" y="277" width="2.1033%" height="15" fill="rgb(233,25,53)" fg:x="12972" fg:w="605"/><text x="45.3480%" y="287.50">[..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (120 samples, 0.42%)</title><rect x="47.2014%" y="277" width="0.4172%" height="15" fill="rgb(210,40,34)" fg:x="13577" fg:w="120"/><text x="47.4514%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (931 samples, 3.24%)</title><rect x="44.4236%" y="293" width="3.2367%" height="15" fill="rgb(241,220,44)" fg:x="12778" fg:w="931"/><text x="44.6736%" y="303.50">cor..</text></g><g><title>memcpy@plt (12 samples, 0.04%)</title><rect x="47.6186%" y="277" width="0.0417%" height="15" fill="rgb(235,28,35)" fg:x="13697" fg:w="12"/><text x="47.8686%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,114 samples, 7.35%)</title><rect x="40.3595%" y="325" width="7.3495%" height="15" fill="rgb(210,56,17)" fg:x="11609" fg:w="2114"/><text x="40.6095%" y="335.50">&lt;std::coll..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,477 samples, 5.13%)</title><rect x="42.5741%" y="309" width="5.1349%" height="15" fill="rgb(224,130,29)" fg:x="12246" fg:w="1477"/><text x="42.8241%" y="319.50">core::..</text></g><g><title>memcpy@plt (14 samples, 0.05%)</title><rect x="47.6603%" y="293" width="0.0487%" height="15" fill="rgb(235,212,8)" fg:x="13709" fg:w="14"/><text x="47.9103%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (205 samples, 0.71%)</title><rect x="52.9725%" y="213" width="0.7127%" height="15" fill="rgb(223,33,50)" fg:x="15237" fg:w="205"/><text x="53.2225%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,158 samples, 4.03%)</title><rect x="49.7949%" y="229" width="4.0259%" height="15" fill="rgb(219,149,13)" fg:x="14323" fg:w="1158"/><text x="50.0449%" y="239.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.14%)</title><rect x="53.6852%" y="213" width="0.1356%" height="15" fill="rgb(250,156,29)" fg:x="15442" fg:w="39"/><text x="53.9352%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (95 samples, 0.33%)</title><rect x="53.8207%" y="229" width="0.3303%" height="15" fill="rgb(216,193,19)" fg:x="15481" fg:w="95"/><text x="54.0707%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.06%)</title><rect x="54.0884%" y="213" width="0.0626%" height="15" fill="rgb(216,135,14)" fg:x="15558" fg:w="18"/><text x="54.3384%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.19%)</title><rect x="54.1510%" y="229" width="0.1912%" height="15" fill="rgb(241,47,5)" fg:x="15576" fg:w="55"/><text x="54.4010%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.04%)</title><rect x="54.3422%" y="229" width="0.0382%" height="15" fill="rgb(233,42,35)" fg:x="15631" fg:w="11"/><text x="54.5922%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (8,957 samples, 31.14%)</title><rect x="23.3278%" y="357" width="31.1396%" height="15" fill="rgb(231,13,6)" fg:x="6710" fg:w="8957"/><text x="23.5778%" y="367.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (8,955 samples, 31.13%)</title><rect x="23.3347%" y="341" width="31.1327%" height="15" fill="rgb(207,181,40)" fg:x="6712" fg:w="8955"/><text x="23.5847%" y="351.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,944 samples, 6.76%)</title><rect x="47.7089%" y="325" width="6.7584%" height="15" fill="rgb(254,173,49)" fg:x="13723" fg:w="1944"/><text x="47.9589%" y="335.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1,903 samples, 6.62%)</title><rect x="47.8515%" y="309" width="6.6159%" height="15" fill="rgb(221,1,38)" fg:x="13764" fg:w="1903"/><text x="48.1015%" y="319.50">core::has..</text></g><g><title>core::hash::Hasher::write_u64 (1,873 samples, 6.51%)</title><rect x="47.9558%" y="293" width="6.5116%" height="15" fill="rgb(206,124,46)" fg:x="13794" fg:w="1873"/><text x="48.2058%" y="303.50">core::has..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,824 samples, 6.34%)</title><rect x="48.1261%" y="277" width="6.3413%" height="15" fill="rgb(249,21,11)" fg:x="13843" fg:w="1824"/><text x="48.3761%" y="287.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,789 samples, 6.22%)</title><rect x="48.2478%" y="261" width="6.2196%" height="15" fill="rgb(222,201,40)" fg:x="13878" fg:w="1789"/><text x="48.4978%" y="271.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,784 samples, 6.20%)</title><rect x="48.2652%" y="245" width="6.2022%" height="15" fill="rgb(235,61,29)" fg:x="13883" fg:w="1784"/><text x="48.5152%" y="255.50">&lt;core::h..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (25 samples, 0.09%)</title><rect x="54.3805%" y="229" width="0.0869%" height="15" fill="rgb(219,207,3)" fg:x="15642" fg:w="25"/><text x="54.6305%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (23 samples, 0.08%)</title><rect x="54.6308%" y="309" width="0.0800%" height="15" fill="rgb(222,56,46)" fg:x="15714" fg:w="23"/><text x="54.8808%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (21 samples, 0.07%)</title><rect x="54.6377%" y="293" width="0.0730%" height="15" fill="rgb(239,76,54)" fg:x="15716" fg:w="21"/><text x="54.8877%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (30 samples, 0.10%)</title><rect x="54.6169%" y="341" width="0.1043%" height="15" fill="rgb(231,124,27)" fg:x="15710" fg:w="30"/><text x="54.8669%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (30 samples, 0.10%)</title><rect x="54.6169%" y="325" width="0.1043%" height="15" fill="rgb(249,195,6)" fg:x="15710" fg:w="30"/><text x="54.8669%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="54.7107%" y="309" width="0.0104%" height="15" fill="rgb(237,174,47)" fg:x="15737" fg:w="3"/><text x="54.9607%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.01%)</title><rect x="55.1697%" y="293" width="0.0139%" height="15" fill="rgb(206,201,31)" fg:x="15869" fg:w="4"/><text x="55.4197%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (42 samples, 0.15%)</title><rect x="55.0410%" y="325" width="0.1460%" height="15" fill="rgb(231,57,52)" fg:x="15832" fg:w="42"/><text x="55.2910%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (9 samples, 0.03%)</title><rect x="55.1558%" y="309" width="0.0313%" height="15" fill="rgb(248,177,22)" fg:x="15865" fg:w="9"/><text x="55.4058%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (194 samples, 0.67%)</title><rect x="58.5350%" y="309" width="0.6745%" height="15" fill="rgb(215,211,37)" fg:x="16837" fg:w="194"/><text x="58.7850%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (51 samples, 0.18%)</title><rect x="60.0820%" y="293" width="0.1773%" height="15" fill="rgb(241,128,51)" fg:x="17282" fg:w="51"/><text x="60.3320%" y="303.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (110 samples, 0.38%)</title><rect x="60.4575%" y="277" width="0.3824%" height="15" fill="rgb(227,165,31)" fg:x="17390" fg:w="110"/><text x="60.7075%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (512 samples, 1.78%)</title><rect x="59.2094%" y="309" width="1.7800%" height="15" fill="rgb(228,167,24)" fg:x="17031" fg:w="512"/><text x="59.4594%" y="319.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (210 samples, 0.73%)</title><rect x="60.2594%" y="293" width="0.7301%" height="15" fill="rgb(228,143,12)" fg:x="17333" fg:w="210"/><text x="60.5094%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (43 samples, 0.15%)</title><rect x="60.8399%" y="277" width="0.1495%" height="15" fill="rgb(249,149,8)" fg:x="17500" fg:w="43"/><text x="61.0899%" y="287.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (8 samples, 0.03%)</title><rect x="60.9616%" y="261" width="0.0278%" height="15" fill="rgb(243,35,44)" fg:x="17535" fg:w="8"/><text x="61.2116%" y="271.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (10 samples, 0.03%)</title><rect x="61.1911%" y="261" width="0.0348%" height="15" fill="rgb(246,89,9)" fg:x="17601" fg:w="10"/><text x="61.4411%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (68 samples, 0.24%)</title><rect x="61.0381%" y="293" width="0.2364%" height="15" fill="rgb(233,213,13)" fg:x="17557" fg:w="68"/><text x="61.2881%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (47 samples, 0.16%)</title><rect x="61.1111%" y="277" width="0.1634%" height="15" fill="rgb(233,141,41)" fg:x="17578" fg:w="47"/><text x="61.3611%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.05%)</title><rect x="61.2258%" y="261" width="0.0487%" height="15" fill="rgb(239,167,4)" fg:x="17611" fg:w="14"/><text x="61.4758%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (13 samples, 0.05%)</title><rect x="61.2293%" y="245" width="0.0452%" height="15" fill="rgb(209,217,16)" fg:x="17612" fg:w="13"/><text x="61.4793%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13 samples, 0.05%)</title><rect x="61.2745%" y="293" width="0.0452%" height="15" fill="rgb(219,88,35)" fg:x="17625" fg:w="13"/><text x="61.5245%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13 samples, 0.05%)</title><rect x="61.2745%" y="277" width="0.0452%" height="15" fill="rgb(220,193,23)" fg:x="17625" fg:w="13"/><text x="61.5245%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.01%)</title><rect x="61.5040%" y="261" width="0.0139%" height="15" fill="rgb(230,90,52)" fg:x="17691" fg:w="4"/><text x="61.7540%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (45 samples, 0.16%)</title><rect x="61.3684%" y="277" width="0.1564%" height="15" fill="rgb(252,106,19)" fg:x="17652" fg:w="45"/><text x="61.6184%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (155 samples, 0.54%)</title><rect x="60.9929%" y="309" width="0.5389%" height="15" fill="rgb(206,74,20)" fg:x="17544" fg:w="155"/><text x="61.2429%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (61 samples, 0.21%)</title><rect x="61.3197%" y="293" width="0.2121%" height="15" fill="rgb(230,138,44)" fg:x="17638" fg:w="61"/><text x="61.5697%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="61.5631%" y="293" width="0.0104%" height="15" fill="rgb(235,182,43)" fg:x="17708" fg:w="3"/><text x="61.8131%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (18 samples, 0.06%)</title><rect x="61.5318%" y="309" width="0.0626%" height="15" fill="rgb(242,16,51)" fg:x="17699" fg:w="18"/><text x="61.7818%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (6 samples, 0.02%)</title><rect x="61.5735%" y="293" width="0.0209%" height="15" fill="rgb(248,9,4)" fg:x="17711" fg:w="6"/><text x="61.8235%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (21 samples, 0.07%)</title><rect x="61.5944%" y="309" width="0.0730%" height="15" fill="rgb(210,31,22)" fg:x="17717" fg:w="21"/><text x="61.8444%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (19 samples, 0.07%)</title><rect x="61.6674%" y="309" width="0.0661%" height="15" fill="rgb(239,54,39)" fg:x="17738" fg:w="19"/><text x="61.9174%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (25 samples, 0.09%)</title><rect x="61.7334%" y="309" width="0.0869%" height="15" fill="rgb(230,99,41)" fg:x="17757" fg:w="25"/><text x="61.9834%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (45 samples, 0.16%)</title><rect x="64.8589%" y="277" width="0.1564%" height="15" fill="rgb(253,106,12)" fg:x="18656" fg:w="45"/><text x="65.1089%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,022 samples, 3.55%)</title><rect x="61.8203%" y="309" width="3.5531%" height="15" fill="rgb(213,46,41)" fg:x="17782" fg:w="1022"/><text x="62.0703%" y="319.50">hash..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (836 samples, 2.91%)</title><rect x="62.4670%" y="293" width="2.9064%" height="15" fill="rgb(215,133,35)" fg:x="17968" fg:w="836"/><text x="62.7170%" y="303.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (103 samples, 0.36%)</title><rect x="65.0153%" y="277" width="0.3581%" height="15" fill="rgb(213,28,5)" fg:x="18701" fg:w="103"/><text x="65.2653%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (687 samples, 2.39%)</title><rect x="68.1998%" y="293" width="2.3884%" height="15" fill="rgb(215,77,49)" fg:x="19617" fg:w="687"/><text x="68.4498%" y="303.50">co..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (158 samples, 0.55%)</title><rect x="70.0389%" y="277" width="0.5493%" height="15" fill="rgb(248,100,22)" fg:x="20146" fg:w="158"/><text x="70.2889%" y="287.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (67 samples, 0.23%)</title><rect x="73.9709%" y="277" width="0.2329%" height="15" fill="rgb(208,67,9)" fg:x="21277" fg:w="67"/><text x="74.2209%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,139 samples, 3.96%)</title><rect x="70.5882%" y="293" width="3.9598%" height="15" fill="rgb(219,133,21)" fg:x="20304" fg:w="1139"/><text x="70.8382%" y="303.50">core..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (99 samples, 0.34%)</title><rect x="74.2039%" y="277" width="0.3442%" height="15" fill="rgb(246,46,29)" fg:x="21344" fg:w="99"/><text x="74.4539%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,306 samples, 11.49%)</title><rect x="65.3734%" y="309" width="11.4935%" height="15" fill="rgb(246,185,52)" fg:x="18804" fg:w="3306"/><text x="65.6234%" y="319.50">hashbrown::raw::s..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (667 samples, 2.32%)</title><rect x="74.5480%" y="293" width="2.3189%" height="15" fill="rgb(252,136,11)" fg:x="21443" fg:w="667"/><text x="74.7980%" y="303.50">c..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (620 samples, 2.16%)</title><rect x="74.7114%" y="277" width="2.1555%" height="15" fill="rgb(219,138,53)" fg:x="21490" fg:w="620"/><text x="74.9614%" y="287.50">c..</text></g><g><title>core::core_arch::simd::i8x16::new (64 samples, 0.22%)</title><rect x="76.6444%" y="261" width="0.2225%" height="15" fill="rgb(211,51,23)" fg:x="22046" fg:w="64"/><text x="76.8944%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (623 samples, 2.17%)</title><rect x="79.5543%" y="277" width="2.1659%" height="15" fill="rgb(247,221,28)" fg:x="22883" fg:w="623"/><text x="79.8043%" y="287.50">c..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (166 samples, 0.58%)</title><rect x="81.1431%" y="261" width="0.5771%" height="15" fill="rgb(251,222,45)" fg:x="23340" fg:w="166"/><text x="81.3931%" y="271.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (72 samples, 0.25%)</title><rect x="84.8804%" y="261" width="0.2503%" height="15" fill="rgb(217,162,53)" fg:x="24415" fg:w="72"/><text x="85.1304%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,079 samples, 3.75%)</title><rect x="81.7202%" y="277" width="3.7512%" height="15" fill="rgb(229,93,14)" fg:x="23506" fg:w="1079"/><text x="81.9702%" y="287.50">core..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (98 samples, 0.34%)</title><rect x="85.1307%" y="261" width="0.3407%" height="15" fill="rgb(209,67,49)" fg:x="24487" fg:w="98"/><text x="85.3807%" y="271.50"></text></g><g><title>&lt;std::collections::hash::set::Intersection&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (20,589 samples, 71.58%)</title><rect x="16.6354%" y="437" width="71.5791%" height="15" fill="rgb(213,87,29)" fg:x="4785" fg:w="20589"/><text x="16.8854%" y="447.50">&lt;std::collections::hash::set::Intersection&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (18,861 samples, 65.57%)</title><rect x="22.6429%" y="421" width="65.5715%" height="15" fill="rgb(205,151,52)" fg:x="6513" fg:w="18861"/><text x="22.8929%" y="431.50">std::collections::hash::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (18,861 samples, 65.57%)</title><rect x="22.6429%" y="405" width="65.5715%" height="15" fill="rgb(253,215,39)" fg:x="6513" fg:w="18861"/><text x="22.8929%" y="415.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (18,861 samples, 65.57%)</title><rect x="22.6429%" y="389" width="65.5715%" height="15" fill="rgb(221,220,41)" fg:x="6513" fg:w="18861"/><text x="22.8929%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18,789 samples, 65.32%)</title><rect x="22.8932%" y="373" width="65.3212%" height="15" fill="rgb(218,133,21)" fg:x="6585" fg:w="18789"/><text x="23.1432%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,707 samples, 33.75%)</title><rect x="54.4674%" y="357" width="33.7470%" height="15" fill="rgb(221,193,43)" fg:x="15667" fg:w="9707"/><text x="54.7174%" y="367.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,634 samples, 33.49%)</title><rect x="54.7212%" y="341" width="33.4933%" height="15" fill="rgb(240,128,52)" fg:x="15740" fg:w="9634"/><text x="54.9712%" y="351.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9,500 samples, 33.03%)</title><rect x="55.1870%" y="325" width="33.0274%" height="15" fill="rgb(253,114,12)" fg:x="15874" fg:w="9500"/><text x="55.4370%" y="335.50">hashbrown::raw::RawTableInner&lt;A&gt;::find_inner</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3,264 samples, 11.35%)</title><rect x="76.8669%" y="309" width="11.3475%" height="15" fill="rgb(215,223,47)" fg:x="22110" fg:w="3264"/><text x="77.1169%" y="319.50">hashbrown::raw::s..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,097 samples, 10.77%)</title><rect x="77.4475%" y="293" width="10.7669%" height="15" fill="rgb(248,225,23)" fg:x="22277" fg:w="3097"/><text x="77.6975%" y="303.50">hashbrown::raw::..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (789 samples, 2.74%)</title><rect x="85.4714%" y="277" width="2.7430%" height="15" fill="rgb(250,108,0)" fg:x="24585" fg:w="789"/><text x="85.7214%" y="287.50">co..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (736 samples, 2.56%)</title><rect x="85.6557%" y="261" width="2.5588%" height="15" fill="rgb(228,208,7)" fg:x="24638" fg:w="736"/><text x="85.9057%" y="271.50">co..</text></g><g><title>core::core_arch::simd::i8x16::new (67 samples, 0.23%)</title><rect x="87.9815%" y="245" width="0.2329%" height="15" fill="rgb(244,45,10)" fg:x="25307" fg:w="67"/><text x="88.2315%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (20,630 samples, 71.72%)</title><rect x="16.5276%" y="469" width="71.7216%" height="15" fill="rgb(207,125,25)" fg:x="4754" fg:w="20630"/><text x="16.7776%" y="479.50">core::iter::traits::iterator::Iterator::count</text></g><g><title>core::iter::traits::iterator::Iterator::fold (20,626 samples, 71.71%)</title><rect x="16.5415%" y="453" width="71.7077%" height="15" fill="rgb(210,195,18)" fg:x="4758" fg:w="20626"/><text x="16.7915%" y="463.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::count::_{{closure}} (10 samples, 0.03%)</title><rect x="88.2144%" y="437" width="0.0348%" height="15" fill="rgb(249,80,12)" fg:x="25374" fg:w="10"/><text x="88.4644%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (22 samples, 0.08%)</title><rect x="88.2492%" y="469" width="0.0765%" height="15" fill="rgb(221,65,9)" fg:x="25384" fg:w="22"/><text x="88.4992%" y="479.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (22 samples, 0.08%)</title><rect x="88.2492%" y="453" width="0.0765%" height="15" fill="rgb(235,49,36)" fg:x="25384" fg:w="22"/><text x="88.4992%" y="463.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::new (6 samples, 0.02%)</title><rect x="88.3257%" y="469" width="0.0209%" height="15" fill="rgb(225,32,20)" fg:x="25406" fg:w="6"/><text x="88.5757%" y="479.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.01%)</title><rect x="88.3987%" y="421" width="0.0139%" height="15" fill="rgb(215,141,46)" fg:x="25427" fg:w="4"/><text x="88.6487%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (8 samples, 0.03%)</title><rect x="88.5934%" y="325" width="0.0278%" height="15" fill="rgb(250,160,47)" fg:x="25483" fg:w="8"/><text x="88.8434%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (6 samples, 0.02%)</title><rect x="88.6212%" y="325" width="0.0209%" height="15" fill="rgb(216,222,40)" fg:x="25491" fg:w="6"/><text x="88.8712%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.12%)</title><rect x="88.5447%" y="357" width="0.1217%" height="15" fill="rgb(234,217,39)" fg:x="25469" fg:w="35"/><text x="88.7947%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::size_hint (33 samples, 0.11%)</title><rect x="88.5517%" y="341" width="0.1147%" height="15" fill="rgb(207,178,40)" fg:x="25471" fg:w="33"/><text x="88.8017%" y="351.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (7 samples, 0.02%)</title><rect x="88.6421%" y="325" width="0.0243%" height="15" fill="rgb(221,136,13)" fg:x="25497" fg:w="7"/><text x="88.8921%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.01%)</title><rect x="88.6664%" y="357" width="0.0104%" height="15" fill="rgb(249,199,10)" fg:x="25504" fg:w="3"/><text x="88.9164%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.01%)</title><rect x="88.6664%" y="341" width="0.0104%" height="15" fill="rgb(249,222,13)" fg:x="25504" fg:w="3"/><text x="88.9164%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="88.6768%" y="357" width="0.0104%" height="15" fill="rgb(244,185,38)" fg:x="25507" fg:w="3"/><text x="88.9268%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (4 samples, 0.01%)</title><rect x="89.0001%" y="277" width="0.0139%" height="15" fill="rgb(236,202,9)" fg:x="25600" fg:w="4"/><text x="89.2501%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.01%)</title><rect x="89.0140%" y="277" width="0.0104%" height="15" fill="rgb(250,229,37)" fg:x="25604" fg:w="3"/><text x="89.2640%" y="287.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (4 samples, 0.01%)</title><rect x="89.0245%" y="277" width="0.0139%" height="15" fill="rgb(206,174,23)" fg:x="25607" fg:w="4"/><text x="89.2745%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (26 samples, 0.09%)</title><rect x="89.1183%" y="245" width="0.0904%" height="15" fill="rgb(211,33,43)" fg:x="25634" fg:w="26"/><text x="89.3683%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (13 samples, 0.05%)</title><rect x="89.1635%" y="229" width="0.0452%" height="15" fill="rgb(245,58,50)" fg:x="25647" fg:w="13"/><text x="89.4135%" y="239.50"></text></g><g><title>core::ptr::write (4 samples, 0.01%)</title><rect x="89.1948%" y="213" width="0.0139%" height="15" fill="rgb(244,68,36)" fg:x="25656" fg:w="4"/><text x="89.4448%" y="223.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;usize&gt; for u64&gt;::try_from (6 samples, 0.02%)</title><rect x="89.2331%" y="229" width="0.0209%" height="15" fill="rgb(232,229,15)" fg:x="25667" fg:w="6"/><text x="89.4831%" y="239.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (77 samples, 0.27%)</title><rect x="89.0384%" y="277" width="0.2677%" height="15" fill="rgb(254,30,23)" fg:x="25611" fg:w="77"/><text x="89.2884%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (69 samples, 0.24%)</title><rect x="89.0662%" y="261" width="0.2399%" height="15" fill="rgb(235,160,14)" fg:x="25619" fg:w="69"/><text x="89.3162%" y="271.50"></text></g><g><title>day04::Card::win_more_cards::_{{closure}} (28 samples, 0.10%)</title><rect x="89.2087%" y="245" width="0.0973%" height="15" fill="rgb(212,155,44)" fg:x="25660" fg:w="28"/><text x="89.4587%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (15 samples, 0.05%)</title><rect x="89.2539%" y="229" width="0.0521%" height="15" fill="rgb(226,2,50)" fg:x="25673" fg:w="15"/><text x="89.5039%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (188 samples, 0.65%)</title><rect x="88.7811%" y="309" width="0.6536%" height="15" fill="rgb(234,177,6)" fg:x="25537" fg:w="188"/><text x="89.0311%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (186 samples, 0.65%)</title><rect x="88.7881%" y="293" width="0.6466%" height="15" fill="rgb(217,24,9)" fg:x="25539" fg:w="186"/><text x="89.0381%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::ops::try_trait::NeverShortCircuit&lt;()&gt;::wrap_mut_2&lt;(),usize,core::iter::adapters::map::map_fold&lt;usize,u64,(),day04::Card::win_more_cards::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;u64,alloc::vec::Vec&lt;u64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::ops::range::RangeInclusive&lt;usize&gt;,day04::Card::win_more_cards::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (37 samples, 0.13%)</title><rect x="89.3061%" y="277" width="0.1286%" height="15" fill="rgb(220,13,46)" fg:x="25688" fg:w="37"/><text x="89.5561%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;usize,u64,(),day04::Card::win_more_cards::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;u64,alloc::vec::Vec&lt;u64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::ops::range::RangeInclusive&lt;usize&gt;,day04::Card::win_more_cards::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (28 samples, 0.10%)</title><rect x="89.3374%" y="261" width="0.0973%" height="15" fill="rgb(239,221,27)" fg:x="25697" fg:w="28"/><text x="89.5874%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u64,alloc::vec::Vec&lt;u64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::ops::range::RangeInclusive&lt;usize&gt;,day04::Card::win_more_cards::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (21 samples, 0.07%)</title><rect x="89.3617%" y="245" width="0.0730%" height="15" fill="rgb(222,198,25)" fg:x="25704" fg:w="21"/><text x="89.6117%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::ops::range::RangeInclusive&lt;usize&gt;,day04::Card::win_more_cards::{{closure}}&gt;&gt;::{{closure}}&gt; (13 samples, 0.05%)</title><rect x="89.3895%" y="229" width="0.0452%" height="15" fill="rgb(211,99,13)" fg:x="25712" fg:w="13"/><text x="89.6395%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (12 samples, 0.04%)</title><rect x="89.3930%" y="213" width="0.0417%" height="15" fill="rgb(232,111,31)" fg:x="25713" fg:w="12"/><text x="89.6430%" y="223.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="89.4243%" y="197" width="0.0104%" height="15" fill="rgb(245,82,37)" fg:x="25722" fg:w="3"/><text x="89.6743%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (225 samples, 0.78%)</title><rect x="88.7255%" y="341" width="0.7822%" height="15" fill="rgb(227,149,46)" fg:x="25521" fg:w="225"/><text x="88.9755%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (210 samples, 0.73%)</title><rect x="88.7776%" y="325" width="0.7301%" height="15" fill="rgb(218,36,50)" fg:x="25536" fg:w="210"/><text x="89.0276%" y="335.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2 (21 samples, 0.07%)</title><rect x="89.4347%" y="309" width="0.0730%" height="15" fill="rgb(226,80,48)" fg:x="25725" fg:w="21"/><text x="89.6847%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (317 samples, 1.10%)</title><rect x="88.4717%" y="389" width="1.1021%" height="15" fill="rgb(238,224,15)" fg:x="25448" fg:w="317"/><text x="88.7217%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (315 samples, 1.10%)</title><rect x="88.4787%" y="373" width="1.0951%" height="15" fill="rgb(241,136,10)" fg:x="25450" fg:w="315"/><text x="88.7287%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (255 samples, 0.89%)</title><rect x="88.6872%" y="357" width="0.8865%" height="15" fill="rgb(208,32,45)" fg:x="25510" fg:w="255"/><text x="88.9372%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (19 samples, 0.07%)</title><rect x="89.5077%" y="341" width="0.0661%" height="15" fill="rgb(207,135,9)" fg:x="25746" fg:w="19"/><text x="89.7577%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (8 samples, 0.03%)</title><rect x="89.6364%" y="357" width="0.0278%" height="15" fill="rgb(206,86,44)" fg:x="25783" fg:w="8"/><text x="89.8864%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.11%)</title><rect x="89.5738%" y="389" width="0.1113%" height="15" fill="rgb(245,177,15)" fg:x="25765" fg:w="32"/><text x="89.8238%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::size_hint (29 samples, 0.10%)</title><rect x="89.5842%" y="373" width="0.1008%" height="15" fill="rgb(206,64,50)" fg:x="25768" fg:w="29"/><text x="89.8342%" y="383.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (5 samples, 0.02%)</title><rect x="89.6676%" y="357" width="0.0174%" height="15" fill="rgb(234,36,40)" fg:x="25792" fg:w="5"/><text x="89.9176%" y="367.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.06%)</title><rect x="89.8728%" y="293" width="0.0591%" height="15" fill="rgb(213,64,8)" fg:x="25851" fg:w="17"/><text x="90.1228%" y="303.50"></text></g><g><title>malloc (10 samples, 0.03%)</title><rect x="89.8971%" y="277" width="0.0348%" height="15" fill="rgb(210,75,36)" fg:x="25858" fg:w="10"/><text x="90.1471%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.15%)</title><rect x="89.8137%" y="325" width="0.1530%" height="15" fill="rgb(229,88,21)" fg:x="25834" fg:w="44"/><text x="90.0637%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.15%)</title><rect x="89.8171%" y="309" width="0.1495%" height="15" fill="rgb(252,204,47)" fg:x="25835" fg:w="43"/><text x="90.0671%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (6 samples, 0.02%)</title><rect x="89.9458%" y="293" width="0.0209%" height="15" fill="rgb(208,77,27)" fg:x="25872" fg:w="6"/><text x="90.1958%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (6 samples, 0.02%)</title><rect x="89.9458%" y="277" width="0.0209%" height="15" fill="rgb(221,76,26)" fg:x="25872" fg:w="6"/><text x="90.1958%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (6 samples, 0.02%)</title><rect x="89.9458%" y="261" width="0.0209%" height="15" fill="rgb(225,139,18)" fg:x="25872" fg:w="6"/><text x="90.1958%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (8 samples, 0.03%)</title><rect x="89.9666%" y="325" width="0.0278%" height="15" fill="rgb(230,137,11)" fg:x="25878" fg:w="8"/><text x="90.2166%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (7 samples, 0.02%)</title><rect x="89.9701%" y="309" width="0.0243%" height="15" fill="rgb(212,28,1)" fg:x="25879" fg:w="7"/><text x="90.2201%" y="319.50"></text></g><g><title>itertools::Itertools::collect_vec (479 samples, 1.67%)</title><rect x="88.3465%" y="469" width="1.6653%" height="15" fill="rgb(248,164,17)" fg:x="25412" fg:w="479"/><text x="88.5965%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (474 samples, 1.65%)</title><rect x="88.3639%" y="453" width="1.6479%" height="15" fill="rgb(222,171,42)" fg:x="25417" fg:w="474"/><text x="88.6139%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (471 samples, 1.64%)</title><rect x="88.3744%" y="437" width="1.6375%" height="15" fill="rgb(243,84,45)" fg:x="25420" fg:w="471"/><text x="88.6244%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (460 samples, 1.60%)</title><rect x="88.4126%" y="421" width="1.5992%" height="15" fill="rgb(252,49,23)" fg:x="25431" fg:w="460"/><text x="88.6626%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (458 samples, 1.59%)</title><rect x="88.4196%" y="405" width="1.5923%" height="15" fill="rgb(215,19,7)" fg:x="25433" fg:w="458"/><text x="88.6696%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (94 samples, 0.33%)</title><rect x="89.6850%" y="389" width="0.3268%" height="15" fill="rgb(238,81,41)" fg:x="25797" fg:w="94"/><text x="89.9350%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (94 samples, 0.33%)</title><rect x="89.6850%" y="373" width="0.3268%" height="15" fill="rgb(210,199,37)" fg:x="25797" fg:w="94"/><text x="89.9350%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.31%)</title><rect x="89.6989%" y="357" width="0.3129%" height="15" fill="rgb(244,192,49)" fg:x="25801" fg:w="90"/><text x="89.9489%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (88 samples, 0.31%)</title><rect x="89.7059%" y="341" width="0.3059%" height="15" fill="rgb(226,211,11)" fg:x="25803" fg:w="88"/><text x="89.9559%" y="351.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (4 samples, 0.01%)</title><rect x="89.9979%" y="325" width="0.0139%" height="15" fill="rgb(236,162,54)" fg:x="25887" fg:w="4"/><text x="90.2479%" y="335.50"></text></g><g><title>[libc.so.6] (47 samples, 0.16%)</title><rect x="90.0570%" y="453" width="0.1634%" height="15" fill="rgb(220,229,9)" fg:x="25904" fg:w="47"/><text x="90.3070%" y="463.50"></text></g><g><title>[libc.so.6] (58 samples, 0.20%)</title><rect x="90.2239%" y="437" width="0.2016%" height="15" fill="rgb(250,87,22)" fg:x="25952" fg:w="58"/><text x="90.4739%" y="447.50"></text></g><g><title>[libc.so.6] (61 samples, 0.21%)</title><rect x="90.4290%" y="421" width="0.2121%" height="15" fill="rgb(239,43,17)" fg:x="26011" fg:w="61"/><text x="90.6790%" y="431.50"></text></g><g><title>[libc.so.6] (49 samples, 0.17%)</title><rect x="90.6411%" y="405" width="0.1704%" height="15" fill="rgb(231,177,25)" fg:x="26072" fg:w="49"/><text x="90.8911%" y="415.50"></text></g><g><title>[libc.so.6] (52 samples, 0.18%)</title><rect x="90.8323%" y="389" width="0.1808%" height="15" fill="rgb(219,179,1)" fg:x="26127" fg:w="52"/><text x="91.0823%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (17 samples, 0.06%)</title><rect x="91.2808%" y="373" width="0.0591%" height="15" fill="rgb(238,219,53)" fg:x="26256" fg:w="17"/><text x="91.5308%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="91.3294%" y="357" width="0.0104%" height="15" fill="rgb(232,167,36)" fg:x="26270" fg:w="3"/><text x="91.5794%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.04%)</title><rect x="91.4685%" y="357" width="0.0417%" height="15" fill="rgb(244,19,51)" fg:x="26310" fg:w="12"/><text x="91.7185%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.02%)</title><rect x="91.5102%" y="357" width="0.0209%" height="15" fill="rgb(224,6,22)" fg:x="26322" fg:w="6"/><text x="91.7602%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (27 samples, 0.09%)</title><rect x="91.5311%" y="357" width="0.0939%" height="15" fill="rgb(224,145,5)" fg:x="26328" fg:w="27"/><text x="91.7811%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (6 samples, 0.02%)</title><rect x="91.6041%" y="341" width="0.0209%" height="15" fill="rgb(234,130,49)" fg:x="26349" fg:w="6"/><text x="91.8541%" y="351.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (5 samples, 0.02%)</title><rect x="92.1221%" y="309" width="0.0174%" height="15" fill="rgb(254,6,2)" fg:x="26498" fg:w="5"/><text x="92.3721%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (241 samples, 0.84%)</title><rect x="91.3399%" y="373" width="0.8379%" height="15" fill="rgb(208,96,46)" fg:x="26273" fg:w="241"/><text x="91.5899%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (159 samples, 0.55%)</title><rect x="91.6249%" y="357" width="0.5528%" height="15" fill="rgb(239,3,39)" fg:x="26355" fg:w="159"/><text x="91.8749%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (133 samples, 0.46%)</title><rect x="91.7153%" y="341" width="0.4624%" height="15" fill="rgb(233,210,1)" fg:x="26381" fg:w="133"/><text x="91.9653%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (124 samples, 0.43%)</title><rect x="91.7466%" y="325" width="0.4311%" height="15" fill="rgb(244,137,37)" fg:x="26390" fg:w="124"/><text x="91.9966%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (11 samples, 0.04%)</title><rect x="92.1395%" y="309" width="0.0382%" height="15" fill="rgb(240,136,2)" fg:x="26503" fg:w="11"/><text x="92.3895%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.01%)</title><rect x="92.1812%" y="357" width="0.0139%" height="15" fill="rgb(239,18,37)" fg:x="26515" fg:w="4"/><text x="92.4312%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (7 samples, 0.02%)</title><rect x="92.1777%" y="373" width="0.0243%" height="15" fill="rgb(218,185,22)" fg:x="26514" fg:w="7"/><text x="92.4277%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (403 samples, 1.40%)</title><rect x="90.8114%" y="405" width="1.4011%" height="15" fill="rgb(225,218,4)" fg:x="26121" fg:w="403"/><text x="91.0614%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (345 samples, 1.20%)</title><rect x="91.0131%" y="389" width="1.1994%" height="15" fill="rgb(230,182,32)" fg:x="26179" fg:w="345"/><text x="91.2631%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::buckets (3 samples, 0.01%)</title><rect x="92.2021%" y="373" width="0.0104%" height="15" fill="rgb(242,56,43)" fg:x="26521" fg:w="3"/><text x="92.4521%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (453 samples, 1.57%)</title><rect x="90.6411%" y="421" width="1.5749%" height="15" fill="rgb(233,99,24)" fg:x="26072" fg:w="453"/><text x="90.8911%" y="431.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (517 samples, 1.80%)</title><rect x="90.4255%" y="437" width="1.7974%" height="15" fill="rgb(234,209,42)" fg:x="26010" fg:w="517"/><text x="90.6755%" y="447.50">h..</text></g><g><title>day04::Card::win_more_cards (21,802 samples, 75.80%)</title><rect x="16.4337%" y="485" width="75.7961%" height="15" fill="rgb(227,7,12)" fg:x="4727" fg:w="21802"/><text x="16.6837%" y="495.50">day04::Card::win_more_cards</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::intersection (638 samples, 2.22%)</title><rect x="90.0118%" y="469" width="2.2181%" height="15" fill="rgb(245,203,43)" fg:x="25891" fg:w="638"/><text x="90.2618%" y="479.50">s..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (577 samples, 2.01%)</title><rect x="90.2239%" y="453" width="2.0060%" height="15" fill="rgb(238,205,33)" fg:x="25952" fg:w="577"/><text x="90.4739%" y="463.50">s..</text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (7 samples, 0.02%)</title><rect x="92.3342%" y="437" width="0.0243%" height="15" fill="rgb(231,56,7)" fg:x="26559" fg:w="7"/><text x="92.5842%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.10%)</title><rect x="92.7166%" y="341" width="0.1008%" height="15" fill="rgb(244,186,29)" fg:x="26669" fg:w="29"/><text x="92.9666%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.01%)</title><rect x="92.8035%" y="325" width="0.0139%" height="15" fill="rgb(234,111,31)" fg:x="26694" fg:w="4"/><text x="93.0535%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.02%)</title><rect x="93.3041%" y="165" width="0.0209%" height="15" fill="rgb(241,149,10)" fg:x="26838" fg:w="6"/><text x="93.5541%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (79 samples, 0.27%)</title><rect x="93.0608%" y="181" width="0.2746%" height="15" fill="rgb(249,206,44)" fg:x="26768" fg:w="79"/><text x="93.3108%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="93.3250%" y="165" width="0.0104%" height="15" fill="rgb(251,153,30)" fg:x="26844" fg:w="3"/><text x="93.5750%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.06%)</title><rect x="93.9438%" y="165" width="0.0626%" height="15" fill="rgb(239,152,38)" fg:x="27022" fg:w="18"/><text x="94.1938%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (314 samples, 1.09%)</title><rect x="92.9287%" y="229" width="1.0916%" height="15" fill="rgb(249,139,47)" fg:x="26730" fg:w="314"/><text x="93.1787%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (312 samples, 1.08%)</title><rect x="92.9356%" y="213" width="1.0847%" height="15" fill="rgb(244,64,35)" fg:x="26732" fg:w="312"/><text x="93.1856%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (312 samples, 1.08%)</title><rect x="92.9356%" y="197" width="1.0847%" height="15" fill="rgb(216,46,15)" fg:x="26732" fg:w="312"/><text x="93.1856%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (197 samples, 0.68%)</title><rect x="93.3354%" y="181" width="0.6849%" height="15" fill="rgb(250,74,19)" fg:x="26847" fg:w="197"/><text x="93.5854%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.01%)</title><rect x="94.0064%" y="165" width="0.0139%" height="15" fill="rgb(249,42,33)" fg:x="27040" fg:w="4"/><text x="94.2564%" y="175.50"></text></g><g><title>[libc.so.6] (37 samples, 0.13%)</title><rect x="94.0377%" y="213" width="0.1286%" height="15" fill="rgb(242,149,17)" fg:x="27049" fg:w="37"/><text x="94.2877%" y="223.50"></text></g><g><title>[libc.so.6] (39 samples, 0.14%)</title><rect x="94.1663%" y="197" width="0.1356%" height="15" fill="rgb(244,29,21)" fg:x="27086" fg:w="39"/><text x="94.4163%" y="207.50"></text></g><g><title>[libc.so.6] (50 samples, 0.17%)</title><rect x="94.3714%" y="181" width="0.1738%" height="15" fill="rgb(220,130,37)" fg:x="27145" fg:w="50"/><text x="94.6214%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.03%)</title><rect x="94.5453%" y="181" width="0.0313%" height="15" fill="rgb(211,67,2)" fg:x="27195" fg:w="9"/><text x="94.7953%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (81 samples, 0.28%)</title><rect x="94.3019%" y="197" width="0.2816%" height="15" fill="rgb(235,68,52)" fg:x="27125" fg:w="81"/><text x="94.5519%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (167 samples, 0.58%)</title><rect x="94.0203%" y="229" width="0.5806%" height="15" fill="rgb(246,142,3)" fg:x="27044" fg:w="167"/><text x="94.2703%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (125 samples, 0.43%)</title><rect x="94.1663%" y="213" width="0.4346%" height="15" fill="rgb(241,25,7)" fg:x="27086" fg:w="125"/><text x="94.4163%" y="223.50"></text></g><g><title>memcpy@plt (5 samples, 0.02%)</title><rect x="94.5835%" y="197" width="0.0174%" height="15" fill="rgb(242,119,39)" fg:x="27206" fg:w="5"/><text x="94.8335%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (82 samples, 0.29%)</title><rect x="94.7400%" y="133" width="0.2851%" height="15" fill="rgb(241,98,45)" fg:x="27251" fg:w="82"/><text x="94.9900%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17 samples, 0.06%)</title><rect x="94.9659%" y="117" width="0.0591%" height="15" fill="rgb(254,28,30)" fg:x="27316" fg:w="17"/><text x="95.2159%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.03%)</title><rect x="95.0250%" y="133" width="0.0348%" height="15" fill="rgb(241,142,54)" fg:x="27333" fg:w="10"/><text x="95.2750%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (620 samples, 2.16%)</title><rect x="92.9078%" y="261" width="2.1555%" height="15" fill="rgb(222,85,15)" fg:x="26724" fg:w="620"/><text x="93.1578%" y="271.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (619 samples, 2.15%)</title><rect x="92.9113%" y="245" width="2.1520%" height="15" fill="rgb(210,85,47)" fg:x="26725" fg:w="619"/><text x="93.1613%" y="255.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (133 samples, 0.46%)</title><rect x="94.6009%" y="229" width="0.4624%" height="15" fill="rgb(224,206,25)" fg:x="27211" fg:w="133"/><text x="94.8509%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (132 samples, 0.46%)</title><rect x="94.6044%" y="213" width="0.4589%" height="15" fill="rgb(243,201,19)" fg:x="27212" fg:w="132"/><text x="94.8544%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (129 samples, 0.45%)</title><rect x="94.6148%" y="197" width="0.4485%" height="15" fill="rgb(236,59,4)" fg:x="27215" fg:w="129"/><text x="94.8648%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (128 samples, 0.45%)</title><rect x="94.6183%" y="181" width="0.4450%" height="15" fill="rgb(254,179,45)" fg:x="27216" fg:w="128"/><text x="94.8683%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (125 samples, 0.43%)</title><rect x="94.6287%" y="165" width="0.4346%" height="15" fill="rgb(226,14,10)" fg:x="27219" fg:w="125"/><text x="94.8787%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (124 samples, 0.43%)</title><rect x="94.6322%" y="149" width="0.4311%" height="15" fill="rgb(244,27,41)" fg:x="27220" fg:w="124"/><text x="94.8822%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.01%)</title><rect x="95.0737%" y="245" width="0.0139%" height="15" fill="rgb(235,35,32)" fg:x="27347" fg:w="4"/><text x="95.3237%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.01%)</title><rect x="95.0737%" y="229" width="0.0139%" height="15" fill="rgb(218,68,31)" fg:x="27347" fg:w="4"/><text x="95.3237%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.01%)</title><rect x="95.0772%" y="213" width="0.0104%" height="15" fill="rgb(207,120,37)" fg:x="27348" fg:w="3"/><text x="95.3272%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.01%)</title><rect x="95.1154%" y="197" width="0.0139%" height="15" fill="rgb(227,98,0)" fg:x="27359" fg:w="4"/><text x="95.3654%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.02%)</title><rect x="95.1085%" y="229" width="0.0243%" height="15" fill="rgb(207,7,3)" fg:x="27357" fg:w="7"/><text x="95.3585%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6 samples, 0.02%)</title><rect x="95.1119%" y="213" width="0.0209%" height="15" fill="rgb(206,98,19)" fg:x="27358" fg:w="6"/><text x="95.3619%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.03%)</title><rect x="95.3588%" y="213" width="0.0278%" height="15" fill="rgb(217,5,26)" fg:x="27429" fg:w="8"/><text x="95.6088%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="95.4457%" y="197" width="0.0104%" height="15" fill="rgb(235,190,38)" fg:x="27454" fg:w="3"/><text x="95.6957%" y="207.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (23 samples, 0.08%)</title><rect x="95.4978%" y="181" width="0.0800%" height="15" fill="rgb(247,86,24)" fg:x="27469" fg:w="23"/><text x="95.7478%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.25%)</title><rect x="95.3866%" y="213" width="0.2503%" height="15" fill="rgb(205,101,16)" fg:x="27437" fg:w="72"/><text x="95.6366%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (52 samples, 0.18%)</title><rect x="95.4561%" y="197" width="0.1808%" height="15" fill="rgb(246,168,33)" fg:x="27457" fg:w="52"/><text x="95.7061%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (17 samples, 0.06%)</title><rect x="95.5778%" y="181" width="0.0591%" height="15" fill="rgb(231,114,1)" fg:x="27492" fg:w="17"/><text x="95.8278%" y="191.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (6 samples, 0.02%)</title><rect x="95.6160%" y="165" width="0.0209%" height="15" fill="rgb(207,184,53)" fg:x="27503" fg:w="6"/><text x="95.8660%" y="175.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (5 samples, 0.02%)</title><rect x="95.6995%" y="165" width="0.0174%" height="15" fill="rgb(224,95,51)" fg:x="27527" fg:w="5"/><text x="95.9495%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (21 samples, 0.07%)</title><rect x="95.6612%" y="197" width="0.0730%" height="15" fill="rgb(212,188,45)" fg:x="27516" fg:w="21"/><text x="95.9112%" y="207.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (17 samples, 0.06%)</title><rect x="95.6751%" y="181" width="0.0591%" height="15" fill="rgb(223,154,38)" fg:x="27520" fg:w="17"/><text x="95.9251%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.02%)</title><rect x="95.7169%" y="165" width="0.0174%" height="15" fill="rgb(251,22,52)" fg:x="27532" fg:w="5"/><text x="95.9669%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (5 samples, 0.02%)</title><rect x="95.7169%" y="149" width="0.0174%" height="15" fill="rgb(229,209,22)" fg:x="27532" fg:w="5"/><text x="95.9669%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (8 samples, 0.03%)</title><rect x="95.7343%" y="197" width="0.0278%" height="15" fill="rgb(234,138,34)" fg:x="27537" fg:w="8"/><text x="95.9843%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8 samples, 0.03%)</title><rect x="95.7343%" y="181" width="0.0278%" height="15" fill="rgb(212,95,11)" fg:x="27537" fg:w="8"/><text x="95.9843%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.01%)</title><rect x="95.7899%" y="165" width="0.0104%" height="15" fill="rgb(240,179,47)" fg:x="27553" fg:w="3"/><text x="96.0399%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="95.7899%" y="149" width="0.0104%" height="15" fill="rgb(240,163,11)" fg:x="27553" fg:w="3"/><text x="96.0399%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (48 samples, 0.17%)</title><rect x="95.6369%" y="213" width="0.1669%" height="15" fill="rgb(236,37,12)" fg:x="27509" fg:w="48"/><text x="95.8869%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12 samples, 0.04%)</title><rect x="95.7621%" y="197" width="0.0417%" height="15" fill="rgb(232,164,16)" fg:x="27545" fg:w="12"/><text x="96.0121%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.03%)</title><rect x="95.7690%" y="181" width="0.0348%" height="15" fill="rgb(244,205,15)" fg:x="27547" fg:w="10"/><text x="96.0190%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.01%)</title><rect x="95.8073%" y="213" width="0.0104%" height="15" fill="rgb(223,117,47)" fg:x="27558" fg:w="3"/><text x="96.0573%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (75 samples, 0.26%)</title><rect x="95.8177%" y="213" width="0.2607%" height="15" fill="rgb(244,107,35)" fg:x="27561" fg:w="75"/><text x="96.0677%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (60 samples, 0.21%)</title><rect x="95.8698%" y="197" width="0.2086%" height="15" fill="rgb(205,140,8)" fg:x="27576" fg:w="60"/><text x="96.1198%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="96.0610%" y="181" width="0.0174%" height="15" fill="rgb(228,84,46)" fg:x="27631" fg:w="5"/><text x="96.3110%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (34 samples, 0.12%)</title><rect x="96.2140%" y="197" width="0.1182%" height="15" fill="rgb(254,188,9)" fg:x="27675" fg:w="34"/><text x="96.4640%" y="207.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (10 samples, 0.03%)</title><rect x="96.2975%" y="181" width="0.0348%" height="15" fill="rgb(206,112,54)" fg:x="27699" fg:w="10"/><text x="96.5475%" y="191.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (3 samples, 0.01%)</title><rect x="96.5617%" y="181" width="0.0104%" height="15" fill="rgb(216,84,49)" fg:x="27775" fg:w="3"/><text x="96.8117%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (72 samples, 0.25%)</title><rect x="96.3322%" y="197" width="0.2503%" height="15" fill="rgb(214,194,35)" fg:x="27709" fg:w="72"/><text x="96.5822%" y="207.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (3 samples, 0.01%)</title><rect x="96.5721%" y="181" width="0.0104%" height="15" fill="rgb(249,28,3)" fg:x="27778" fg:w="3"/><text x="96.8221%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,171 samples, 4.07%)</title><rect x="92.6505%" y="373" width="4.0711%" height="15" fill="rgb(222,56,52)" fg:x="26650" fg:w="1171"/><text x="92.9005%" y="383.50">&lt;cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (1,169 samples, 4.06%)</title><rect x="92.6575%" y="357" width="4.0641%" height="15" fill="rgb(245,217,50)" fg:x="26652" fg:w="1169"/><text x="92.9075%" y="367.50">&lt;cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,123 samples, 3.90%)</title><rect x="92.8174%" y="341" width="3.9042%" height="15" fill="rgb(213,201,24)" fg:x="26698" fg:w="1123"/><text x="93.0674%" y="351.50">core..</text></g><g><title>day04::CardSet::card_for_cards::_{{closure}} (1,118 samples, 3.89%)</title><rect x="92.8348%" y="325" width="3.8868%" height="15" fill="rgb(248,116,28)" fg:x="26703" fg:w="1118"/><text x="93.0848%" y="335.50">day0..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,115 samples, 3.88%)</title><rect x="92.8452%" y="309" width="3.8764%" height="15" fill="rgb(219,72,43)" fg:x="26706" fg:w="1115"/><text x="93.0952%" y="319.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,110 samples, 3.86%)</title><rect x="92.8626%" y="293" width="3.8590%" height="15" fill="rgb(209,138,14)" fg:x="26711" fg:w="1110"/><text x="93.1126%" y="303.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,103 samples, 3.83%)</title><rect x="92.8869%" y="277" width="3.8347%" height="15" fill="rgb(222,18,33)" fg:x="26718" fg:w="1103"/><text x="93.1369%" y="287.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (477 samples, 1.66%)</title><rect x="95.0633%" y="261" width="1.6583%" height="15" fill="rgb(213,199,7)" fg:x="27344" fg:w="477"/><text x="95.3133%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (470 samples, 1.63%)</title><rect x="95.0876%" y="245" width="1.6340%" height="15" fill="rgb(250,110,10)" fg:x="27351" fg:w="470"/><text x="95.3376%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (457 samples, 1.59%)</title><rect x="95.1328%" y="229" width="1.5888%" height="15" fill="rgb(248,123,6)" fg:x="27364" fg:w="457"/><text x="95.3828%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (185 samples, 0.64%)</title><rect x="96.0784%" y="213" width="0.6432%" height="15" fill="rgb(206,91,31)" fg:x="27636" fg:w="185"/><text x="96.3284%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (40 samples, 0.14%)</title><rect x="96.5825%" y="197" width="0.1391%" height="15" fill="rgb(211,154,13)" fg:x="27781" fg:w="40"/><text x="96.8325%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (36 samples, 0.13%)</title><rect x="96.5964%" y="181" width="0.1252%" height="15" fill="rgb(225,148,7)" fg:x="27785" fg:w="36"/><text x="96.8464%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.01%)</title><rect x="96.7216%" y="373" width="0.0104%" height="15" fill="rgb(220,160,43)" fg:x="27821" fg:w="3"/><text x="96.9716%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (3 samples, 0.01%)</title><rect x="96.7320%" y="373" width="0.0104%" height="15" fill="rgb(213,52,39)" fg:x="27824" fg:w="3"/><text x="96.9820%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (3 samples, 0.01%)</title><rect x="96.7320%" y="357" width="0.0104%" height="15" fill="rgb(243,137,7)" fg:x="27824" fg:w="3"/><text x="96.9820%" y="367.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 0.04%)</title><rect x="96.7981%" y="261" width="0.0382%" height="15" fill="rgb(230,79,13)" fg:x="27843" fg:w="11"/><text x="97.0481%" y="271.50"></text></g><g><title>realloc (10 samples, 0.03%)</title><rect x="96.8016%" y="245" width="0.0348%" height="15" fill="rgb(247,105,23)" fg:x="27844" fg:w="10"/><text x="97.0516%" y="255.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="96.8120%" y="229" width="0.0243%" height="15" fill="rgb(223,179,41)" fg:x="27847" fg:w="7"/><text x="97.0620%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="96.8224%" y="213" width="0.0139%" height="15" fill="rgb(218,9,34)" fg:x="27850" fg:w="4"/><text x="97.0724%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.05%)</title><rect x="96.7981%" y="293" width="0.0521%" height="15" fill="rgb(222,106,8)" fg:x="27843" fg:w="15"/><text x="97.0481%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.05%)</title><rect x="96.7981%" y="277" width="0.0521%" height="15" fill="rgb(211,220,0)" fg:x="27843" fg:w="15"/><text x="97.0481%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.01%)</title><rect x="96.8502%" y="293" width="0.0139%" height="15" fill="rgb(229,52,16)" fg:x="27858" fg:w="4"/><text x="97.1002%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.08%)</title><rect x="96.7877%" y="309" width="0.0800%" height="15" fill="rgb(212,155,18)" fg:x="27840" fg:w="23"/><text x="97.0377%" y="319.50"></text></g><g><title>core::cmp::max (7 samples, 0.02%)</title><rect x="96.8746%" y="309" width="0.0243%" height="15" fill="rgb(242,21,14)" fg:x="27865" fg:w="7"/><text x="97.1246%" y="319.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.02%)</title><rect x="96.8746%" y="293" width="0.0243%" height="15" fill="rgb(222,19,48)" fg:x="27865" fg:w="7"/><text x="97.1246%" y="303.50"></text></g><g><title>core::cmp::max_by (6 samples, 0.02%)</title><rect x="96.8780%" y="277" width="0.0209%" height="15" fill="rgb(232,45,27)" fg:x="27866" fg:w="6"/><text x="97.1280%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.02%)</title><rect x="96.8815%" y="261" width="0.0174%" height="15" fill="rgb(249,103,42)" fg:x="27867" fg:w="5"/><text x="97.1315%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.01%)</title><rect x="96.8885%" y="245" width="0.0104%" height="15" fill="rgb(246,81,33)" fg:x="27869" fg:w="3"/><text x="97.1385%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 0.16%)</title><rect x="96.7494%" y="325" width="0.1564%" height="15" fill="rgb(252,33,42)" fg:x="27829" fg:w="45"/><text x="96.9994%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (47 samples, 0.16%)</title><rect x="96.7459%" y="373" width="0.1634%" height="15" fill="rgb(209,212,41)" fg:x="27828" fg:w="47"/><text x="96.9959%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (47 samples, 0.16%)</title><rect x="96.7459%" y="357" width="0.1634%" height="15" fill="rgb(207,154,6)" fg:x="27828" fg:w="47"/><text x="96.9959%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.16%)</title><rect x="96.7494%" y="341" width="0.1599%" height="15" fill="rgb(223,64,47)" fg:x="27829" fg:w="46"/><text x="96.9994%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,247 samples, 4.34%)</title><rect x="92.5775%" y="405" width="4.3353%" height="15" fill="rgb(211,161,38)" fg:x="26629" fg:w="1247"/><text x="92.8275%" y="415.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,244 samples, 4.32%)</title><rect x="92.5880%" y="389" width="4.3249%" height="15" fill="rgb(219,138,40)" fg:x="26632" fg:w="1244"/><text x="92.8380%" y="399.50">alloc..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (5 samples, 0.02%)</title><rect x="97.1840%" y="341" width="0.0174%" height="15" fill="rgb(241,228,46)" fg:x="27954" fg:w="5"/><text x="97.4340%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.18%)</title><rect x="97.0345%" y="373" width="0.1773%" height="15" fill="rgb(223,209,38)" fg:x="27911" fg:w="51"/><text x="97.2845%" y="383.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (12 samples, 0.04%)</title><rect x="97.1701%" y="357" width="0.0417%" height="15" fill="rgb(236,164,45)" fg:x="27950" fg:w="12"/><text x="97.4201%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.01%)</title><rect x="97.2014%" y="341" width="0.0104%" height="15" fill="rgb(231,15,5)" fg:x="27959" fg:w="3"/><text x="97.4514%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (29 samples, 0.10%)</title><rect x="97.3196%" y="213" width="0.1008%" height="15" fill="rgb(252,35,15)" fg:x="27993" fg:w="29"/><text x="97.5696%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.05%)</title><rect x="97.7368%" y="197" width="0.0487%" height="15" fill="rgb(248,181,18)" fg:x="28113" fg:w="14"/><text x="97.9868%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (156 samples, 0.54%)</title><rect x="97.2570%" y="261" width="0.5423%" height="15" fill="rgb(233,39,42)" fg:x="27975" fg:w="156"/><text x="97.5070%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (155 samples, 0.54%)</title><rect x="97.2605%" y="245" width="0.5389%" height="15" fill="rgb(238,110,33)" fg:x="27976" fg:w="155"/><text x="97.5105%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (155 samples, 0.54%)</title><rect x="97.2605%" y="229" width="0.5389%" height="15" fill="rgb(233,195,10)" fg:x="27976" fg:w="155"/><text x="97.5105%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (109 samples, 0.38%)</title><rect x="97.4204%" y="213" width="0.3789%" height="15" fill="rgb(254,105,3)" fg:x="28022" fg:w="109"/><text x="97.6704%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.01%)</title><rect x="97.7854%" y="197" width="0.0139%" height="15" fill="rgb(221,225,9)" fg:x="28127" fg:w="4"/><text x="98.0354%" y="207.50"></text></g><g><title>[libc.so.6] (27 samples, 0.09%)</title><rect x="97.8132%" y="245" width="0.0939%" height="15" fill="rgb(224,227,45)" fg:x="28135" fg:w="27"/><text x="98.0632%" y="255.50"></text></g><g><title>[libc.so.6] (10 samples, 0.03%)</title><rect x="97.9106%" y="229" width="0.0348%" height="15" fill="rgb(229,198,43)" fg:x="28163" fg:w="10"/><text x="98.1606%" y="239.50"></text></g><g><title>[libc.so.6] (27 samples, 0.09%)</title><rect x="97.9836%" y="213" width="0.0939%" height="15" fill="rgb(206,209,35)" fg:x="28184" fg:w="27"/><text x="98.2336%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (84 samples, 0.29%)</title><rect x="97.7993%" y="261" width="0.2920%" height="15" fill="rgb(245,195,53)" fg:x="28131" fg:w="84"/><text x="98.0493%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (53 samples, 0.18%)</title><rect x="97.9071%" y="245" width="0.1843%" height="15" fill="rgb(240,92,26)" fg:x="28162" fg:w="53"/><text x="98.1571%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (42 samples, 0.15%)</title><rect x="97.9453%" y="229" width="0.1460%" height="15" fill="rgb(207,40,23)" fg:x="28173" fg:w="42"/><text x="98.1953%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.04%)</title><rect x="98.2652%" y="149" width="0.0382%" height="15" fill="rgb(223,111,35)" fg:x="28265" fg:w="11"/><text x="98.5152%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (41 samples, 0.14%)</title><rect x="98.1644%" y="165" width="0.1425%" height="15" fill="rgb(229,147,28)" fg:x="28236" fg:w="41"/><text x="98.4144%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.02%)</title><rect x="98.3069%" y="165" width="0.0174%" height="15" fill="rgb(211,29,28)" fg:x="28277" fg:w="5"/><text x="98.5569%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="98.3243%" y="165" width="0.0104%" height="15" fill="rgb(228,72,33)" fg:x="28282" fg:w="3"/><text x="98.5743%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (311 samples, 1.08%)</title><rect x="97.2570%" y="293" width="1.0812%" height="15" fill="rgb(205,214,31)" fg:x="27975" fg:w="311"/><text x="97.5070%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (311 samples, 1.08%)</title><rect x="97.2570%" y="277" width="1.0812%" height="15" fill="rgb(224,111,15)" fg:x="27975" fg:w="311"/><text x="97.5070%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (71 samples, 0.25%)</title><rect x="98.0914%" y="261" width="0.2468%" height="15" fill="rgb(253,21,26)" fg:x="28215" fg:w="71"/><text x="98.3414%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (68 samples, 0.24%)</title><rect x="98.1018%" y="245" width="0.2364%" height="15" fill="rgb(245,139,43)" fg:x="28218" fg:w="68"/><text x="98.3518%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (67 samples, 0.23%)</title><rect x="98.1053%" y="229" width="0.2329%" height="15" fill="rgb(252,170,7)" fg:x="28219" fg:w="67"/><text x="98.3553%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (66 samples, 0.23%)</title><rect x="98.1087%" y="213" width="0.2295%" height="15" fill="rgb(231,118,14)" fg:x="28220" fg:w="66"/><text x="98.3587%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (63 samples, 0.22%)</title><rect x="98.1192%" y="197" width="0.2190%" height="15" fill="rgb(238,83,0)" fg:x="28223" fg:w="63"/><text x="98.3692%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (62 samples, 0.22%)</title><rect x="98.1227%" y="181" width="0.2155%" height="15" fill="rgb(221,39,39)" fg:x="28224" fg:w="62"/><text x="98.3727%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.01%)</title><rect x="98.3521%" y="277" width="0.0104%" height="15" fill="rgb(222,119,46)" fg:x="28290" fg:w="3"/><text x="98.6021%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="98.3521%" y="261" width="0.0104%" height="15" fill="rgb(222,165,49)" fg:x="28290" fg:w="3"/><text x="98.6021%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.01%)</title><rect x="98.3799%" y="261" width="0.0139%" height="15" fill="rgb(219,113,52)" fg:x="28298" fg:w="4"/><text x="98.6299%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.01%)</title><rect x="98.3834%" y="245" width="0.0104%" height="15" fill="rgb(214,7,15)" fg:x="28299" fg:w="3"/><text x="98.6334%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (6 samples, 0.02%)</title><rect x="98.4738%" y="245" width="0.0209%" height="15" fill="rgb(235,32,4)" fg:x="28325" fg:w="6"/><text x="98.7238%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="98.5259%" y="229" width="0.0174%" height="15" fill="rgb(238,90,54)" fg:x="28340" fg:w="5"/><text x="98.7759%" y="239.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (17 samples, 0.06%)</title><rect x="98.5503%" y="213" width="0.0591%" height="15" fill="rgb(213,208,19)" fg:x="28347" fg:w="17"/><text x="98.8003%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.14%)</title><rect x="98.4946%" y="245" width="0.1391%" height="15" fill="rgb(233,156,4)" fg:x="28331" fg:w="40"/><text x="98.7446%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (26 samples, 0.09%)</title><rect x="98.5433%" y="229" width="0.0904%" height="15" fill="rgb(207,194,5)" fg:x="28345" fg:w="26"/><text x="98.7933%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (7 samples, 0.02%)</title><rect x="98.6094%" y="213" width="0.0243%" height="15" fill="rgb(206,111,30)" fg:x="28364" fg:w="7"/><text x="98.8594%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (8 samples, 0.03%)</title><rect x="98.6407%" y="229" width="0.0278%" height="15" fill="rgb(243,70,54)" fg:x="28373" fg:w="8"/><text x="98.8907%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (8 samples, 0.03%)</title><rect x="98.6407%" y="213" width="0.0278%" height="15" fill="rgb(242,28,8)" fg:x="28373" fg:w="8"/><text x="98.8907%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (5 samples, 0.02%)</title><rect x="98.6685%" y="229" width="0.0174%" height="15" fill="rgb(219,106,18)" fg:x="28381" fg:w="5"/><text x="98.9185%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (5 samples, 0.02%)</title><rect x="98.6685%" y="213" width="0.0174%" height="15" fill="rgb(244,222,10)" fg:x="28381" fg:w="5"/><text x="98.9185%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.01%)</title><rect x="98.6754%" y="197" width="0.0104%" height="15" fill="rgb(236,179,52)" fg:x="28383" fg:w="3"/><text x="98.9254%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (23 samples, 0.08%)</title><rect x="98.6337%" y="245" width="0.0800%" height="15" fill="rgb(213,23,39)" fg:x="28371" fg:w="23"/><text x="98.8837%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8 samples, 0.03%)</title><rect x="98.6859%" y="229" width="0.0278%" height="15" fill="rgb(238,48,10)" fg:x="28386" fg:w="8"/><text x="98.9359%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6 samples, 0.02%)</title><rect x="98.6928%" y="213" width="0.0209%" height="15" fill="rgb(251,196,23)" fg:x="28388" fg:w="6"/><text x="98.9428%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (3 samples, 0.01%)</title><rect x="98.7137%" y="245" width="0.0104%" height="15" fill="rgb(250,152,24)" fg:x="28394" fg:w="3"/><text x="98.9637%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (31 samples, 0.11%)</title><rect x="98.7276%" y="245" width="0.1078%" height="15" fill="rgb(209,150,17)" fg:x="28398" fg:w="31"/><text x="98.9776%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (24 samples, 0.08%)</title><rect x="98.7519%" y="229" width="0.0834%" height="15" fill="rgb(234,202,34)" fg:x="28405" fg:w="24"/><text x="99.0019%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.03%)</title><rect x="98.8075%" y="213" width="0.0278%" height="15" fill="rgb(253,148,53)" fg:x="28421" fg:w="8"/><text x="99.0575%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (26 samples, 0.09%)</title><rect x="98.9605%" y="229" width="0.0904%" height="15" fill="rgb(218,129,16)" fg:x="28465" fg:w="26"/><text x="99.2105%" y="239.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (10 samples, 0.03%)</title><rect x="99.0161%" y="213" width="0.0348%" height="15" fill="rgb(216,85,19)" fg:x="28481" fg:w="10"/><text x="99.2661%" y="223.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (3 samples, 0.01%)</title><rect x="99.1726%" y="213" width="0.0104%" height="15" fill="rgb(235,228,7)" fg:x="28526" fg:w="3"/><text x="99.4226%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (41 samples, 0.14%)</title><rect x="99.0509%" y="229" width="0.1425%" height="15" fill="rgb(245,175,0)" fg:x="28491" fg:w="41"/><text x="99.3009%" y="239.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (3 samples, 0.01%)</title><rect x="99.1830%" y="213" width="0.0104%" height="15" fill="rgb(208,168,36)" fg:x="28529" fg:w="3"/><text x="99.4330%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (692 samples, 2.41%)</title><rect x="96.9128%" y="405" width="2.4058%" height="15" fill="rgb(246,171,24)" fg:x="27876" fg:w="692"/><text x="97.1628%" y="415.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (685 samples, 2.38%)</title><rect x="96.9371%" y="389" width="2.3814%" height="15" fill="rgb(215,142,24)" fg:x="27883" fg:w="685"/><text x="97.1871%" y="399.50">&lt;c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (606 samples, 2.11%)</title><rect x="97.2118%" y="373" width="2.1068%" height="15" fill="rgb(250,187,7)" fg:x="27962" fg:w="606"/><text x="97.4618%" y="383.50">c..</text></g><g><title>day04::CardSet::card_for_cards::_{{closure}} (604 samples, 2.10%)</title><rect x="97.2187%" y="357" width="2.0998%" height="15" fill="rgb(228,66,33)" fg:x="27964" fg:w="604"/><text x="97.4687%" y="367.50">d..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (603 samples, 2.10%)</title><rect x="97.2222%" y="341" width="2.0964%" height="15" fill="rgb(234,215,21)" fg:x="27965" fg:w="603"/><text x="97.4722%" y="351.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (602 samples, 2.09%)</title><rect x="97.2257%" y="325" width="2.0929%" height="15" fill="rgb(222,191,20)" fg:x="27966" fg:w="602"/><text x="97.4757%" y="335.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (598 samples, 2.08%)</title><rect x="97.2396%" y="309" width="2.0790%" height="15" fill="rgb(245,79,54)" fg:x="27970" fg:w="598"/><text x="97.4896%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (282 samples, 0.98%)</title><rect x="98.3382%" y="293" width="0.9804%" height="15" fill="rgb(240,10,37)" fg:x="28286" fg:w="282"/><text x="98.5882%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (275 samples, 0.96%)</title><rect x="98.3625%" y="277" width="0.9561%" height="15" fill="rgb(214,192,32)" fg:x="28293" fg:w="275"/><text x="98.6125%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (266 samples, 0.92%)</title><rect x="98.3938%" y="261" width="0.9248%" height="15" fill="rgb(209,36,54)" fg:x="28302" fg:w="266"/><text x="98.6438%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (139 samples, 0.48%)</title><rect x="98.8353%" y="245" width="0.4832%" height="15" fill="rgb(220,10,11)" fg:x="28429" fg:w="139"/><text x="99.0853%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (36 samples, 0.13%)</title><rect x="99.1934%" y="229" width="0.1252%" height="15" fill="rgb(221,106,17)" fg:x="28532" fg:w="36"/><text x="99.4434%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (31 samples, 0.11%)</title><rect x="99.2108%" y="213" width="0.1078%" height="15" fill="rgb(251,142,44)" fg:x="28537" fg:w="31"/><text x="99.4608%" y="223.50"></text></g><g><title>core::core_arch::simd::i8x16::new (6 samples, 0.02%)</title><rect x="99.2977%" y="197" width="0.0209%" height="15" fill="rgb(238,13,15)" fg:x="28562" fg:w="6"/><text x="99.5477%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.10%)</title><rect x="99.3186%" y="405" width="0.0973%" height="15" fill="rgb(208,107,27)" fg:x="28568" fg:w="28"/><text x="99.5686%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.08%)</title><rect x="99.3360%" y="389" width="0.0800%" height="15" fill="rgb(205,136,37)" fg:x="28573" fg:w="23"/><text x="99.5860%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (14 samples, 0.05%)</title><rect x="99.3673%" y="373" width="0.0487%" height="15" fill="rgb(250,205,27)" fg:x="28582" fg:w="14"/><text x="99.6173%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (14 samples, 0.05%)</title><rect x="99.3673%" y="357" width="0.0487%" height="15" fill="rgb(210,80,43)" fg:x="28582" fg:w="14"/><text x="99.6173%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.02%)</title><rect x="99.4159%" y="405" width="0.0243%" height="15" fill="rgb(247,160,36)" fg:x="28596" fg:w="7"/><text x="99.6659%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.02%)</title><rect x="99.4159%" y="389" width="0.0243%" height="15" fill="rgb(234,13,49)" fg:x="28596" fg:w="7"/><text x="99.6659%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="99.4403%" y="405" width="0.0104%" height="15" fill="rgb(234,122,0)" fg:x="28603" fg:w="3"/><text x="99.6903%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="99.6176%" y="309" width="0.0104%" height="15" fill="rgb(207,146,38)" fg:x="28654" fg:w="3"/><text x="99.8676%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (3 samples, 0.01%)</title><rect x="99.6280%" y="309" width="0.0104%" height="15" fill="rgb(207,177,25)" fg:x="28657" fg:w="3"/><text x="99.8780%" y="319.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (3 samples, 0.01%)</title><rect x="99.6280%" y="293" width="0.0104%" height="15" fill="rgb(211,178,42)" fg:x="28657" fg:w="3"/><text x="99.8780%" y="303.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.09%)</title><rect x="99.6384%" y="309" width="0.0904%" height="15" fill="rgb(230,69,54)" fg:x="28660" fg:w="26"/><text x="99.8884%" y="319.50"></text></g><g><title>malloc (19 samples, 0.07%)</title><rect x="99.6628%" y="293" width="0.0661%" height="15" fill="rgb(214,135,41)" fg:x="28667" fg:w="19"/><text x="99.9128%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (4 samples, 0.01%)</title><rect x="99.7288%" y="309" width="0.0139%" height="15" fill="rgb(237,67,25)" fg:x="28686" fg:w="4"/><text x="99.9788%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.21%)</title><rect x="99.5620%" y="341" width="0.2051%" height="15" fill="rgb(222,189,50)" fg:x="28638" fg:w="59"/><text x="99.8120%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.19%)</title><rect x="99.5759%" y="325" width="0.1912%" height="15" fill="rgb(245,148,34)" fg:x="28642" fg:w="55"/><text x="99.8259%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (6 samples, 0.02%)</title><rect x="99.7462%" y="309" width="0.0209%" height="15" fill="rgb(222,29,6)" fg:x="28691" fg:w="6"/><text x="99.9962%" y="319.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (6 samples, 0.02%)</title><rect x="99.7462%" y="293" width="0.0209%" height="15" fill="rgb(221,189,43)" fg:x="28691" fg:w="6"/><text x="99.9962%" y="303.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (6 samples, 0.02%)</title><rect x="99.7462%" y="277" width="0.0209%" height="15" fill="rgb(207,36,27)" fg:x="28691" fg:w="6"/><text x="99.9962%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array (17 samples, 0.06%)</title><rect x="99.7671%" y="341" width="0.0591%" height="15" fill="rgb(217,90,24)" fg:x="28697" fg:w="17"/><text x="100.0171%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (17 samples, 0.06%)</title><rect x="99.7671%" y="325" width="0.0591%" height="15" fill="rgb(224,66,35)" fg:x="28697" fg:w="17"/><text x="100.0171%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="99.8262%" y="341" width="0.0104%" height="15" fill="rgb(221,13,50)" fg:x="28714" fg:w="3"/><text x="100.0762%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (114 samples, 0.40%)</title><rect x="99.4507%" y="405" width="0.3963%" height="15" fill="rgb(236,68,49)" fg:x="28606" fg:w="114"/><text x="99.7007%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (114 samples, 0.40%)</title><rect x="99.4507%" y="389" width="0.3963%" height="15" fill="rgb(229,146,28)" fg:x="28606" fg:w="114"/><text x="99.7007%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (111 samples, 0.39%)</title><rect x="99.4611%" y="373" width="0.3859%" height="15" fill="rgb(225,31,38)" fg:x="28609" fg:w="111"/><text x="99.7111%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (110 samples, 0.38%)</title><rect x="99.4646%" y="357" width="0.3824%" height="15" fill="rgb(250,208,3)" fg:x="28610" fg:w="110"/><text x="99.7146%" y="367.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (3 samples, 0.01%)</title><rect x="99.8366%" y="341" width="0.0104%" height="15" fill="rgb(246,54,23)" fg:x="28717" fg:w="3"/><text x="100.0866%" y="351.50"></text></g><g><title>core::cmp::max (34 samples, 0.12%)</title><rect x="99.8470%" y="405" width="0.1182%" height="15" fill="rgb(243,76,11)" fg:x="28720" fg:w="34"/><text x="100.0970%" y="415.50"></text></g><g><title>core::cmp::Ord::max (34 samples, 0.12%)</title><rect x="99.8470%" y="389" width="0.1182%" height="15" fill="rgb(245,21,50)" fg:x="28720" fg:w="34"/><text x="100.0970%" y="399.50"></text></g><g><title>core::cmp::max_by (33 samples, 0.11%)</title><rect x="99.8505%" y="373" width="0.1147%" height="15" fill="rgb(228,9,43)" fg:x="28721" fg:w="33"/><text x="100.1005%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.05%)</title><rect x="99.9200%" y="357" width="0.0452%" height="15" fill="rgb(208,100,47)" fg:x="28741" fg:w="13"/><text x="100.1700%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (12 samples, 0.04%)</title><rect x="99.9235%" y="341" width="0.0417%" height="15" fill="rgb(232,26,8)" fg:x="28742" fg:w="12"/><text x="100.1735%" y="351.50"></text></g><g><title>day04::CardSet::card_for_cards (28,740 samples, 99.92%)</title><rect x="0.0556%" y="501" width="99.9166%" height="15" fill="rgb(216,166,38)" fg:x="16" fg:w="28740"/><text x="0.3056%" y="511.50">day04::CardSet::card_for_cards</text></g><g><title>itertools::Itertools::collect_vec (2,227 samples, 7.74%)</title><rect x="92.2299%" y="485" width="7.7423%" height="15" fill="rgb(251,202,51)" fg:x="26529" fg:w="2227"/><text x="92.4799%" y="495.50">itertools::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,216 samples, 7.70%)</title><rect x="92.2681%" y="469" width="7.7041%" height="15" fill="rgb(254,216,34)" fg:x="26540" fg:w="2216"/><text x="92.5181%" y="479.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,206 samples, 7.67%)</title><rect x="92.3029%" y="453" width="7.6693%" height="15" fill="rgb(251,32,27)" fg:x="26550" fg:w="2206"/><text x="92.5529%" y="463.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,190 samples, 7.61%)</title><rect x="92.3585%" y="437" width="7.6137%" height="15" fill="rgb(208,127,28)" fg:x="26566" fg:w="2190"/><text x="92.6085%" y="447.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,185 samples, 7.60%)</title><rect x="92.3759%" y="421" width="7.5963%" height="15" fill="rgb(224,137,22)" fg:x="26571" fg:w="2185"/><text x="92.6259%" y="431.50">&lt;alloc::ve..</text></g><g><title>nom::multi::separated_list1::_{{closure}} (3 samples, 0.01%)</title><rect x="99.9722%" y="149" width="0.0104%" height="15" fill="rgb(254,70,32)" fg:x="28756" fg:w="3"/><text x="100.2222%" y="159.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.01%)</title><rect x="99.9722%" y="213" width="0.0139%" height="15" fill="rgb(229,75,37)" fg:x="28756" fg:w="4"/><text x="100.2222%" y="223.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (4 samples, 0.01%)</title><rect x="99.9722%" y="197" width="0.0139%" height="15" fill="rgb(252,64,23)" fg:x="28756" fg:w="4"/><text x="100.2222%" y="207.50"></text></g><g><title>&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (4 samples, 0.01%)</title><rect x="99.9722%" y="181" width="0.0139%" height="15" fill="rgb(232,162,48)" fg:x="28756" fg:w="4"/><text x="100.2222%" y="191.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.01%)</title><rect x="99.9722%" y="165" width="0.0139%" height="15" fill="rgb(246,160,12)" fg:x="28756" fg:w="4"/><text x="100.2222%" y="175.50"></text></g><g><title>day04::CardSet::parse (7 samples, 0.02%)</title><rect x="99.9722%" y="501" width="0.0243%" height="15" fill="rgb(247,166,0)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7 samples, 0.02%)</title><rect x="99.9722%" y="485" width="0.0243%" height="15" fill="rgb(249,219,21)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (7 samples, 0.02%)</title><rect x="99.9722%" y="469" width="0.0243%" height="15" fill="rgb(205,209,3)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.02%)</title><rect x="99.9722%" y="453" width="0.0243%" height="15" fill="rgb(243,44,1)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (7 samples, 0.02%)</title><rect x="99.9722%" y="437" width="0.0243%" height="15" fill="rgb(206,159,16)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7 samples, 0.02%)</title><rect x="99.9722%" y="421" width="0.0243%" height="15" fill="rgb(244,77,30)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.02%)</title><rect x="99.9722%" y="405" width="0.0243%" height="15" fill="rgb(218,69,12)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.02%)</title><rect x="99.9722%" y="389" width="0.0243%" height="15" fill="rgb(212,87,7)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.02%)</title><rect x="99.9722%" y="373" width="0.0243%" height="15" fill="rgb(245,114,25)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.02%)</title><rect x="99.9722%" y="357" width="0.0243%" height="15" fill="rgb(210,61,42)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.02%)</title><rect x="99.9722%" y="341" width="0.0243%" height="15" fill="rgb(211,52,33)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.02%)</title><rect x="99.9722%" y="325" width="0.0243%" height="15" fill="rgb(234,58,33)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.02%)</title><rect x="99.9722%" y="309" width="0.0243%" height="15" fill="rgb(220,115,36)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 0.02%)</title><rect x="99.9722%" y="293" width="0.0243%" height="15" fill="rgb(243,153,54)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (7 samples, 0.02%)</title><rect x="99.9722%" y="277" width="0.0243%" height="15" fill="rgb(251,47,18)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="287.50"></text></g><g><title>day04::CardSet::parse::_{{closure}} (7 samples, 0.02%)</title><rect x="99.9722%" y="261" width="0.0243%" height="15" fill="rgb(242,102,42)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="271.50"></text></g><g><title>day04::Card::parse (7 samples, 0.02%)</title><rect x="99.9722%" y="245" width="0.0243%" height="15" fill="rgb(234,31,38)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="255.50"></text></g><g><title>nom::combinator::map_res::_{{closure}} (7 samples, 0.02%)</title><rect x="99.9722%" y="229" width="0.0243%" height="15" fill="rgb(221,117,51)" fg:x="28756" fg:w="7"/><text x="100.2222%" y="239.50"></text></g><g><title>day04::Card::parse::_{{closure}} (3 samples, 0.01%)</title><rect x="99.9861%" y="213" width="0.0104%" height="15" fill="rgb(212,20,18)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="99.9861%" y="197" width="0.0104%" height="15" fill="rgb(245,133,36)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="207.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3 samples, 0.01%)</title><rect x="99.9861%" y="181" width="0.0104%" height="15" fill="rgb(212,6,19)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="191.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3 samples, 0.01%)</title><rect x="99.9861%" y="165" width="0.0104%" height="15" fill="rgb(218,1,36)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="175.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.01%)</title><rect x="99.9861%" y="149" width="0.0104%" height="15" fill="rgb(246,84,54)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.01%)</title><rect x="99.9861%" y="133" width="0.0104%" height="15" fill="rgb(242,110,6)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="99.9861%" y="117" width="0.0104%" height="15" fill="rgb(214,47,5)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.01%)</title><rect x="99.9861%" y="101" width="0.0104%" height="15" fill="rgb(218,159,25)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.01%)</title><rect x="99.9861%" y="85" width="0.0104%" height="15" fill="rgb(215,211,28)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.01%)</title><rect x="99.9861%" y="69" width="0.0104%" height="15" fill="rgb(238,59,32)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="79.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (3 samples, 0.01%)</title><rect x="99.9861%" y="53" width="0.0104%" height="15" fill="rgb(226,82,3)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="63.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="99.9861%" y="37" width="0.0104%" height="15" fill="rgb(240,164,32)" fg:x="28760" fg:w="3"/><text x="100.2361%" y="47.50"></text></g><g><title>all (28,764 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(232,46,7)" fg:x="0" fg:w="28764"/><text x="0.2500%" y="831.50"></text></g><g><title>day04 (28,764 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(229,129,53)" fg:x="0" fg:w="28764"/><text x="0.2500%" y="815.50">day04</text></g><g><title>_start (28,748 samples, 99.94%)</title><rect x="0.0556%" y="789" width="99.9444%" height="15" fill="rgb(234,188,29)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="799.50">_start</text></g><g><title>__libc_start_main (28,748 samples, 99.94%)</title><rect x="0.0556%" y="773" width="99.9444%" height="15" fill="rgb(246,141,4)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="783.50">__libc_start_main</text></g><g><title>[libc.so.6] (28,748 samples, 99.94%)</title><rect x="0.0556%" y="757" width="99.9444%" height="15" fill="rgb(229,23,39)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="767.50">[libc.so.6]</text></g><g><title>main (28,748 samples, 99.94%)</title><rect x="0.0556%" y="741" width="99.9444%" height="15" fill="rgb(206,12,3)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="751.50">main</text></g><g><title>std::rt::lang_start (28,748 samples, 99.94%)</title><rect x="0.0556%" y="725" width="99.9444%" height="15" fill="rgb(252,226,20)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="735.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (28,748 samples, 99.94%)</title><rect x="0.0556%" y="709" width="99.9444%" height="15" fill="rgb(216,123,35)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (28,748 samples, 99.94%)</title><rect x="0.0556%" y="693" width="99.9444%" height="15" fill="rgb(212,68,40)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (28,748 samples, 99.94%)</title><rect x="0.0556%" y="677" width="99.9444%" height="15" fill="rgb(254,125,32)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (28,748 samples, 99.94%)</title><rect x="0.0556%" y="661" width="99.9444%" height="15" fill="rgb(253,97,22)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (28,748 samples, 99.94%)</title><rect x="0.0556%" y="645" width="99.9444%" height="15" fill="rgb(241,101,14)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="655.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (28,748 samples, 99.94%)</title><rect x="0.0556%" y="629" width="99.9444%" height="15" fill="rgb(238,103,29)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (28,748 samples, 99.94%)</title><rect x="0.0556%" y="613" width="99.9444%" height="15" fill="rgb(233,195,47)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (28,748 samples, 99.94%)</title><rect x="0.0556%" y="597" width="99.9444%" height="15" fill="rgb(246,218,30)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (28,748 samples, 99.94%)</title><rect x="0.0556%" y="581" width="99.9444%" height="15" fill="rgb(219,145,47)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (28,748 samples, 99.94%)</title><rect x="0.0556%" y="565" width="99.9444%" height="15" fill="rgb(243,12,26)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="575.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28,748 samples, 99.94%)</title><rect x="0.0556%" y="549" width="99.9444%" height="15" fill="rgb(214,87,16)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (28,748 samples, 99.94%)</title><rect x="0.0556%" y="533" width="99.9444%" height="15" fill="rgb(208,99,42)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>day04::main (28,748 samples, 99.94%)</title><rect x="0.0556%" y="517" width="99.9444%" height="15" fill="rgb(253,99,2)" fg:x="16" fg:w="28748"/><text x="0.3056%" y="527.50">day04::main</text></g></svg></svg>