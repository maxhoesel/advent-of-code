<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="1583"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0632%" y="661" width="0.0632%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3132%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0632%" y="645" width="0.0632%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3132%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0632%" y="629" width="0.0632%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3132%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0632%" y="613" width="0.0632%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3132%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.13%)</title><rect x="0.0632%" y="677" width="0.1263%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="2"/><text x="0.3132%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.1263%" y="661" width="0.0632%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.3763%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.1263%" y="645" width="0.0632%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.3763%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.32%)</title><rect x="0.0000%" y="693" width="0.3159%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.13%)</title><rect x="0.1895%" y="677" width="0.1263%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="2"/><text x="0.4395%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.13%)</title><rect x="0.1895%" y="661" width="0.1263%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="2"/><text x="0.4395%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.13%)</title><rect x="0.1895%" y="645" width="0.1263%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="2"/><text x="0.4395%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.2527%" y="629" width="0.0632%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.5027%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.44%)</title><rect x="0.0000%" y="709" width="0.4422%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="7"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.13%)</title><rect x="0.3159%" y="693" width="0.1263%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="0.5659%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="0.8212%" y="421" width="0.1263%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="2"/><text x="1.0712%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.32%)</title><rect x="0.9476%" y="405" width="0.3159%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="5"/><text x="1.1976%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.25%)</title><rect x="1.0107%" y="389" width="0.2527%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="4"/><text x="1.2607%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.25%)</title><rect x="1.0107%" y="373" width="0.2527%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="4"/><text x="1.2607%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (2 samples, 0.13%)</title><rect x="1.8951%" y="341" width="0.1263%" height="15" fill="rgb(221,200,47)" fg:x="30" fg:w="2"/><text x="2.1451%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="1.8951%" y="325" width="0.1263%" height="15" fill="rgb(226,26,5)" fg:x="30" fg:w="2"/><text x="2.1451%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (17 samples, 1.07%)</title><rect x="1.5793%" y="357" width="1.0739%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="17"/><text x="1.8293%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (10 samples, 0.63%)</title><rect x="2.0215%" y="341" width="0.6317%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="10"/><text x="2.2715%" y="351.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (10 samples, 0.63%)</title><rect x="2.0215%" y="325" width="0.6317%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="10"/><text x="2.2715%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (10 samples, 0.63%)</title><rect x="2.0215%" y="309" width="0.6317%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="10"/><text x="2.2715%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::le (10 samples, 0.63%)</title><rect x="2.0215%" y="293" width="0.6317%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="10"/><text x="2.2715%" y="303.50"></text></g><g><title>&lt;day04::Card as core::cmp::PartialOrd&gt;::partial_cmp (7 samples, 0.44%)</title><rect x="2.2110%" y="277" width="0.4422%" height="15" fill="rgb(249,31,29)" fg:x="35" fg:w="7"/><text x="2.4610%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (244 samples, 15.41%)</title><rect x="2.6532%" y="357" width="15.4138%" height="15" fill="rgb(225,111,53)" fg:x="42" fg:w="244"/><text x="2.9032%" y="367.50">alloc::collections::bina..</text></g><g><title>core::intrinsics::copy_nonoverlapping (244 samples, 15.41%)</title><rect x="2.6532%" y="341" width="15.4138%" height="15" fill="rgb(238,160,17)" fg:x="42" fg:w="244"/><text x="2.9032%" y="351.50">core::intrinsics::copy_n..</text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="18.0038%" y="325" width="0.0632%" height="15" fill="rgb(214,148,48)" fg:x="285" fg:w="1"/><text x="18.2538%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="18.0038%" y="309" width="0.0632%" height="15" fill="rgb(232,36,49)" fg:x="285" fg:w="1"/><text x="18.2538%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="18.0038%" y="293" width="0.0632%" height="15" fill="rgb(209,103,24)" fg:x="285" fg:w="1"/><text x="18.2538%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="18.0038%" y="277" width="0.0632%" height="15" fill="rgb(229,88,8)" fg:x="285" fg:w="1"/><text x="18.2538%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="18.0038%" y="261" width="0.0632%" height="15" fill="rgb(213,181,19)" fg:x="285" fg:w="1"/><text x="18.2538%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="18.0038%" y="245" width="0.0632%" height="15" fill="rgb(254,191,54)" fg:x="285" fg:w="1"/><text x="18.2538%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (618 samples, 39.04%)</title><rect x="1.4529%" y="373" width="39.0398%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="618"/><text x="1.7029%" y="383.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_b..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (355 samples, 22.43%)</title><rect x="18.0670%" y="357" width="22.4258%" height="15" fill="rgb(233,36,39)" fg:x="286" fg:w="355"/><text x="18.3170%" y="367.50">core::cmp::impls::&lt;impl core::cmp::P..</text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (252 samples, 15.92%)</title><rect x="24.5736%" y="341" width="15.9191%" height="15" fill="rgb(226,3,54)" fg:x="389" fg:w="252"/><text x="24.8236%" y="351.50">&lt;core::cmp::Reverse&lt;T&gt; a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (252 samples, 15.92%)</title><rect x="24.5736%" y="325" width="15.9191%" height="15" fill="rgb(245,192,40)" fg:x="389" fg:w="252"/><text x="24.8236%" y="335.50">core::cmp::impls::&lt;impl ..</text></g><g><title>core::cmp::PartialOrd::le (252 samples, 15.92%)</title><rect x="24.5736%" y="309" width="15.9191%" height="15" fill="rgb(238,167,29)" fg:x="389" fg:w="252"/><text x="24.8236%" y="319.50">core::cmp::PartialOrd::le</text></g><g><title>&lt;day04::Card as core::cmp::PartialOrd&gt;::partial_cmp (22 samples, 1.39%)</title><rect x="39.1030%" y="293" width="1.3898%" height="15" fill="rgb(232,182,51)" fg:x="619" fg:w="22"/><text x="39.3530%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (628 samples, 39.67%)</title><rect x="0.9476%" y="421" width="39.6715%" height="15" fill="rgb(231,60,39)" fg:x="15" fg:w="628"/><text x="1.1976%" y="431.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop</text></g><g><title>core::option::Option&lt;T&gt;::map (623 samples, 39.36%)</title><rect x="1.2634%" y="405" width="39.3557%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="623"/><text x="1.5134%" y="415.50">core::option::Option&lt;T&gt;::map</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (623 samples, 39.36%)</title><rect x="1.2634%" y="389" width="39.3557%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="623"/><text x="1.5134%" y="399.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closur..</text></g><g><title>core::mem::swap (2 samples, 0.13%)</title><rect x="40.4927%" y="373" width="0.1263%" height="15" fill="rgb(213,116,39)" fg:x="641" fg:w="2"/><text x="40.7427%" y="383.50"></text></g><g><title>core::mem::swap_simple (2 samples, 0.13%)</title><rect x="40.4927%" y="357" width="0.1263%" height="15" fill="rgb(222,207,29)" fg:x="641" fg:w="2"/><text x="40.7427%" y="367.50"></text></g><g><title>core::ptr::write (2 samples, 0.13%)</title><rect x="40.4927%" y="341" width="0.1263%" height="15" fill="rgb(206,96,30)" fg:x="641" fg:w="2"/><text x="40.7427%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (1 samples, 0.06%)</title><rect x="40.6191%" y="405" width="0.0632%" height="15" fill="rgb(218,138,4)" fg:x="643" fg:w="1"/><text x="40.8691%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.06%)</title><rect x="40.6191%" y="389" width="0.0632%" height="15" fill="rgb(250,191,14)" fg:x="643" fg:w="1"/><text x="40.8691%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (2 samples, 0.13%)</title><rect x="41.4403%" y="389" width="0.1263%" height="15" fill="rgb(239,60,40)" fg:x="656" fg:w="2"/><text x="41.6903%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="41.4403%" y="373" width="0.1263%" height="15" fill="rgb(206,27,48)" fg:x="656" fg:w="2"/><text x="41.6903%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (22 samples, 1.39%)</title><rect x="40.6822%" y="405" width="1.3898%" height="15" fill="rgb(225,35,8)" fg:x="644" fg:w="22"/><text x="40.9322%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (8 samples, 0.51%)</title><rect x="41.5666%" y="389" width="0.5054%" height="15" fill="rgb(250,213,24)" fg:x="658" fg:w="8"/><text x="41.8166%" y="399.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (8 samples, 0.51%)</title><rect x="41.5666%" y="373" width="0.5054%" height="15" fill="rgb(247,123,22)" fg:x="658" fg:w="8"/><text x="41.8166%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (8 samples, 0.51%)</title><rect x="41.5666%" y="357" width="0.5054%" height="15" fill="rgb(231,138,38)" fg:x="658" fg:w="8"/><text x="41.8166%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::le (8 samples, 0.51%)</title><rect x="41.5666%" y="341" width="0.5054%" height="15" fill="rgb(231,145,46)" fg:x="658" fg:w="8"/><text x="41.8166%" y="351.50"></text></g><g><title>&lt;day04::Card as core::cmp::PartialOrd&gt;::partial_cmp (5 samples, 0.32%)</title><rect x="41.7562%" y="325" width="0.3159%" height="15" fill="rgb(251,118,11)" fg:x="661" fg:w="5"/><text x="42.0062%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (32 samples, 2.02%)</title><rect x="40.6191%" y="421" width="2.0215%" height="15" fill="rgb(217,147,25)" fg:x="643" fg:w="32"/><text x="40.8691%" y="431.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.57%)</title><rect x="42.0720%" y="405" width="0.5685%" height="15" fill="rgb(247,81,37)" fg:x="666" fg:w="9"/><text x="42.3220%" y="415.50"></text></g><g><title>core::ptr::write (4 samples, 0.25%)</title><rect x="42.3879%" y="389" width="0.2527%" height="15" fill="rgb(209,12,38)" fg:x="671" fg:w="4"/><text x="42.6379%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="42.5774%" y="373" width="0.0632%" height="15" fill="rgb(227,1,9)" fg:x="674" fg:w="1"/><text x="42.8274%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (7 samples, 0.44%)</title><rect x="42.6406%" y="421" width="0.4422%" height="15" fill="rgb(248,47,43)" fg:x="675" fg:w="7"/><text x="42.8906%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (7 samples, 0.44%)</title><rect x="42.6406%" y="405" width="0.4422%" height="15" fill="rgb(221,10,30)" fg:x="675" fg:w="7"/><text x="42.8906%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.44%)</title><rect x="42.6406%" y="389" width="0.4422%" height="15" fill="rgb(210,229,1)" fg:x="675" fg:w="7"/><text x="42.8906%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.44%)</title><rect x="42.6406%" y="373" width="0.4422%" height="15" fill="rgb(222,148,37)" fg:x="675" fg:w="7"/><text x="42.8906%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.44%)</title><rect x="42.6406%" y="357" width="0.4422%" height="15" fill="rgb(234,67,33)" fg:x="675" fg:w="7"/><text x="42.8906%" y="367.50"></text></g><g><title>cfree (7 samples, 0.44%)</title><rect x="42.6406%" y="341" width="0.4422%" height="15" fill="rgb(247,98,35)" fg:x="675" fg:w="7"/><text x="42.8906%" y="351.50"></text></g><g><title>[libc.so.6] (4 samples, 0.25%)</title><rect x="42.8301%" y="325" width="0.2527%" height="15" fill="rgb(247,138,52)" fg:x="678" fg:w="4"/><text x="43.0801%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="43.3354%" y="293" width="0.0632%" height="15" fill="rgb(213,79,30)" fg:x="686" fg:w="1"/><text x="43.5854%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="43.3354%" y="277" width="0.0632%" height="15" fill="rgb(246,177,23)" fg:x="686" fg:w="1"/><text x="43.5854%" y="287.50"></text></g><g><title>__rust_dealloc (1 samples, 0.06%)</title><rect x="43.3986%" y="293" width="0.0632%" height="15" fill="rgb(230,62,27)" fg:x="687" fg:w="1"/><text x="43.6486%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.95%)</title><rect x="43.0828%" y="325" width="0.9476%" height="15" fill="rgb(216,154,8)" fg:x="682" fg:w="15"/><text x="43.3328%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.95%)</title><rect x="43.0828%" y="309" width="0.9476%" height="15" fill="rgb(244,35,45)" fg:x="682" fg:w="15"/><text x="43.3328%" y="319.50"></text></g><g><title>cfree (9 samples, 0.57%)</title><rect x="43.4618%" y="293" width="0.5685%" height="15" fill="rgb(251,115,12)" fg:x="688" fg:w="9"/><text x="43.7118%" y="303.50"></text></g><g><title>[libc.so.6] (4 samples, 0.25%)</title><rect x="43.7776%" y="277" width="0.2527%" height="15" fill="rgb(240,54,50)" fg:x="693" fg:w="4"/><text x="44.0276%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;day04::Card&gt;&gt; (16 samples, 1.01%)</title><rect x="43.0828%" y="421" width="1.0107%" height="15" fill="rgb(233,84,52)" fg:x="682" fg:w="16"/><text x="43.3328%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.01%)</title><rect x="43.0828%" y="405" width="1.0107%" height="15" fill="rgb(207,117,47)" fg:x="682" fg:w="16"/><text x="43.3328%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;day04::Card,alloc::alloc::Global&gt;&gt; (16 samples, 1.01%)</title><rect x="43.0828%" y="389" width="1.0107%" height="15" fill="rgb(249,43,39)" fg:x="682" fg:w="16"/><text x="43.3328%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.01%)</title><rect x="43.0828%" y="373" width="1.0107%" height="15" fill="rgb(209,38,44)" fg:x="682" fg:w="16"/><text x="43.3328%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;day04::Card&gt;&gt; (16 samples, 1.01%)</title><rect x="43.0828%" y="357" width="1.0107%" height="15" fill="rgb(236,212,23)" fg:x="682" fg:w="16"/><text x="43.3328%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.01%)</title><rect x="43.0828%" y="341" width="1.0107%" height="15" fill="rgb(242,79,21)" fg:x="682" fg:w="16"/><text x="43.3328%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.06%)</title><rect x="44.0303%" y="325" width="0.0632%" height="15" fill="rgb(211,96,35)" fg:x="697" fg:w="1"/><text x="44.2803%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.13%)</title><rect x="44.0935%" y="421" width="0.1263%" height="15" fill="rgb(253,215,40)" fg:x="698" fg:w="2"/><text x="44.3435%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.13%)</title><rect x="44.0935%" y="405" width="0.1263%" height="15" fill="rgb(211,81,21)" fg:x="698" fg:w="2"/><text x="44.3435%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.13%)</title><rect x="44.0935%" y="389" width="0.1263%" height="15" fill="rgb(208,190,38)" fg:x="698" fg:w="2"/><text x="44.3435%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="44.2198%" y="405" width="0.0632%" height="15" fill="rgb(235,213,38)" fg:x="700" fg:w="1"/><text x="44.4698%" y="415.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 2.78%)</title><rect x="45.0411%" y="357" width="2.7795%" height="15" fill="rgb(237,122,38)" fg:x="713" fg:w="44"/><text x="45.2911%" y="367.50">&lt;s..</text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 2.78%)</title><rect x="45.0411%" y="341" width="2.7795%" height="15" fill="rgb(244,218,35)" fg:x="713" fg:w="44"/><text x="45.2911%" y="351.50">&lt;h..</text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 2.78%)</title><rect x="45.0411%" y="325" width="2.7795%" height="15" fill="rgb(240,68,47)" fg:x="713" fg:w="44"/><text x="45.2911%" y="335.50">&lt;h..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 2.78%)</title><rect x="45.0411%" y="309" width="2.7795%" height="15" fill="rgb(210,16,53)" fg:x="713" fg:w="44"/><text x="45.2911%" y="319.50">&lt;h..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 2.78%)</title><rect x="45.0411%" y="293" width="2.7795%" height="15" fill="rgb(235,124,12)" fg:x="713" fg:w="44"/><text x="45.2911%" y="303.50">&lt;h..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (25 samples, 1.58%)</title><rect x="46.2413%" y="277" width="1.5793%" height="15" fill="rgb(224,169,11)" fg:x="732" fg:w="25"/><text x="46.4913%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 1.58%)</title><rect x="46.2413%" y="261" width="1.5793%" height="15" fill="rgb(250,166,2)" fg:x="732" fg:w="25"/><text x="46.4913%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (22 samples, 1.39%)</title><rect x="46.4308%" y="245" width="1.3898%" height="15" fill="rgb(242,216,29)" fg:x="735" fg:w="22"/><text x="46.6808%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 1.64%)</title><rect x="51.8636%" y="197" width="1.6425%" height="15" fill="rgb(230,116,27)" fg:x="821" fg:w="26"/><text x="52.1136%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (56 samples, 3.54%)</title><rect x="50.2843%" y="213" width="3.5376%" height="15" fill="rgb(228,99,48)" fg:x="796" fg:w="56"/><text x="50.5343%" y="223.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.32%)</title><rect x="53.5060%" y="197" width="0.3159%" height="15" fill="rgb(253,11,6)" fg:x="847" fg:w="5"/><text x="53.7560%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (80 samples, 5.05%)</title><rect x="55.3380%" y="197" width="5.0537%" height="15" fill="rgb(247,143,39)" fg:x="876" fg:w="80"/><text x="55.5880%" y="207.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (263 samples, 16.61%)</title><rect x="47.8206%" y="261" width="16.6140%" height="15" fill="rgb(236,97,10)" fg:x="757" fg:w="263"/><text x="48.0706%" y="271.50">&lt;std::collections::hash::m..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (263 samples, 16.61%)</title><rect x="47.8206%" y="245" width="16.6140%" height="15" fill="rgb(233,208,19)" fg:x="757" fg:w="263"/><text x="48.0706%" y="255.50">&lt;core::hash::sip::SipHashe..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (263 samples, 16.61%)</title><rect x="47.8206%" y="229" width="16.6140%" height="15" fill="rgb(216,164,2)" fg:x="757" fg:w="263"/><text x="48.0706%" y="239.50">&lt;core::hash::sip::Hasher&lt;S..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (168 samples, 10.61%)</title><rect x="53.8219%" y="213" width="10.6128%" height="15" fill="rgb(220,129,5)" fg:x="852" fg:w="168"/><text x="54.0719%" y="223.50">&lt;core::hash::si..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (64 samples, 4.04%)</title><rect x="60.3917%" y="197" width="4.0430%" height="15" fill="rgb(242,17,10)" fg:x="956" fg:w="64"/><text x="60.6417%" y="207.50">core..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.88%)</title><rect x="65.3822%" y="149" width="0.8844%" height="15" fill="rgb(242,107,0)" fg:x="1035" fg:w="14"/><text x="65.6322%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (296 samples, 18.70%)</title><rect x="47.8206%" y="293" width="18.6987%" height="15" fill="rgb(251,28,31)" fg:x="757" fg:w="296"/><text x="48.0706%" y="303.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (296 samples, 18.70%)</title><rect x="47.8206%" y="277" width="18.6987%" height="15" fill="rgb(233,223,10)" fg:x="757" fg:w="296"/><text x="48.0706%" y="287.50">core::hash::BuildHasher::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (33 samples, 2.08%)</title><rect x="64.4346%" y="261" width="2.0846%" height="15" fill="rgb(215,21,27)" fg:x="1020" fg:w="33"/><text x="64.6846%" y="271.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (33 samples, 2.08%)</title><rect x="64.4346%" y="245" width="2.0846%" height="15" fill="rgb(232,23,21)" fg:x="1020" fg:w="33"/><text x="64.6846%" y="255.50">c..</text></g><g><title>core::hash::Hasher::write_u64 (33 samples, 2.08%)</title><rect x="64.4346%" y="229" width="2.0846%" height="15" fill="rgb(244,5,23)" fg:x="1020" fg:w="33"/><text x="64.6846%" y="239.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 2.08%)</title><rect x="64.4346%" y="213" width="2.0846%" height="15" fill="rgb(226,81,46)" fg:x="1020" fg:w="33"/><text x="64.6846%" y="223.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 2.08%)</title><rect x="64.4346%" y="197" width="2.0846%" height="15" fill="rgb(247,70,30)" fg:x="1020" fg:w="33"/><text x="64.6846%" y="207.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 2.08%)</title><rect x="64.4346%" y="181" width="2.0846%" height="15" fill="rgb(212,68,19)" fg:x="1020" fg:w="33"/><text x="64.6846%" y="191.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 1.20%)</title><rect x="65.3190%" y="165" width="1.2003%" height="15" fill="rgb(240,187,13)" fg:x="1034" fg:w="19"/><text x="65.5690%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.25%)</title><rect x="66.2666%" y="149" width="0.2527%" height="15" fill="rgb(223,113,26)" fg:x="1049" fg:w="4"/><text x="66.5166%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.13%)</title><rect x="75.9949%" y="229" width="0.1263%" height="15" fill="rgb(206,192,2)" fg:x="1203" fg:w="2"/><text x="76.2449%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 6.13%)</title><rect x="70.0569%" y="245" width="6.1276%" height="15" fill="rgb(241,108,4)" fg:x="1109" fg:w="97"/><text x="70.3069%" y="255.50">&lt;hashbro..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.06%)</title><rect x="76.1213%" y="229" width="0.0632%" height="15" fill="rgb(247,173,49)" fg:x="1205" fg:w="1"/><text x="76.3713%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7 samples, 0.44%)</title><rect x="76.1845%" y="245" width="0.4422%" height="15" fill="rgb(224,114,35)" fg:x="1206" fg:w="7"/><text x="76.4345%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (7 samples, 0.44%)</title><rect x="76.1845%" y="229" width="0.4422%" height="15" fill="rgb(245,159,27)" fg:x="1206" fg:w="7"/><text x="76.4345%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7 samples, 0.44%)</title><rect x="76.1845%" y="213" width="0.4422%" height="15" fill="rgb(245,172,44)" fg:x="1206" fg:w="7"/><text x="76.4345%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.44%)</title><rect x="76.1845%" y="197" width="0.4422%" height="15" fill="rgb(236,23,11)" fg:x="1206" fg:w="7"/><text x="76.4345%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (172 samples, 10.87%)</title><rect x="76.6267%" y="245" width="10.8654%" height="15" fill="rgb(205,117,38)" fg:x="1213" fg:w="172"/><text x="76.8767%" y="255.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (40 samples, 2.53%)</title><rect x="87.4921%" y="245" width="2.5268%" height="15" fill="rgb(237,72,25)" fg:x="1385" fg:w="40"/><text x="87.7421%" y="255.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (40 samples, 2.53%)</title><rect x="87.4921%" y="229" width="2.5268%" height="15" fill="rgb(244,70,9)" fg:x="1385" fg:w="40"/><text x="87.7421%" y="239.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::count (726 samples, 45.86%)</title><rect x="44.2830%" y="405" width="45.8623%" height="15" fill="rgb(217,125,39)" fg:x="701" fg:w="726"/><text x="44.5330%" y="415.50">core::iter::traits::iterator::Iterator::count</text></g><g><title>core::iter::traits::iterator::Iterator::fold (726 samples, 45.86%)</title><rect x="44.2830%" y="389" width="45.8623%" height="15" fill="rgb(235,36,10)" fg:x="701" fg:w="726"/><text x="44.5330%" y="399.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>&lt;std::collections::hash::set::Intersection&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (726 samples, 45.86%)</title><rect x="44.2830%" y="373" width="45.8623%" height="15" fill="rgb(251,123,47)" fg:x="701" fg:w="726"/><text x="44.5330%" y="383.50">&lt;std::collections::hash::set::Intersection&lt;T,S&gt; as core::iter::traits::iter..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (670 samples, 42.32%)</title><rect x="47.8206%" y="357" width="42.3247%" height="15" fill="rgb(221,13,13)" fg:x="757" fg:w="670"/><text x="48.0706%" y="367.50">std::collections::hash::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (670 samples, 42.32%)</title><rect x="47.8206%" y="341" width="42.3247%" height="15" fill="rgb(238,131,9)" fg:x="757" fg:w="670"/><text x="48.0706%" y="351.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (670 samples, 42.32%)</title><rect x="47.8206%" y="325" width="42.3247%" height="15" fill="rgb(211,50,8)" fg:x="757" fg:w="670"/><text x="48.0706%" y="335.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (670 samples, 42.32%)</title><rect x="47.8206%" y="309" width="42.3247%" height="15" fill="rgb(245,182,24)" fg:x="757" fg:w="670"/><text x="48.0706%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (374 samples, 23.63%)</title><rect x="66.5193%" y="293" width="23.6260%" height="15" fill="rgb(242,14,37)" fg:x="1053" fg:w="374"/><text x="66.7693%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (374 samples, 23.63%)</title><rect x="66.5193%" y="277" width="23.6260%" height="15" fill="rgb(246,228,12)" fg:x="1053" fg:w="374"/><text x="66.7693%" y="287.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (374 samples, 23.63%)</title><rect x="66.5193%" y="261" width="23.6260%" height="15" fill="rgb(213,55,15)" fg:x="1053" fg:w="374"/><text x="66.7693%" y="271.50">hashbrown::raw::RawTableInner&lt;A&gt;::find..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.13%)</title><rect x="90.0190%" y="245" width="0.1263%" height="15" fill="rgb(209,9,3)" fg:x="1425" fg:w="2"/><text x="90.2690%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.13%)</title><rect x="90.0190%" y="229" width="0.1263%" height="15" fill="rgb(230,59,30)" fg:x="1425" fg:w="2"/><text x="90.2690%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.13%)</title><rect x="90.0190%" y="213" width="0.1263%" height="15" fill="rgb(209,121,21)" fg:x="1425" fg:w="2"/><text x="90.2690%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.25%)</title><rect x="90.5243%" y="325" width="0.2527%" height="15" fill="rgb(220,109,13)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.25%)</title><rect x="90.5243%" y="309" width="0.2527%" height="15" fill="rgb(232,18,1)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.25%)</title><rect x="90.5243%" y="293" width="0.2527%" height="15" fill="rgb(215,41,42)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.25%)</title><rect x="90.5243%" y="277" width="0.2527%" height="15" fill="rgb(224,123,36)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (4 samples, 0.25%)</title><rect x="90.5243%" y="261" width="0.2527%" height="15" fill="rgb(240,125,3)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (4 samples, 0.25%)</title><rect x="90.5243%" y="245" width="0.2527%" height="15" fill="rgb(205,98,50)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (4 samples, 0.25%)</title><rect x="90.5243%" y="229" width="0.2527%" height="15" fill="rgb(205,185,37)" fg:x="1433" fg:w="4"/><text x="90.7743%" y="239.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (2 samples, 0.13%)</title><rect x="90.6507%" y="213" width="0.1263%" height="15" fill="rgb(238,207,15)" fg:x="1435" fg:w="2"/><text x="90.9007%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.13%)</title><rect x="90.6507%" y="197" width="0.1263%" height="15" fill="rgb(213,199,42)" fg:x="1435" fg:w="2"/><text x="90.9007%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.13%)</title><rect x="90.6507%" y="181" width="0.1263%" height="15" fill="rgb(235,201,11)" fg:x="1435" fg:w="2"/><text x="90.9007%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (2 samples, 0.13%)</title><rect x="90.6507%" y="165" width="0.1263%" height="15" fill="rgb(207,46,11)" fg:x="1435" fg:w="2"/><text x="90.9007%" y="175.50"></text></g><g><title>core::ptr::write (2 samples, 0.13%)</title><rect x="90.6507%" y="149" width="0.1263%" height="15" fill="rgb(241,35,35)" fg:x="1435" fg:w="2"/><text x="90.9007%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.06%)</title><rect x="90.7770%" y="325" width="0.0632%" height="15" fill="rgb(243,32,47)" fg:x="1437" fg:w="1"/><text x="91.0270%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::size_hint (1 samples, 0.06%)</title><rect x="90.7770%" y="309" width="0.0632%" height="15" fill="rgb(247,202,23)" fg:x="1437" fg:w="1"/><text x="91.0270%" y="319.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (1 samples, 0.06%)</title><rect x="90.7770%" y="293" width="0.0632%" height="15" fill="rgb(219,102,11)" fg:x="1437" fg:w="1"/><text x="91.0270%" y="303.50"></text></g><g><title>__rdl_alloc (2 samples, 0.13%)</title><rect x="90.9665%" y="213" width="0.1263%" height="15" fill="rgb(243,110,44)" fg:x="1440" fg:w="2"/><text x="91.2165%" y="223.50"></text></g><g><title>__rust_alloc (1 samples, 0.06%)</title><rect x="91.0929%" y="213" width="0.0632%" height="15" fill="rgb(222,74,54)" fg:x="1442" fg:w="1"/><text x="91.3429%" y="223.50"></text></g><g><title>itertools::Itertools::collect_vec (24 samples, 1.52%)</title><rect x="90.1453%" y="405" width="1.5161%" height="15" fill="rgb(216,99,12)" fg:x="1427" fg:w="24"/><text x="90.3953%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 1.52%)</title><rect x="90.1453%" y="389" width="1.5161%" height="15" fill="rgb(226,22,26)" fg:x="1427" fg:w="24"/><text x="90.3953%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (24 samples, 1.52%)</title><rect x="90.1453%" y="373" width="1.5161%" height="15" fill="rgb(217,163,10)" fg:x="1427" fg:w="24"/><text x="90.3953%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.52%)</title><rect x="90.1453%" y="357" width="1.5161%" height="15" fill="rgb(213,25,53)" fg:x="1427" fg:w="24"/><text x="90.3953%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20 samples, 1.26%)</title><rect x="90.3980%" y="341" width="1.2634%" height="15" fill="rgb(252,105,26)" fg:x="1431" fg:w="20"/><text x="90.6480%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.82%)</title><rect x="90.8402%" y="325" width="0.8212%" height="15" fill="rgb(220,39,43)" fg:x="1438" fg:w="13"/><text x="91.0902%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.82%)</title><rect x="90.8402%" y="309" width="0.8212%" height="15" fill="rgb(229,68,48)" fg:x="1438" fg:w="13"/><text x="91.0902%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.82%)</title><rect x="90.8402%" y="293" width="0.8212%" height="15" fill="rgb(252,8,32)" fg:x="1438" fg:w="13"/><text x="91.0902%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.82%)</title><rect x="90.8402%" y="277" width="0.8212%" height="15" fill="rgb(223,20,43)" fg:x="1438" fg:w="13"/><text x="91.0902%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.76%)</title><rect x="90.9033%" y="261" width="0.7581%" height="15" fill="rgb(229,81,49)" fg:x="1439" fg:w="12"/><text x="91.1533%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.76%)</title><rect x="90.9033%" y="245" width="0.7581%" height="15" fill="rgb(236,28,36)" fg:x="1439" fg:w="12"/><text x="91.1533%" y="255.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.76%)</title><rect x="90.9033%" y="229" width="0.7581%" height="15" fill="rgb(249,185,26)" fg:x="1439" fg:w="12"/><text x="91.1533%" y="239.50"></text></g><g><title>malloc (8 samples, 0.51%)</title><rect x="91.1560%" y="213" width="0.5054%" height="15" fill="rgb(249,174,33)" fg:x="1443" fg:w="8"/><text x="91.4060%" y="223.50"></text></g><g><title>day04::Card::win_more_cards (753 samples, 47.57%)</title><rect x="44.2198%" y="421" width="47.5679%" height="15" fill="rgb(233,201,37)" fg:x="700" fg:w="753"/><text x="44.4698%" y="431.50">day04::Card::win_more_cards</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::intersection (2 samples, 0.13%)</title><rect x="91.6614%" y="405" width="0.1263%" height="15" fill="rgb(221,78,26)" fg:x="1451" fg:w="2"/><text x="91.9114%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.25%)</title><rect x="92.2931%" y="277" width="0.2527%" height="15" fill="rgb(250,127,30)" fg:x="1461" fg:w="4"/><text x="92.5431%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="92.7353%" y="117" width="0.0632%" height="15" fill="rgb(230,49,44)" fg:x="1468" fg:w="1"/><text x="92.9853%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.76%)</title><rect x="92.5458%" y="165" width="0.7581%" height="15" fill="rgb(229,67,23)" fg:x="1465" fg:w="12"/><text x="92.7958%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.76%)</title><rect x="92.5458%" y="149" width="0.7581%" height="15" fill="rgb(249,83,47)" fg:x="1465" fg:w="12"/><text x="92.7958%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.76%)</title><rect x="92.5458%" y="133" width="0.7581%" height="15" fill="rgb(215,43,3)" fg:x="1465" fg:w="12"/><text x="92.7958%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.51%)</title><rect x="92.7985%" y="117" width="0.5054%" height="15" fill="rgb(238,154,13)" fg:x="1469" fg:w="8"/><text x="93.0485%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.44%)</title><rect x="92.8617%" y="101" width="0.4422%" height="15" fill="rgb(219,56,2)" fg:x="1470" fg:w="7"/><text x="93.1117%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.82%)</title><rect x="92.5458%" y="197" width="0.8212%" height="15" fill="rgb(233,0,4)" fg:x="1465" fg:w="13"/><text x="92.7958%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.82%)</title><rect x="92.5458%" y="181" width="0.8212%" height="15" fill="rgb(235,30,7)" fg:x="1465" fg:w="13"/><text x="92.7958%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="93.3039%" y="165" width="0.0632%" height="15" fill="rgb(250,79,13)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="93.3039%" y="149" width="0.0632%" height="15" fill="rgb(211,146,34)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="93.3039%" y="133" width="0.0632%" height="15" fill="rgb(228,22,38)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="93.3039%" y="117" width="0.0632%" height="15" fill="rgb(235,168,5)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="93.3039%" y="101" width="0.0632%" height="15" fill="rgb(221,155,16)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="93.3039%" y="85" width="0.0632%" height="15" fill="rgb(215,215,53)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="93.3039%" y="69" width="0.0632%" height="15" fill="rgb(223,4,10)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.06%)</title><rect x="93.3039%" y="53" width="0.0632%" height="15" fill="rgb(234,103,6)" fg:x="1477" fg:w="1"/><text x="93.5539%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.25%)</title><rect x="94.2514%" y="149" width="0.2527%" height="15" fill="rgb(227,97,0)" fg:x="1492" fg:w="4"/><text x="94.5014%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="94.4409%" y="133" width="0.0632%" height="15" fill="rgb(234,150,53)" fg:x="1495" fg:w="1"/><text x="94.6909%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.25%)</title><rect x="94.5041%" y="133" width="0.2527%" height="15" fill="rgb(228,201,54)" fg:x="1496" fg:w="4"/><text x="94.7541%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.25%)</title><rect x="94.5041%" y="117" width="0.2527%" height="15" fill="rgb(222,22,37)" fg:x="1496" fg:w="4"/><text x="94.7541%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.25%)</title><rect x="94.5041%" y="101" width="0.2527%" height="15" fill="rgb(237,53,32)" fg:x="1496" fg:w="4"/><text x="94.7541%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.25%)</title><rect x="94.5041%" y="85" width="0.2527%" height="15" fill="rgb(233,25,53)" fg:x="1496" fg:w="4"/><text x="94.7541%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.32%)</title><rect x="94.5041%" y="149" width="0.3159%" height="15" fill="rgb(210,40,34)" fg:x="1496" fg:w="5"/><text x="94.7541%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.06%)</title><rect x="94.7568%" y="133" width="0.0632%" height="15" fill="rgb(241,220,44)" fg:x="1500" fg:w="1"/><text x="95.0068%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.06%)</title><rect x="94.7568%" y="117" width="0.0632%" height="15" fill="rgb(235,28,35)" fg:x="1500" fg:w="1"/><text x="95.0068%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.06%)</title><rect x="94.7568%" y="101" width="0.0632%" height="15" fill="rgb(210,56,17)" fg:x="1500" fg:w="1"/><text x="95.0068%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.25%)</title><rect x="94.8200%" y="149" width="0.2527%" height="15" fill="rgb(224,130,29)" fg:x="1501" fg:w="4"/><text x="95.0700%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 3.28%)</title><rect x="92.2931%" y="309" width="3.2849%" height="15" fill="rgb(235,212,8)" fg:x="1461" fg:w="52"/><text x="92.5431%" y="319.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (52 samples, 3.28%)</title><rect x="92.2931%" y="293" width="3.2849%" height="15" fill="rgb(223,33,50)" fg:x="1461" fg:w="52"/><text x="92.5431%" y="303.50">&lt;co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (48 samples, 3.03%)</title><rect x="92.5458%" y="277" width="3.0322%" height="15" fill="rgb(219,149,13)" fg:x="1465" fg:w="48"/><text x="92.7958%" y="287.50">cor..</text></g><g><title>day04::CardSet::card_for_cards::_{{closure}} (48 samples, 3.03%)</title><rect x="92.5458%" y="261" width="3.0322%" height="15" fill="rgb(250,156,29)" fg:x="1465" fg:w="48"/><text x="92.7958%" y="271.50">day..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (48 samples, 3.03%)</title><rect x="92.5458%" y="245" width="3.0322%" height="15" fill="rgb(216,193,19)" fg:x="1465" fg:w="48"/><text x="92.7958%" y="255.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (48 samples, 3.03%)</title><rect x="92.5458%" y="229" width="3.0322%" height="15" fill="rgb(216,135,14)" fg:x="1465" fg:w="48"/><text x="92.7958%" y="239.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (48 samples, 3.03%)</title><rect x="92.5458%" y="213" width="3.0322%" height="15" fill="rgb(241,47,5)" fg:x="1465" fg:w="48"/><text x="92.7958%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (35 samples, 2.21%)</title><rect x="93.3670%" y="197" width="2.2110%" height="15" fill="rgb(233,42,35)" fg:x="1478" fg:w="35"/><text x="93.6170%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (35 samples, 2.21%)</title><rect x="93.3670%" y="181" width="2.2110%" height="15" fill="rgb(231,13,6)" fg:x="1478" fg:w="35"/><text x="93.6170%" y="191.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (35 samples, 2.21%)</title><rect x="93.3670%" y="165" width="2.2110%" height="15" fill="rgb(207,181,40)" fg:x="1478" fg:w="35"/><text x="93.6170%" y="175.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.51%)</title><rect x="95.0726%" y="149" width="0.5054%" height="15" fill="rgb(254,173,49)" fg:x="1505" fg:w="8"/><text x="95.3226%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.51%)</title><rect x="95.0726%" y="133" width="0.5054%" height="15" fill="rgb(221,1,38)" fg:x="1505" fg:w="8"/><text x="95.3226%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="95.6412%" y="245" width="0.0632%" height="15" fill="rgb(206,124,46)" fg:x="1514" fg:w="1"/><text x="95.8912%" y="255.50"></text></g><g><title>__rdl_realloc (2 samples, 0.13%)</title><rect x="95.7044%" y="181" width="0.1263%" height="15" fill="rgb(249,21,11)" fg:x="1515" fg:w="2"/><text x="95.9544%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.13%)</title><rect x="95.7044%" y="165" width="0.1263%" height="15" fill="rgb(222,201,40)" fg:x="1515" fg:w="2"/><text x="95.9544%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.57%)</title><rect x="95.7044%" y="229" width="0.5685%" height="15" fill="rgb(235,61,29)" fg:x="1515" fg:w="9"/><text x="95.9544%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.57%)</title><rect x="95.7044%" y="213" width="0.5685%" height="15" fill="rgb(219,207,3)" fg:x="1515" fg:w="9"/><text x="95.9544%" y="223.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.57%)</title><rect x="95.7044%" y="197" width="0.5685%" height="15" fill="rgb(222,56,46)" fg:x="1515" fg:w="9"/><text x="95.9544%" y="207.50"></text></g><g><title>realloc (7 samples, 0.44%)</title><rect x="95.8307%" y="181" width="0.4422%" height="15" fill="rgb(239,76,54)" fg:x="1517" fg:w="7"/><text x="96.0807%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.25%)</title><rect x="96.0202%" y="165" width="0.2527%" height="15" fill="rgb(231,124,27)" fg:x="1520" fg:w="4"/><text x="96.2702%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.13%)</title><rect x="96.1466%" y="149" width="0.1263%" height="15" fill="rgb(249,195,6)" fg:x="1522" fg:w="2"/><text x="96.3966%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.63%)</title><rect x="95.7044%" y="245" width="0.6317%" height="15" fill="rgb(237,174,47)" fg:x="1515" fg:w="10"/><text x="95.9544%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="96.2729%" y="229" width="0.0632%" height="15" fill="rgb(206,201,31)" fg:x="1524" fg:w="1"/><text x="96.5229%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (65 samples, 4.11%)</title><rect x="92.2931%" y="341" width="4.1061%" height="15" fill="rgb(231,57,52)" fg:x="1461" fg:w="65"/><text x="92.5431%" y="351.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (65 samples, 4.11%)</title><rect x="92.2931%" y="325" width="4.1061%" height="15" fill="rgb(248,177,22)" fg:x="1461" fg:w="65"/><text x="92.5431%" y="335.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.82%)</title><rect x="95.5780%" y="309" width="0.8212%" height="15" fill="rgb(215,211,37)" fg:x="1513" fg:w="13"/><text x="95.8280%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.82%)</title><rect x="95.5780%" y="293" width="0.8212%" height="15" fill="rgb(241,128,51)" fg:x="1513" fg:w="13"/><text x="95.8280%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.82%)</title><rect x="95.5780%" y="277" width="0.8212%" height="15" fill="rgb(227,165,31)" fg:x="1513" fg:w="13"/><text x="95.8280%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.82%)</title><rect x="95.5780%" y="261" width="0.8212%" height="15" fill="rgb(228,167,24)" fg:x="1513" fg:w="13"/><text x="95.8280%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.06%)</title><rect x="96.3361%" y="245" width="0.0632%" height="15" fill="rgb(228,143,12)" fg:x="1525" fg:w="1"/><text x="96.5861%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.06%)</title><rect x="96.3361%" y="229" width="0.0632%" height="15" fill="rgb(249,149,8)" fg:x="1525" fg:w="1"/><text x="96.5861%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="96.7151%" y="133" width="0.0632%" height="15" fill="rgb(243,35,44)" fg:x="1531" fg:w="1"/><text x="96.9651%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.19%)</title><rect x="96.6519%" y="149" width="0.1895%" height="15" fill="rgb(246,89,9)" fg:x="1530" fg:w="3"/><text x="96.9019%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.06%)</title><rect x="96.7783%" y="133" width="0.0632%" height="15" fill="rgb(233,213,13)" fg:x="1532" fg:w="1"/><text x="97.0283%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.57%)</title><rect x="96.9046%" y="133" width="0.5685%" height="15" fill="rgb(233,141,41)" fg:x="1534" fg:w="9"/><text x="97.1546%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 1.01%)</title><rect x="96.5888%" y="197" width="1.0107%" height="15" fill="rgb(239,167,4)" fg:x="1529" fg:w="16"/><text x="96.8388%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 1.01%)</title><rect x="96.5888%" y="181" width="1.0107%" height="15" fill="rgb(209,217,16)" fg:x="1529" fg:w="16"/><text x="96.8388%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 1.01%)</title><rect x="96.5888%" y="165" width="1.0107%" height="15" fill="rgb(219,88,35)" fg:x="1529" fg:w="16"/><text x="96.8388%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.76%)</title><rect x="96.8414%" y="149" width="0.7581%" height="15" fill="rgb(220,193,23)" fg:x="1533" fg:w="12"/><text x="97.0914%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.13%)</title><rect x="97.4732%" y="133" width="0.1263%" height="15" fill="rgb(230,90,52)" fg:x="1543" fg:w="2"/><text x="97.7232%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 1.20%)</title><rect x="96.4624%" y="229" width="1.2003%" height="15" fill="rgb(252,106,19)" fg:x="1527" fg:w="19"/><text x="96.7124%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 1.20%)</title><rect x="96.4624%" y="213" width="1.2003%" height="15" fill="rgb(206,74,20)" fg:x="1527" fg:w="19"/><text x="96.7124%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="97.5995%" y="197" width="0.0632%" height="15" fill="rgb(230,138,44)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="97.5995%" y="181" width="0.0632%" height="15" fill="rgb(235,182,43)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="97.5995%" y="165" width="0.0632%" height="15" fill="rgb(242,16,51)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="97.5995%" y="149" width="0.0632%" height="15" fill="rgb(248,9,4)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="97.5995%" y="133" width="0.0632%" height="15" fill="rgb(210,31,22)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="97.5995%" y="117" width="0.0632%" height="15" fill="rgb(239,54,39)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="97.5995%" y="101" width="0.0632%" height="15" fill="rgb(230,99,41)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.06%)</title><rect x="97.5995%" y="85" width="0.0632%" height="15" fill="rgb(253,106,12)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.44%)</title><rect x="98.0417%" y="181" width="0.4422%" height="15" fill="rgb(213,46,41)" fg:x="1552" fg:w="7"/><text x="98.2917%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="98.4207%" y="165" width="0.0632%" height="15" fill="rgb(215,133,35)" fg:x="1558" fg:w="1"/><text x="98.6707%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.19%)</title><rect x="98.4839%" y="165" width="0.1895%" height="15" fill="rgb(213,28,5)" fg:x="1559" fg:w="3"/><text x="98.7339%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.19%)</title><rect x="98.4839%" y="149" width="0.1895%" height="15" fill="rgb(215,77,49)" fg:x="1559" fg:w="3"/><text x="98.7339%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.19%)</title><rect x="98.4839%" y="133" width="0.1895%" height="15" fill="rgb(248,100,22)" fg:x="1559" fg:w="3"/><text x="98.7339%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.19%)</title><rect x="98.4839%" y="117" width="0.1895%" height="15" fill="rgb(208,67,9)" fg:x="1559" fg:w="3"/><text x="98.7339%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.32%)</title><rect x="98.4839%" y="181" width="0.3159%" height="15" fill="rgb(219,133,21)" fg:x="1559" fg:w="5"/><text x="98.7339%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.13%)</title><rect x="98.6734%" y="165" width="0.1263%" height="15" fill="rgb(246,46,29)" fg:x="1562" fg:w="2"/><text x="98.9234%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.13%)</title><rect x="98.6734%" y="149" width="0.1263%" height="15" fill="rgb(246,185,52)" fg:x="1562" fg:w="2"/><text x="98.9234%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.13%)</title><rect x="98.6734%" y="133" width="0.1263%" height="15" fill="rgb(252,136,11)" fg:x="1562" fg:w="2"/><text x="98.9234%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.44%)</title><rect x="98.7997%" y="181" width="0.4422%" height="15" fill="rgb(219,138,53)" fg:x="1564" fg:w="7"/><text x="99.0497%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 2.97%)</title><rect x="96.3992%" y="341" width="2.9690%" height="15" fill="rgb(211,51,23)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="351.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (47 samples, 2.97%)</title><rect x="96.3992%" y="325" width="2.9690%" height="15" fill="rgb(247,221,28)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="335.50">&lt;co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (47 samples, 2.97%)</title><rect x="96.3992%" y="309" width="2.9690%" height="15" fill="rgb(251,222,45)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="319.50">cor..</text></g><g><title>day04::CardSet::card_for_cards::_{{closure}} (47 samples, 2.97%)</title><rect x="96.3992%" y="293" width="2.9690%" height="15" fill="rgb(217,162,53)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="303.50">day..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (47 samples, 2.97%)</title><rect x="96.3992%" y="277" width="2.9690%" height="15" fill="rgb(229,93,14)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="287.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (47 samples, 2.97%)</title><rect x="96.3992%" y="261" width="2.9690%" height="15" fill="rgb(209,67,49)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="271.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (47 samples, 2.97%)</title><rect x="96.3992%" y="245" width="2.9690%" height="15" fill="rgb(213,87,29)" fg:x="1526" fg:w="47"/><text x="96.6492%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (27 samples, 1.71%)</title><rect x="97.6627%" y="229" width="1.7056%" height="15" fill="rgb(205,151,52)" fg:x="1546" fg:w="27"/><text x="97.9127%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (27 samples, 1.71%)</title><rect x="97.6627%" y="213" width="1.7056%" height="15" fill="rgb(253,215,39)" fg:x="1546" fg:w="27"/><text x="97.9127%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (27 samples, 1.71%)</title><rect x="97.6627%" y="197" width="1.7056%" height="15" fill="rgb(221,220,41)" fg:x="1546" fg:w="27"/><text x="97.9127%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.13%)</title><rect x="99.2419%" y="181" width="0.1263%" height="15" fill="rgb(218,133,21)" fg:x="1571" fg:w="2"/><text x="99.4919%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.13%)</title><rect x="99.2419%" y="165" width="0.1263%" height="15" fill="rgb(221,193,43)" fg:x="1571" fg:w="2"/><text x="99.4919%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.13%)</title><rect x="99.3683%" y="341" width="0.1263%" height="15" fill="rgb(240,128,52)" fg:x="1573" fg:w="2"/><text x="99.6183%" y="351.50"></text></g><g><title>__rust_alloc (2 samples, 0.13%)</title><rect x="99.4946%" y="229" width="0.1263%" height="15" fill="rgb(253,114,12)" fg:x="1575" fg:w="2"/><text x="99.7446%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.38%)</title><rect x="99.4946%" y="341" width="0.3790%" height="15" fill="rgb(215,223,47)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.38%)</title><rect x="99.4946%" y="325" width="0.3790%" height="15" fill="rgb(248,225,23)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.38%)</title><rect x="99.4946%" y="309" width="0.3790%" height="15" fill="rgb(250,108,0)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.38%)</title><rect x="99.4946%" y="293" width="0.3790%" height="15" fill="rgb(228,208,7)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.38%)</title><rect x="99.4946%" y="277" width="0.3790%" height="15" fill="rgb(244,45,10)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.38%)</title><rect x="99.4946%" y="261" width="0.3790%" height="15" fill="rgb(207,125,25)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="271.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.38%)</title><rect x="99.4946%" y="245" width="0.3790%" height="15" fill="rgb(210,195,18)" fg:x="1575" fg:w="6"/><text x="99.7446%" y="255.50"></text></g><g><title>malloc (4 samples, 0.25%)</title><rect x="99.6210%" y="229" width="0.2527%" height="15" fill="rgb(249,80,12)" fg:x="1577" fg:w="4"/><text x="99.8710%" y="239.50"></text></g><g><title>day04::CardSet::card_for_cards (1,575 samples, 99.49%)</title><rect x="0.4422%" y="437" width="99.4946%" height="15" fill="rgb(221,65,9)" fg:x="7" fg:w="1575"/><text x="0.6922%" y="447.50">day04::CardSet::card_for_cards</text></g><g><title>itertools::Itertools::collect_vec (129 samples, 8.15%)</title><rect x="91.7877%" y="421" width="8.1491%" height="15" fill="rgb(235,49,36)" fg:x="1453" fg:w="129"/><text x="92.0377%" y="431.50">itertools::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (129 samples, 8.15%)</title><rect x="91.7877%" y="405" width="8.1491%" height="15" fill="rgb(225,32,20)" fg:x="1453" fg:w="129"/><text x="92.0377%" y="415.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (129 samples, 8.15%)</title><rect x="91.7877%" y="389" width="8.1491%" height="15" fill="rgb(215,141,46)" fg:x="1453" fg:w="129"/><text x="92.0377%" y="399.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (127 samples, 8.02%)</title><rect x="91.9141%" y="373" width="8.0227%" height="15" fill="rgb(250,160,47)" fg:x="1455" fg:w="127"/><text x="92.1641%" y="383.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (122 samples, 7.71%)</title><rect x="92.2299%" y="357" width="7.7069%" height="15" fill="rgb(216,222,40)" fg:x="1460" fg:w="122"/><text x="92.4799%" y="367.50">&lt;alloc::vec..</text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="99.8737%" y="341" width="0.0632%" height="15" fill="rgb(234,217,39)" fg:x="1581" fg:w="1"/><text x="100.1237%" y="351.50"></text></g><g><title>all (1,583 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="1583"/><text x="0.2500%" y="751.50"></text></g><g><title>day04 (1,583 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="1583"/><text x="0.2500%" y="735.50">day04</text></g><g><title>_start (1,576 samples, 99.56%)</title><rect x="0.4422%" y="709" width="99.5578%" height="15" fill="rgb(249,199,10)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="719.50">_start</text></g><g><title>__libc_start_main (1,576 samples, 99.56%)</title><rect x="0.4422%" y="693" width="99.5578%" height="15" fill="rgb(249,222,13)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="703.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,576 samples, 99.56%)</title><rect x="0.4422%" y="677" width="99.5578%" height="15" fill="rgb(244,185,38)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="687.50">[libc.so.6]</text></g><g><title>main (1,576 samples, 99.56%)</title><rect x="0.4422%" y="661" width="99.5578%" height="15" fill="rgb(236,202,9)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (1,576 samples, 99.56%)</title><rect x="0.4422%" y="645" width="99.5578%" height="15" fill="rgb(250,229,37)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,576 samples, 99.56%)</title><rect x="0.4422%" y="629" width="99.5578%" height="15" fill="rgb(206,174,23)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,576 samples, 99.56%)</title><rect x="0.4422%" y="613" width="99.5578%" height="15" fill="rgb(211,33,43)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,576 samples, 99.56%)</title><rect x="0.4422%" y="597" width="99.5578%" height="15" fill="rgb(245,58,50)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,576 samples, 99.56%)</title><rect x="0.4422%" y="581" width="99.5578%" height="15" fill="rgb(244,68,36)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="591.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,576 samples, 99.56%)</title><rect x="0.4422%" y="565" width="99.5578%" height="15" fill="rgb(232,229,15)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,576 samples, 99.56%)</title><rect x="0.4422%" y="549" width="99.5578%" height="15" fill="rgb(254,30,23)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,576 samples, 99.56%)</title><rect x="0.4422%" y="533" width="99.5578%" height="15" fill="rgb(235,160,14)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,576 samples, 99.56%)</title><rect x="0.4422%" y="517" width="99.5578%" height="15" fill="rgb(212,155,44)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,576 samples, 99.56%)</title><rect x="0.4422%" y="501" width="99.5578%" height="15" fill="rgb(226,2,50)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="511.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,576 samples, 99.56%)</title><rect x="0.4422%" y="485" width="99.5578%" height="15" fill="rgb(234,177,6)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,576 samples, 99.56%)</title><rect x="0.4422%" y="469" width="99.5578%" height="15" fill="rgb(217,24,9)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>day04::main (1,576 samples, 99.56%)</title><rect x="0.4422%" y="453" width="99.5578%" height="15" fill="rgb(220,13,46)" fg:x="7" fg:w="1576"/><text x="0.6922%" y="463.50">day04::main</text></g><g><title>day04::CardSet::parse (1 samples, 0.06%)</title><rect x="99.9368%" y="437" width="0.0632%" height="15" fill="rgb(239,221,27)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.06%)</title><rect x="99.9368%" y="421" width="0.0632%" height="15" fill="rgb(222,198,25)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="99.9368%" y="405" width="0.0632%" height="15" fill="rgb(211,99,13)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.06%)</title><rect x="99.9368%" y="389" width="0.0632%" height="15" fill="rgb(232,111,31)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="373" width="0.0632%" height="15" fill="rgb(245,82,37)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.06%)</title><rect x="99.9368%" y="357" width="0.0632%" height="15" fill="rgb(227,149,46)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="99.9368%" y="341" width="0.0632%" height="15" fill="rgb(218,36,50)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="99.9368%" y="325" width="0.0632%" height="15" fill="rgb(226,80,48)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="99.9368%" y="309" width="0.0632%" height="15" fill="rgb(238,224,15)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="99.9368%" y="293" width="0.0632%" height="15" fill="rgb(241,136,10)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="99.9368%" y="277" width="0.0632%" height="15" fill="rgb(208,32,45)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.06%)</title><rect x="99.9368%" y="261" width="0.0632%" height="15" fill="rgb(207,135,9)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.06%)</title><rect x="99.9368%" y="245" width="0.0632%" height="15" fill="rgb(206,86,44)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="99.9368%" y="229" width="0.0632%" height="15" fill="rgb(245,177,15)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="213" width="0.0632%" height="15" fill="rgb(206,64,50)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="223.50"></text></g><g><title>day04::CardSet::parse::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="197" width="0.0632%" height="15" fill="rgb(234,36,40)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="207.50"></text></g><g><title>day04::Card::parse (1 samples, 0.06%)</title><rect x="99.9368%" y="181" width="0.0632%" height="15" fill="rgb(213,64,8)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="191.50"></text></g><g><title>nom::combinator::map_res::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="165" width="0.0632%" height="15" fill="rgb(210,75,36)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="175.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.06%)</title><rect x="99.9368%" y="149" width="0.0632%" height="15" fill="rgb(229,88,21)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="159.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="133" width="0.0632%" height="15" fill="rgb(252,204,47)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="143.50"></text></g><g><title>&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.06%)</title><rect x="99.9368%" y="117" width="0.0632%" height="15" fill="rgb(208,77,27)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="127.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.06%)</title><rect x="99.9368%" y="101" width="0.0632%" height="15" fill="rgb(221,76,26)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="111.50"></text></g><g><title>nom::multi::separated_list1::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="85" width="0.0632%" height="15" fill="rgb(225,139,18)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="95.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.06%)</title><rect x="99.9368%" y="69" width="0.0632%" height="15" fill="rgb(230,137,11)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="79.50"></text></g><g><title>nom::combinator::map_res::_{{closure}} (1 samples, 0.06%)</title><rect x="99.9368%" y="53" width="0.0632%" height="15" fill="rgb(212,28,1)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="63.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="99.9368%" y="37" width="0.0632%" height="15" fill="rgb(248,164,17)" fg:x="1582" fg:w="1"/><text x="100.1868%" y="47.50"></text></g></svg></svg>